#
# associationOperation(value)
#

# normal
0x1 => 0x1

# ...with newlines
0x1
=>
0x1

# right associative
# should parse as 0o3 =>(0x3 =>0b11)
0o3 => 0x3 => 0b11

# associationOperation(atOperation(value))
# should parse as (@0x1) => (@0x2)
@0x1 => @0x2

# associationOperation(unaryOperation(value))
# should parse as 0x1 => (~~~0x1)
0x1 => ~~~0x1

# associationOperation(hatOperation(value))
# should parse as (0x1 ^^^ 0x2) => (0x2 ^^^ 0x1)
0x1 ^^^ 0x2 => 0x2 ^^^ 0x1

# associationOperation(multiplicationOperation(value))
# should parse as (0x1 * 0x2) => (0x2 * 0x1)
0x1 * 0x2 => 0x2 * 0x1

# associationOperation(additionOperation(value))
# should parse as 0x3 => (0x1 + 0x2)
0x3 => 0x1 + 0x2

# associationOperation(twoOperation(value))
# should parse as (0x1..0x2) => (0x3..0x4)
0x1..0x2 => 0x3..0x4

# associationOperation(arrowOperation(value))
# should parse as ('a' |> 'b') => ('c' |> 'd')
'a' |> 'b' => 'c' |> 'd'

# associationOperation(relationalOperation(value))
# should parse as (0x1 < 0x2) => (0x2 > 0x1)
0x1 < 0x2 => 0x2 > 0x1

# associationOperation(comparisonOperation(value))
# should parse as (0x1 != 0x2) => (0x1 == 0x1)
0x1 != 0x2 => 0x1 == 0x1

# associationOperation(andOperation(value))
# should parse as (0x1 &&& 0x2) => (0x2 &&& 0x1)
0x1 &&& 0x2 => 0x2 &&& 0x1

# associationOperation(orOperation(value))
# should parse as (0x1 ||| 0x2) => (0x2 ||| 0x1)
0x1 ||| 0x2 => 0x2 ||| 0x1

# associationOperation(matchOperation(value))
# should parse as (0x1 = 0x1) => (0x2 = 0x2)
0x1 = 0x1 => 0x2 = 0x2