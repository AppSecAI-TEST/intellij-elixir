#
# orOperation(value)
#

# normal
0x1 || 0x2
0x1 ||| 0x1
:true or :true

# ...with newlines
:true
or
:false

# left associative
# should parse as (0x1 ||| 0x3) ||| 0x2
0x1 ||| 0x3 ||| 0x2

# orOperation(atOperation(value))
# should parse as (@0x1) ||| (@0x2)
@0x1 ||| @0x2

# orOperation(unaryOperation(value))
# should parse as 0x1 ||| (~~~0x1)
0x1 ||| ~~~0x1

# orOperation(hatOperation(value))
# should parse as (0x1 ^^^ 0x2) ||| (0x2 ^^^ 0x1)
0x1 ^^^ 0x2 ||| 0x2 ^^^ 0x1

# orOperation(multiplicationOperation(value))
# should parse as (0x1 * 0x2) ||| (0x2 * 0x1)
0x1 * 0x2 ||| 0x2 * 0x1

# orOperation(additionOperation(value))
# should parse as 0x3 ||| (0x1 + 0x2)
0x3 ||| 0x1 + 0x2

# orOperation(twoOperation(value))
# should parse as (0x1..0x2) ||| (0x3..0x4)
0x1..0x2 ||| 0x3..0x4

# orOperation(arrowOperation(value))
# should parse as ('a' |> 'b') ||| ('c' |> 'd')
'a' |> 'b' ||| 'c' |> 'd'

# orOperation(relationalOperation(value))
# should parse as (0x1 < 0x2) ||| (0x2 > 0x1)
0x1 < 0x2 ||| 0x2 > 0x1

# orOperation(comparisonOperation(value))
# should parse as (0x1 != 0x2) ||| (0x1 == 0x1)
0x1 != 0x2 ||| 0x1 == 0x1

# orOperation(andOperation(value))
# should parse as (0x1 &&& 0x1) || (0x1 &&& 0x2)
0x1 &&& 0x1 || 0x1 &&& 0x2