#
# stabOperation(value)
#

# normal
0x1 -> 0x1

# ...with newlines
0x1
->
0x1

# right associative
# should parse as (0o3 -> (0x3 -> 0b11))
0o3 -> 0x3 -> 0b11

# stabOperation(atOperation(value))
# should parse as (@0x1) -> (@0x2)
@0x1 -> @0x2

# stabOperation(unaryOperation(value))
# should parse as 0x1 -> (~~~0x1)
0x1 -> ~~~0x1

# stabOperation(hatOperation(value))
# should parse as (0x1 ^^^ 0x2) -> (0x2 ^^^ 0x1)
0x1 ^^^ 0x2 -> 0x2 ^^^ 0x1

# stabOperation(multiplicationOperation(value))
# should parse as (0x1 * 0x2) -> (0x2 * 0x1)
0x1 * 0x2 -> 0x2 * 0x1

# stabOperation(additionOperation(value))
# should parse as 0x3 -> (0x1 + 0x2)
0x3 -> 0x1 + 0x2

# stabOperation(twoOperation(value))
# should parse as (0x1..0x2) -> (0x3..0x4)
0x1..0x2 -> 0x3..0x4

# stabOperation(inOperation(identifier))
# should parse as (a in b) -> (c in d)
a in b -> c in d

# stabOperation(arrowOperation(value))
# should parse as ('a' |> 'b') -> ('c' |> 'd')
'a' |> 'b' -> 'c' |> 'd'

# stabOperation(relationalOperation(value))
# should parse as (0x1 < 0x2) -> (0x2 > 0x1)
0x1 < 0x2 -> 0x2 > 0x1

# stabOperation(comparisonOperation(value))
# should parse as (0x1 != 0x2) -> (0x1 == 0x1)
0x1 != 0x2 -> 0x1 == 0x1

# stabOperation(andOperation(value))
# should parse as (0x1 &&& 0x2) -> (0x2 &&& 0x1)
0x1 &&& 0x2 -> 0x2 &&& 0x1

# stabOperation(orOperation(value))
# should parse as (0x1 ||| 0x2) -> (0x2 ||| 0x1)
0x1 ||| 0x2 -> 0x2 ||| 0x1

# stabOperation(matchOperation(value))
# should parse as (0x1 = 0x1) -> (0x2 = 0x2)
0x1 = 0x1 -> 0x2 = 0x2

# stabOperation(associationOperation(value))
# should parse as (0x1 => 0x2) -> (0x3 => 0x4)
0x1 => 0x2 -> 0x3 => 0x4

# stabOperation(pipeOperation(value))
# should parse as (0x1 | 0x2) -> (0x3 | 0x4)
0x1 | 0x2 -> 0x3 | 0x4

# stabOperation(typeOperation(value))
# should parse as (0x1 :: 0x2) -> (0x3 :: 0x4)
0x1 :: 0x2 -> 0x3 :: 0x4

# stabOperation(whenOperation(value))
# should parse as (0x1 when 0x2) -> (0x3 when 0x4)
0x1 when 0x2 -> 0x3 when 0x4

# stabOperation(inMatchOperation(value))
# should parse as (0x1 \\ 0x2) -> (0x3 -> 0x4)
0x1 \\ 0x2 -> 0x3 \\ 0x4

# stabOperation(captureOperation(value))
# should parse as (&:foo) -> (&:bar)
&:foo -> &:bar
