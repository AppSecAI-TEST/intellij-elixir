#
# andOperation(value)
#

# normal
0x1 && 0x2
0x1 &&& 0x1
:true and :true

# ...with newlines
:true
and
:false

# left associative
# should parse as (0x1 &&& 0x3) &&& 0x2
0x1 &&& 0x3 &&& 0x2

# andOperation(unaryOperation(value))
# should parse as 0x1 &&& (~~~0x1)
0x1 &&& ~~~0x1

# andOperation(hatOperation(value))
# should parse as (0x1 ^^^ 0x2) &&& (0x2 ^^^ 0x1)
0x1 ^^^ 0x2 &&& 0x2 ^^^ 0x1

# andOperation(multiplicationOperation(value))
# should parse as (0x1 * 0x2) &&& (0x2 * 0x1)
0x1 * 0x2 &&& 0x2 * 0x1

# andOperation(additionOperation(value))
# should parse as 0x3 &&& (0x1 + 0x2)
0x3 &&& 0x1 + 0x2

# andOperation(twoOperation(value))
# should parse as (0x1..0x2) &&& (0x3..0x4)
0x1..0x2 &&& 0x3..0x4

# andOperation(arrowOperation(value))
# should parse as ('a' |> 'b') &&& ('c' |> 'd')
'a' |> 'b' &&& 'c' |> 'd'

# andOperation(relationalOperation(value))
# should parse as (0x1 < 0x2) &&& (0x2 > 0x1)
0x1 < 0x2 &&& 0x2 > 0x1

# andOperation(ComparisonOperation(value))
# should parse as (0x1 != 0x2) &&& (0x1 == 0x1)
0x1 != 0x2 &&& 0x1 == 0x1
