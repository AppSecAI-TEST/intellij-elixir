/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ATOM_START = 2;
  public static final int BASE_WHOLE_NUMBER_BASE = 4;
  public static final int BINARY_WHOLE_NUMBER = 6;
  public static final int CALL_MAYBE = 8;
  public static final int CALL_OR_KEYWORD_PAIR_MAYBE = 10;
  public static final int CHAR_TOKENIZATION = 12;
  public static final int DECIMAL_EXPONENT = 14;
  public static final int DECIMAL_EXPONENT_SIGN = 16;
  public static final int DECIMAL_FRACTION = 18;
  public static final int DECIMAL_WHOLE_NUMBER = 20;
  public static final int DOT_OPERATION = 22;
  public static final int DUAL_OPERATION = 24;
  public static final int ESCAPE_IN_LITERAL_GROUP = 26;
  public static final int ESCAPE_SEQUENCE = 28;
  public static final int EXTENDED_HEXADECIMAL_ESCAPE_SEQUENCE = 30;
  public static final int GROUP = 32;
  public static final int GROUP_HEREDOC_END = 34;
  public static final int GROUP_HEREDOC_LINE_BODY = 36;
  public static final int GROUP_HEREDOC_LINE_ESCAPED_EOL = 38;
  public static final int GROUP_HEREDOC_LINE_START = 40;
  public static final int GROUP_HEREDOC_START = 42;
  public static final int HEXADECIMAL_ESCAPE_SEQUENCE = 44;
  public static final int HEXADECIMAL_WHOLE_NUMBER = 46;
  public static final int INTERPOLATION = 48;
  public static final int KEYWORD_PAIR_MAYBE = 50;
  public static final int NAMED_SIGIL = 52;
  public static final int OCTAL_WHOLE_NUMBER = 54;
  public static final int REFERENCE_OPERATION = 56;
  public static final int SIGIL = 58;
  public static final int SIGIL_MODIFIERS = 60;
  public static final int UNICODE_ESCAPE_SEQUENCE = 62;
  public static final int UNKNOWN_BASE_WHOLE_NUMBER = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 7, 2]
   * Total runtime size is 22232 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<7)|((ch>>2)&0x7f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\2\21\1\24\1\55\1\56\5\21\2\24\1\57\7\21"+
    "\1\24\1\60\20\21\1\24\1\61\1\21\1\62\40\21\1\63\5\21\1\64\11\21\1\65\1\66"+
    "\1\67\1\70\1\21\1\71\6\21\1\72\2\21\1\73\10\21\123\24\1\74\7\24\1\75\1\76"+
    "\12\24\1\77\24\21\1\24\1\100\u0582\21\1\101\u017f\21");

  /* The ZZ_CMAP_Y table has 8448 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\4\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\4\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\0\1\30\10\0\1\31\2\0\1\32\1"+
    "\31\1\0\5\33\1\34\1\33\1\35\5\36\1\37\2\36\16\40\4\41\1\42\13\40\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\43\1\46\1\51\1\43\1\40\1\46\1\44\1\46\1\47\1\41\2\51"+
    "\1\36\1\43\1\46\4\41\1\42\4\40\1\45\1\46\17\40\1\36\1\50\1\45\1\41\1\35\2"+
    "\40\34\36\1\52\1\53\2\36\1\52\3\0\1\36\1\54\1\0\1\55\4\0\34\56\1\40\1\57\1"+
    "\53\1\60\1\0\1\61\1\34\1\62\1\47\3\33\1\63\2\33\10\36\1\64\1\50\1\51\6\40"+
    "\1\36\1\65\1\45\1\47\14\33\14\36\10\40\1\66\1\56\1\67\15\40\1\43\2\41\1\44"+
    "\30\40\1\70\10\33\1\34\1\71\1\0\1\72\11\36\2\0\1\73\12\56\1\74\1\75\1\74\2"+
    "\0\6\36\1\37\1\0\1\37\7\0\2\56\1\76\1\0\12\36\1\77\7\56\1\100\1\53\1\101\30"+
    "\36\1\102\1\56\1\103\1\56\1\104\1\105\1\106\2\56\1\106\1\107\4\0\1\110\7\36"+
    "\6\56\1\76\1\72\25\36\1\111\2\56\1\112\3\0\2\56\1\106\7\36\1\77\2\56\1\52"+
    "\1\31\1\0\5\36\1\111\1\113\2\56\2\114\1\100\4\0\6\36\1\114\21\0\5\36\1\54"+
    "\12\0\1\115\10\56\15\36\1\111\1\116\4\56\1\114\1\56\2\36\1\111\1\117\2\56"+
    "\1\72\3\36\1\114\1\72\1\36\2\107\5\36\1\120\1\36\1\55\1\53\1\52\1\116\1\56"+
    "\2\103\1\121\1\0\1\115\1\0\1\122\1\111\1\117\2\56\1\52\3\0\1\73\1\72\1\37"+
    "\1\123\1\107\5\36\1\120\1\36\1\120\1\124\1\52\1\105\1\76\1\115\1\103\1\100"+
    "\1\125\1\0\1\72\1\55\1\0\1\117\2\56\1\106\1\126\2\0\1\73\1\72\1\36\2\122\5"+
    "\36\1\120\1\36\1\120\1\72\1\52\1\116\1\56\2\74\1\100\1\54\3\0\1\111\1\117"+
    "\2\56\2\0\1\71\1\0\1\73\1\72\1\36\2\107\5\36\1\120\1\36\1\120\1\72\1\52\1"+
    "\116\1\56\2\103\1\100\1\0\1\117\1\0\1\122\1\111\1\117\2\56\1\71\3\0\1\127"+
    "\1\72\1\37\1\53\1\120\1\52\1\124\1\120\1\123\1\54\1\37\1\53\2\36\1\52\1\117"+
    "\1\76\1\117\1\105\1\100\1\54\1\115\3\0\1\117\2\56\4\0\1\56\1\72\1\36\2\120"+
    "\5\36\1\120\3\36\1\52\1\102\1\56\2\105\1\100\1\0\1\75\1\37\1\0\1\111\1\117"+
    "\2\56\4\0\1\73\1\72\1\36\2\120\5\36\1\120\2\36\1\72\1\52\1\116\1\56\2\105"+
    "\1\100\1\0\1\75\1\0\1\31\1\111\1\117\2\56\1\124\3\0\1\73\1\72\1\36\2\120\11"+
    "\36\1\37\1\102\1\56\2\105\1\121\1\0\1\115\1\0\1\123\1\111\1\117\2\56\2\0\1"+
    "\53\1\36\1\117\1\72\3\36\1\37\1\53\5\36\1\122\2\36\1\71\1\36\1\37\1\130\1"+
    "\115\1\56\1\131\2\56\1\0\1\117\2\56\1\117\3\0\1\72\13\36\1\110\1\56\1\76\1"+
    "\0\1\36\1\77\1\56\1\76\2\56\1\100\11\0\1\124\1\107\1\55\1\71\1\0\1\36\1\72"+
    "\1\36\1\72\1\132\1\53\1\72\1\110\1\56\1\74\1\112\1\36\1\55\1\56\1\100\2\56"+
    "\1\100\1\36\10\0\1\54\5\0\1\100\1\0\2\56\1\100\2\0\1\133\1\125\1\117\2\36"+
    "\1\72\10\36\1\54\1\73\4\56\1\105\1\36\1\114\2\56\1\73\10\56\1\134\1\0\1\130"+
    "\16\0\12\36\1\77\4\56\1\135\2\56\1\100\1\0\1\36\1\111\1\106\1\111\1\116\1"+
    "\104\1\56\1\106\1\114\1\101\2\36\1\111\2\56\1\113\3\56\1\100\11\33\1\63\1"+
    "\0\1\136\12\36\1\37\123\36\1\120\1\52\1\36\1\37\1\120\1\52\12\36\1\120\1\52"+
    "\10\36\1\120\1\52\1\36\1\37\1\120\1\52\3\36\1\37\16\36\1\120\1\52\20\36\1"+
    "\37\1\73\2\0\1\73\1\56\1\100\3\0\4\36\4\0\25\33\1\137\1\36\1\52\1\72\232\36"+
    "\1\107\4\36\1\72\5\36\1\37\1\0\22\36\1\37\1\53\2\36\1\54\1\0\3\36\1\120\1"+
    "\111\1\134\2\0\4\36\1\111\1\134\2\0\4\36\1\111\3\0\3\36\1\120\1\140\3\0\15"+
    "\36\10\56\1\123\1\0\1\126\2\56\1\100\7\0\1\115\1\100\2\56\1\100\1\0\26\36"+
    "\2\0\12\36\1\141\1\0\21\36\1\52\2\0\7\36\1\37\3\56\1\0\3\56\2\0\1\117\2\56"+
    "\7\36\1\52\1\36\1\54\2\0\13\36\1\0\6\36\1\52\1\0\2\56\1\76\11\0\5\36\1\77"+
    "\1\56\1\0\15\36\1\114\1\56\1\76\7\56\1\103\2\56\1\100\1\0\2\56\1\100\2\0\1"+
    "\123\2\0\3\56\1\100\20\0\1\56\1\101\13\36\4\56\1\101\1\36\1\0\2\56\1\100\3"+
    "\0\1\115\2\56\3\0\1\135\7\36\1\114\2\56\1\106\2\56\1\106\12\36\1\111\3\56"+
    "\3\0\11\36\5\56\2\0\2\56\1\100\1\72\2\56\1\106\10\36\1\52\24\0\1\76\5\56\1"+
    "\101\1\110\1\111\1\142\1\100\1\0\60\36\15\56\1\100\1\0\1\56\45\40\1\51\1\36"+
    "\1\42\30\40\2\36\2\33\1\36\1\52\1\33\1\137\2\36\2\33\2\36\2\33\1\36\1\52\1"+
    "\33\1\137\2\36\2\143\2\36\2\33\3\36\1\52\2\36\2\33\2\36\2\33\2\36\2\33\1\36"+
    "\1\120\1\33\1\144\1\53\1\120\1\33\1\145\1\36\1\53\1\33\1\0\2\36\1\33\1\145"+
    "\1\53\1\120\1\33\1\145\12\0\1\146\4\0\1\115\1\134\4\0\1\134\6\0\1\71\2\0\1"+
    "\123\4\0\3\36\1\54\14\0\3\56\1\134\1\125\1\73\2\56\1\134\3\0\1\147\1\150\1"+
    "\151\1\152\1\35\1\136\1\47\1\137\1\0\1\153\1\62\1\152\1\33\1\36\1\52\1\50"+
    "\1\0\1\154\1\52\1\31\4\0\10\36\1\64\1\36\1\54\235\0\13\33\1\34\13\36\1\37"+
    "\1\46\1\155\1\41\1\47\1\40\1\44\1\36\1\50\31\40\1\54\1\150\1\156\1\157\3\0"+
    "\11\36\1\122\1\0\1\71\16\36\1\0\1\123\3\0\1\115\5\36\1\37\2\0\1\36\1\37\1"+
    "\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\10\56"+
    "\1\0\1\72\6\0\1\72\1\36\1\111\1\56\1\72\1\52\1\36\1\54\1\72\24\36\1\37\1\160"+
    "\1\36\1\72\25\36\1\37\1\36\1\0\1\72\11\36\1\52\1\72\26\36\1\37\4\0\6\36\1"+
    "\37\15\0\361\36\1\52\22\0\165\36\1\52\12\0\43\36\1\54\20\0\13\36\1\52\103"+
    "\36\1\54\4\36\2\56\1\106\5\0\13\40\1\161\1\0\2\56\1\162\7\40\1\111\24\36\1"+
    "\100\10\0\1\123\2\36\1\67\3\40\1\42\17\40\2\36\1\41\1\45\2\40\1\163\1\44\1"+
    "\40\1\42\4\40\1\46\1\137\1\33\1\40\17\0\1\123\2\36\2\164\1\77\5\36\1\77\1"+
    "\56\6\0\15\36\3\0\1\106\14\36\4\56\1\134\2\0\2\56\1\100\1\0\4\56\1\106\1\36"+
    "\1\123\1\71\2\56\1\106\6\36\1\111\1\56\1\100\5\36\1\77\3\56\3\0\7\36\1\54"+
    "\1\56\13\36\1\77\3\56\1\134\2\0\1\123\2\56\1\100\1\0\1\36\1\110\2\36\2\56"+
    "\1\106\1\37\12\36\1\114\2\56\1\76\2\0\1\77\2\36\1\100\2\56\1\100\1\0\5\36"+
    "\1\37\1\165\1\106\14\36\1\116\1\104\1\101\1\111\1\141\5\0\1\123\1\52\2\36"+
    "\1\77\1\56\1\53\1\166\2\0\1\72\1\37\1\72\1\37\1\72\1\37\2\0\1\36\1\37\1\36"+
    "\1\37\12\36\1\37\2\36\1\52\2\0\34\36\1\77\1\56\1\76\1\100\2\56\1\100\1\0\151"+
    "\36\3\0\5\36\1\37\1\123\14\36\101\0\133\36\1\52\32\36\1\52\11\0\1\36\1\37"+
    "\2\0\1\123\1\36\1\0\1\167\2\36\1\120\2\36\1\37\1\36\1\55\1\122\1\120\32\36"+
    "\1\52\7\0\1\123\132\36\1\52\4\0\20\36\1\53\15\36\12\0\3\36\1\0\4\56\4\0\4"+
    "\56\1\115\1\134\5\0\1\73\10\0\1\36\1\120\41\36\1\54\4\0\2\56\1\100\1\0\1\70"+
    "\5\33\1\34\1\115\1\72\5\36\1\37\2\0\1\53\25\36\1\37\1\53\1\36\1\53\1\36\1"+
    "\53\1\36\1\53\1\54\10\0\3\36\1\72\5\36\1\37\4\36\1\37\1\122\3\36\1\52\3\36"+
    "\1\52\10\0\36\36\1\37\21\0\15\36\1\54\41\0\1\125\40\0\7\36\1\54\14\36\1\54"+
    "\3\0\1\134\7\0\10\36\4\0\6\36\1\37\1\0\11\36\1\111\1\76\1\0\7\36\1\52\11\36"+
    "\1\0\2\36\1\72\1\52\12\0\12\33\35\36\1\52\2\56\1\100\25\0\12\36\2\0\15\36"+
    "\47\0\115\36\1\37\2\0\5\36\1\52\2\0\2\36\46\0\1\36\1\52\1\120\12\36\1\122"+
    "\1\54\1\107\5\36\1\52\2\0\5\36\1\37\2\0\7\36\1\37\20\0\4\36\1\37\1\52\2\0"+
    "\5\36\1\52\2\0\6\36\1\52\21\0\16\36\1\0\1\53\20\0\1\114\1\75\1\0\1\56\1\36"+
    "\2\72\6\36\1\0\1\76\1\115\10\0\7\36\1\54\7\36\1\54\10\0\2\36\1\72\6\36\1\166"+
    "\6\0\15\36\1\52\2\0\5\36\1\52\2\0\4\36\1\37\3\0\4\36\1\52\33\0\22\36\1\54"+
    "\15\0\14\33\1\34\3\0\14\36\1\37\103\0\1\135\15\36\3\56\1\76\7\0\1\117\2\56"+
    "\3\0\1\115\1\135\13\36\2\56\1\76\5\0\6\36\1\54\1\0\2\56\1\100\1\0\1\135\10"+
    "\36\1\77\3\56\1\105\2\56\4\0\10\36\1\77\1\31\2\0\1\135\13\36\1\77\3\56\1\101"+
    "\1\54\1\117\1\134\2\56\1\121\1\54\10\0\4\36\1\122\6\36\3\56\22\0\1\36\1\37"+
    "\1\120\1\122\3\36\1\122\2\36\1\54\1\0\13\36\1\77\2\56\1\76\1\0\2\56\1\100"+
    "\1\0\1\56\1\72\1\36\2\107\5\36\1\120\1\36\1\120\1\72\1\52\1\116\1\56\2\103"+
    "\1\100\1\54\1\115\1\0\1\72\1\111\1\117\1\56\1\134\1\56\1\134\102\0\14\36\5"+
    "\56\1\122\2\0\2\56\1\100\51\0\13\36\1\77\1\56\1\100\2\56\1\134\5\0\1\36\1"+
    "\100\10\0\14\36\4\56\1\134\1\54\2\0\2\56\1\100\11\0\12\36\1\77\3\56\2\0\2"+
    "\56\1\100\15\0\6\36\1\52\1\73\3\56\1\0\2\56\1\100\131\0\10\33\10\36\2\56\1"+
    "\100\4\0\1\123\160\0\16\36\1\54\101\0\146\36\1\52\31\0\33\36\1\37\4\0\61\36"+
    "\57\0\13\36\1\37\164\0\21\36\1\37\156\0\16\36\1\54\1\0\7\36\1\37\2\56\1\100"+
    "\31\0\7\36\1\52\1\56\1\134\2\0\14\36\1\56\1\76\2\0\1\36\3\0\2\56\1\100\1\0"+
    "\1\123\5\36\1\0\1\72\4\36\134\0\21\36\1\54\2\0\1\114\12\56\1\76\3\0\1\115"+
    "\1\135\3\36\30\0\1\52\177\0\32\36\1\37\1\0\3\36\1\54\2\36\1\54\1\0\2\36\1"+
    "\52\1\75\261\0\1\73\1\100\1\73\1\76\1\0\1\115\1\56\1\76\1\73\1\56\7\0\1\117"+
    "\1\100\44\0\1\117\1\134\156\0\6\33\1\152\6\36\6\33\1\152\1\36\1\120\4\36\6"+
    "\33\1\152\6\36\1\62\1\147\1\170\1\70\1\62\1\33\1\152\1\122\1\72\1\36\1\72"+
    "\2\36\6\33\1\152\6\36\1\63\1\34\1\70\1\33\1\62\1\33\1\171\6\36\1\63\1\34\1"+
    "\33\1\153\1\172\1\33\1\171\6\36\6\33\1\152\6\36\6\33\1\152\6\36\6\33\1\152"+
    "\6\36\6\33\1\152\6\36\6\33\1\152\6\36\6\33\1\152\6\36\1\52\6\33\1\171\5\36"+
    "\1\37\1\36\1\50\5\33\1\34\6\36\1\120\1\36\6\33\1\171\5\36\1\37\1\36\1\50\5"+
    "\33\1\34\6\36\1\120\1\36\6\33\1\171\5\36\1\37\1\36\1\42\1\117\31\56\1\76\1"+
    "\115\14\56\1\134\1\0\1\125\3\0\1\134\4\0\1\115\1\56\1\73\3\56\124\0\61\36"+
    "\1\54\2\0\1\56\1\76\112\0\1\36\1\72\6\36\1\124\1\107\1\72\1\36\1\37\1\36\1"+
    "\132\1\0\1\31\1\123\1\132\1\72\1\124\1\107\2\132\1\124\1\107\1\37\1\36\1\37"+
    "\1\36\1\72\1\55\2\36\1\122\4\36\1\0\2\72\1\122\4\36\121\0\65\36\1\37\12\0"+
    "\215\36\1\54\2\0\67\36\1\52\240\36\1\52\127\0\7\36\1\52\270\0\74\56\4\0");

  /* The ZZ_CMAP_A table has 492 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\54\1\52\1\101\1\55\1\53\2\0\1\54\1\16\1\100\1\57\1\0\1\20\1\11\1\77"+
    "\1\56\1\76\1\35\1\30\1\46\1\25\1\24\1\33\1\62\1\65\6\70\2\50\1\31\1\51\1\3"+
    "\1\17\1\4\1\36\1\32\1\47\1\64\2\47\1\73\1\47\5\72\1\67\2\72\1\75\1\26\1\74"+
    "\1\21\1\61\1\0\1\12\1\63\1\42\1\13\1\7\1\41\1\60\1\6\1\34\2\60\1\43\1\60\1"+
    "\10\1\22\2\60\1\27\1\44\1\23\1\45\1\60\1\5\1\66\2\60\1\1\1\15\1\2\1\14\2\0"+
    "\1\101\4\0\1\37\2\0\1\37\1\0\1\40\7\71\1\0\3\71\10\37\1\0\1\71\1\37\1\71\2"+
    "\37\1\71\1\37\1\71\2\37\1\71\1\37\2\71\1\37\1\71\1\37\1\71\3\37\2\71\1\37"+
    "\1\71\1\37\2\71\1\37\3\71\2\37\3\71\5\37\4\0\3\37\3\0\1\37\1\0\1\37\1\0\4"+
    "\40\1\37\1\0\1\71\3\37\1\0\1\71\2\0\1\71\1\40\1\71\1\0\4\71\1\0\1\71\3\37"+
    "\2\71\1\37\1\0\2\71\1\37\1\0\1\40\2\0\1\71\1\37\1\0\3\71\1\0\1\37\3\0\3\37"+
    "\1\0\5\40\1\0\1\40\1\0\2\40\1\0\3\40\1\0\3\37\3\40\2\0\1\40\3\37\1\0\1\37"+
    "\3\40\2\0\2\40\2\37\2\40\1\0\4\40\3\37\2\0\2\37\1\40\4\37\3\40\1\37\2\0\2"+
    "\40\1\37\1\40\1\37\3\40\3\0\2\40\1\37\2\40\2\0\2\40\1\37\1\0\2\37\2\40\1\37"+
    "\1\0\2\37\1\0\1\37\3\0\1\37\1\0\2\37\2\0\1\40\2\0\1\37\1\40\4\0\1\40\1\37"+
    "\2\0\1\40\1\0\1\40\1\0\1\40\2\0\1\37\1\0\1\37\1\0\1\40\1\0\2\40\3\0\3\40\1"+
    "\37\1\0\1\71\2\0\2\71\2\0\1\37\1\0\2\40\1\37\1\40\1\37\1\0\1\40\2\37\2\0\1"+
    "\71\1\0\2\71\1\0\1\37\1\0\1\71\3\0\2\101\4\0\1\71\4\0\1\71\2\0\1\37\3\71\2"+
    "\37\1\71\1\0\1\71\2\0\1\71\2\37\1\71\2\37\1\71\1\37\1\71\1\37\3\40\1\71\1"+
    "\37\1\0\2\40\1\37\1\71\2\37\3\40\1\0\2\37\2\0\1\71\2\37\1\40\1\37\2\0\1\37"+
    "\1\40\1\37\2\40\2\0\1\37\1\40\1\37\1\0\2\71\1\0\1\71\1\0\2\37\2\0\2\71");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\43\0\1\1\1\2\1\3\2\4\4\5\1\6\2\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\11\2\5\1\14"+
    "\1\15\1\1\1\5\1\15\1\16\1\17\1\20\1\5"+
    "\1\21\1\22\2\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\31\1\32\1\25\1\33\1\34\1\35"+
    "\2\36\1\1\4\37\1\1\7\37\1\1\1\37\1\1"+
    "\1\37\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\0\1\51\1\52\1\0\1\53"+
    "\1\54\1\0\1\55\1\56\1\0\1\57\1\60\1\61"+
    "\1\0\1\62\1\63\1\64\1\0\1\65\1\57\1\66"+
    "\2\67\4\70\1\71\2\70\1\66\1\72\1\73\1\74"+
    "\1\75\1\73\2\70\1\66\1\76\1\66\1\70\1\76"+
    "\1\77\1\100\1\70\1\101\2\70\2\102\1\103\1\104"+
    "\1\105\1\0\1\106\1\107\1\110\1\0\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\0\1\114\2\0\1\117"+
    "\1\120\1\0\1\121\1\0\1\122\1\0\1\123\2\122"+
    "\1\124\1\0\2\1\1\125\1\126\1\127\1\130\1\113"+
    "\1\0\1\131\2\132\1\0\3\133\1\134\1\135\1\0"+
    "\1\136\1\0\1\137\1\30\1\140\1\141\1\142\1\0"+
    "\1\126\1\143\1\144\30\0\1\145\1\146\1\147\1\0"+
    "\1\4\1\150\1\151\2\0\1\152\6\5\1\153\2\5"+
    "\1\154\1\0\1\147\1\155\1\156\1\157\1\156\2\0"+
    "\1\160\1\5\1\161\1\162\1\30\1\0\1\5\1\163"+
    "\1\164\1\165\1\166\2\5\1\24\1\0\1\167\3\0"+
    "\1\37\1\0\1\37\1\0\2\37\2\0\1\37\1\170"+
    "\1\0\1\171\1\172\1\0\1\67\1\173\5\70\1\174"+
    "\2\70\1\175\1\0\1\172\1\176\2\177\1\0\1\200"+
    "\1\70\1\201\1\202\1\70\1\203\2\70\2\0\1\113"+
    "\1\204\1\205\1\0\1\206\2\0\1\207\7\0\1\126"+
    "\1\210\2\0\1\30\1\0\1\126\17\0\1\5\1\211"+
    "\1\5\1\212\1\213\1\153\1\214\1\5\1\11\1\155"+
    "\1\0\1\215\3\5\1\216\2\5\1\217\1\220\1\70"+
    "\1\221\1\70\1\222\1\174\1\223\1\70\1\73\1\176"+
    "\1\224\4\70\1\225\1\113\1\226\2\0\1\227\1\230"+
    "\1\231\1\232\1\0\1\233\1\234\1\5\1\0\1\235"+
    "\3\5\1\236\1\237\1\70\1\240\3\70\1\113\1\241"+
    "\1\0\1\242\1\243\1\5\1\244\1\245\1\246\1\70"+
    "\1\247\1\250\1\113\1\251\1\252\1\253\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u0906\0\u098a\0\u09cc"+
    "\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0f78\0\u0fba"+
    "\0\u0f78\0\u0906\0\u0ffc\0\u103e\0\u0906\0\u1080\0\u10c2\0\u0906"+
    "\0\u0906\0\u1104\0\u1146\0\u0906\0\u1188\0\u11ca\0\u0906\0\u0906"+
    "\0\u0906\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u0906\0\u16b0\0\u0906\0\u0906\0\u0906"+
    "\0\u0906\0\u0906\0\u0906\0\u0906\0\u0906\0\u16f2\0\u1734\0\u1776"+
    "\0\u0906\0\u17b8\0\u0906\0\u0906\0\u17fa\0\u0906\0\u0906\0\u183c"+
    "\0\u0906\0\u187e\0\u18c0\0\u1902\0\u0906\0\u0906\0\u0906\0\u1944"+
    "\0\u187e\0\u1986\0\u0906\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u0906\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\u1ef0\0\u0906\0\u0906\0\u1f32\0\u0906\0\u1f74\0\u1fb6\0\u1ff8"+
    "\0\u203a\0\u207c\0\u0906\0\u0906\0\u20be\0\u0906\0\u0906\0\u0906"+
    "\0\u2100\0\u0906\0\u0906\0\u2142\0\u0906\0\u0906\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u0906\0\u2310\0\u0906\0\u2352"+
    "\0\u0906\0\u2394\0\u23d6\0\u2418\0\u245a\0\u0906\0\u249c\0\u24de"+
    "\0\u2520\0\u0906\0\u2562\0\u0906\0\u25a4\0\u25e6\0\u2628\0\u0906"+
    "\0\u0906\0\u266a\0\u26ac\0\u0906\0\u26ee\0\u2730\0\u0906\0\u2772"+
    "\0\u27b4\0\u27f6\0\u2838\0\u0906\0\u287a\0\u0906\0\u0906\0\u0906"+
    "\0\u28bc\0\u28fe\0\u0906\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68"+
    "\0\u0906\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u0f78\0\u2fb2\0\u2ff4"+
    "\0\u0f78\0\u0f78\0\u0906\0\u0f78\0\u3036\0\u2ff4\0\u3078\0\u0906"+
    "\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u0a50"+
    "\0\u3288\0\u0f78\0\u32ca\0\u330c\0\u0f78\0\u0f78\0\u334e\0\u3390"+
    "\0\u33d2\0\u3414\0\u3456\0\u0f78\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u0906\0\u33d2\0\u0a50\0\u35a0\0\u35e2\0\u0906\0\u3624\0\u0906"+
    "\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u372c\0\u376e\0\u37b0\0\u37f2"+
    "\0\u3834\0\u1290\0\u3876\0\u38b8\0\u1986\0\u38fa\0\u0906\0\u393c"+
    "\0\u393c\0\u0906\0\u0906\0\u397e\0\u0906\0\u39c0\0\u3a02\0\u3a44"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u1a8e\0\u3b4c\0\u0906\0\u3b8e\0\u3bd0"+
    "\0\u0906\0\u3c12\0\u1a8e\0\u3c54\0\u3c96\0\u0906\0\u3cd8\0\u1a8e"+
    "\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u0906\0\u0906\0\u3e64"+
    "\0\u0906\0\u3ea6\0\u3ee8\0\u0906\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0"+
    "\0\u4032\0\u4074\0\u40b6\0\u0906\0\u0906\0\u40f8\0\u413a\0\u0906"+
    "\0\u417c\0\u41be\0\u4200\0\u4242\0\u4242\0\u4284\0\u42c6\0\u4308"+
    "\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u0a50\0\u45de\0\u33d2\0\u0a50\0\u0f78\0\u33d2"+
    "\0\u4620\0\u0f78\0\u0f78\0\u4662\0\u0f78\0\u46a4\0\u0f78\0\u46e6"+
    "\0\u0906\0\u4728\0\u476a\0\u0906\0\u0906\0\u47ac\0\u1a8e\0\u47ee"+
    "\0\u1a8e\0\u0906\0\u1a8e\0\u4830\0\u0906\0\u0906\0\u0906\0\u4872"+
    "\0\u48b4\0\u48f6\0\u4938\0\u0906\0\u497a\0\u0906\0\u49bc\0\u49fe"+
    "\0\u0906\0\u0906\0\u0906\0\u0906\0\u4a40\0\u33d2\0\u0a50\0\u4a82"+
    "\0\u4ac4\0\u0a50\0\u4b06\0\u4b48\0\u4b8a\0\u1a8e\0\u1a8e\0\u4bcc"+
    "\0\u1a8e\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u0906\0\u4d16\0\u0a50"+
    "\0\u0906\0\u4d58\0\u0a50\0\u0a50\0\u1a8e\0\u4d9a\0\u1a8e\0\u1a8e"+
    "\0\u4ddc\0\u0906\0\u0a50\0\u1a8e\0\u0906";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\52"+
    "\1\44\1\103\1\104\3\52\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\2\113\1\114\1\115\2\52\1\116\1\52"+
    "\1\106\1\107\1\52\1\106\1\107\1\44\2\106\1\117"+
    "\1\120\1\121\1\122\1\123\1\0\1\44\1\124\1\44"+
    "\1\125\1\126\4\127\1\130\2\127\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\2\127\1\137\1\140\1\141\1\127"+
    "\1\142\1\143\2\144\1\127\1\144\1\44\1\127\1\44"+
    "\5\127\1\44\1\127\3\44\1\145\1\44\1\0\2\44"+
    "\2\127\1\44\2\127\1\44\2\127\1\44\3\127\3\44"+
    "\2\146\6\0\4\147\1\0\2\147\6\0\1\150\1\147"+
    "\3\0\1\147\4\0\1\147\4\0\5\147\1\0\1\147"+
    "\10\0\1\147\2\0\1\151\1\152\1\0\1\153\1\154"+
    "\2\0\2\147\6\0\5\155\4\156\1\155\2\156\6\155"+
    "\2\156\3\155\1\156\4\155\1\156\4\155\5\156\1\155"+
    "\2\156\2\155\1\157\1\155\1\0\2\155\1\156\1\155"+
    "\1\160\2\156\1\160\3\156\1\155\2\156\5\155\1\0"+
    "\53\161\1\162\1\161\1\0\1\163\16\161\1\163\3\161"+
    "\1\0\53\164\1\165\1\164\1\0\1\163\16\164\1\163"+
    "\3\164\1\0\26\166\1\167\24\166\1\170\1\166\1\0"+
    "\23\166\1\0\5\171\4\172\1\171\2\172\6\171\2\172"+
    "\3\171\1\172\4\171\1\172\4\171\5\172\1\171\1\172"+
    "\1\173\2\171\1\174\1\171\1\0\2\171\1\172\1\175"+
    "\1\173\2\172\1\173\2\172\1\173\1\171\2\172\5\171"+
    "\1\0\25\176\1\177\2\176\1\177\22\176\1\200\1\176"+
    "\1\0\23\176\1\0\5\171\2\172\1\201\1\172\1\171"+
    "\2\172\6\171\2\172\3\171\1\172\4\171\1\172\4\171"+
    "\5\172\1\171\1\172\1\173\2\171\1\174\1\171\1\0"+
    "\2\171\1\172\1\175\1\173\2\172\1\173\2\172\1\173"+
    "\1\171\1\172\1\201\5\171\1\0\5\171\4\172\1\171"+
    "\2\172\6\171\2\172\1\202\2\171\1\172\4\171\1\172"+
    "\4\171\5\172\1\171\1\172\1\173\2\171\1\174\1\171"+
    "\1\0\2\171\1\172\1\175\1\173\2\172\1\173\2\172"+
    "\1\173\1\171\2\172\5\171\1\0\3\203\1\204\1\205"+
    "\1\206\1\207\1\210\1\211\1\212\1\213\1\214\1\215"+
    "\1\216\1\217\1\220\1\221\1\222\1\223\1\224\1\225"+
    "\1\226\1\227\1\230\1\231\1\203\1\232\1\233\1\234"+
    "\1\235\1\203\1\207\1\203\1\236\1\237\3\207\4\203"+
    "\1\111\1\112\2\113\1\203\1\115\2\207\1\203\1\207"+
    "\2\203\1\207\10\203\1\240\1\241\1\0\53\164\1\165"+
    "\2\242\23\164\1\0\52\243\1\244\1\245\1\243\1\0"+
    "\23\243\1\0\45\246\1\247\4\246\1\250\1\251\1\246"+
    "\1\0\10\246\1\252\12\246\1\0\2\44\1\253\4\44"+
    "\1\254\2\44\2\254\25\44\2\254\4\44\2\254\1\44"+
    "\2\0\1\44\1\0\4\44\4\254\2\44\1\254\2\44"+
    "\1\254\5\44\1\0\2\255\1\256\1\255\1\256\10\255"+
    "\1\256\10\255\1\257\4\255\1\256\17\255\1\260\1\255"+
    "\1\0\1\255\1\261\14\255\1\256\1\255\3\256\100\0"+
    "\1\262\1\263\1\0\26\255\1\264\23\255\1\265\1\266"+
    "\1\255\1\0\1\255\1\261\21\255\53\0\1\267\1\270"+
    "\26\0\53\271\1\272\2\273\21\271\1\274\1\275\1\0"+
    "\52\44\1\276\1\277\1\44\1\0\21\44\1\300\1\301"+
    "\1\0\1\171\1\302\5\171\1\303\2\171\2\303\25\171"+
    "\2\303\4\171\2\303\2\171\1\174\1\171\1\0\4\171"+
    "\4\303\2\171\1\303\2\171\1\303\5\171\1\0\5\304"+
    "\2\305\1\306\1\305\1\304\2\306\6\304\2\305\3\304"+
    "\1\305\4\304\1\305\4\304\2\306\3\305\1\304\2\306"+
    "\2\304\1\307\1\304\1\0\2\304\1\305\1\304\4\306"+
    "\2\305\1\306\1\304\1\305\1\306\5\304\1\0\1\44"+
    "\1\45\1\310\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\52\1\44"+
    "\1\103\1\104\3\52\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\2\113\1\114\1\115\2\52\1\116\1\52\1\106"+
    "\1\107\1\52\1\106\1\107\1\44\2\106\1\117\1\120"+
    "\1\121\1\122\1\123\1\0\31\311\1\312\21\311\1\313"+
    "\1\311\1\0\23\311\1\0\1\44\1\314\1\44\1\314"+
    "\11\44\1\314\15\44\1\314\17\44\1\145\1\44\1\0"+
    "\1\314\16\44\1\314\1\44\1\315\1\316\1\0\5\317"+
    "\4\320\1\317\2\320\6\317\2\320\3\317\1\320\4\317"+
    "\1\320\4\317\5\320\1\317\2\320\2\317\1\321\1\317"+
    "\1\0\2\317\1\320\1\317\1\322\2\320\1\322\2\320"+
    "\1\322\1\317\2\320\5\317\27\0\1\323\4\0\1\324"+
    "\16\0\1\111\1\112\2\325\24\0\5\44\4\326\1\44"+
    "\2\326\6\44\2\326\3\44\1\326\4\44\1\326\4\44"+
    "\5\326\1\44\1\326\3\44\1\145\1\44\1\0\2\44"+
    "\1\326\2\44\2\326\1\44\2\326\2\44\2\326\5\44"+
    "\1\0\5\327\4\330\1\327\2\330\6\327\2\330\3\327"+
    "\1\330\4\327\1\330\4\327\5\330\5\327\1\331\1\327"+
    "\1\0\2\327\1\330\2\327\1\330\2\327\1\330\12\327"+
    "\1\0\1\171\1\302\5\171\1\332\2\171\2\332\25\171"+
    "\2\332\4\171\2\332\2\171\1\174\1\171\1\0\4\171"+
    "\4\332\2\171\1\332\2\171\1\332\5\171\1\0\5\333"+
    "\4\334\1\333\2\334\6\333\2\334\3\333\1\334\4\333"+
    "\1\334\4\333\5\334\1\333\2\334\2\333\1\335\1\333"+
    "\1\0\2\333\1\334\1\333\7\334\1\333\2\334\5\333"+
    "\2\0\1\336\1\0\1\337\1\340\1\341\2\0\1\342"+
    "\1\343\1\344\1\0\1\345\1\346\1\347\1\350\1\351"+
    "\1\352\1\353\1\0\1\354\1\355\1\356\1\0\1\357"+
    "\1\360\2\361\1\362\1\361\77\0\1\363\152\0\1\364"+
    "\102\0\1\365\1\366\7\0\1\367\1\370\1\0\1\371"+
    "\5\0\1\372\5\0\1\373\16\0\1\374\1\375\2\374"+
    "\30\0\1\376\12\0\1\371\13\0\1\373\16\0\1\374"+
    "\1\375\2\374\31\0\1\52\1\377\2\52\1\0\2\52"+
    "\2\0\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52"+
    "\1\0\1\u0100\7\52\1\0\2\52\7\0\14\52\13\0"+
    "\4\52\1\0\2\52\2\0\1\u0100\3\0\2\52\3\0"+
    "\1\52\4\0\1\52\1\0\1\u0100\7\52\1\0\2\52"+
    "\7\0\14\52\13\0\3\52\1\u0101\1\0\2\52\2\0"+
    "\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\4\52\1\u0102\2\52\1\0\2\52\7\0\14\52"+
    "\13\0\4\52\1\0\2\52\2\0\1\u0100\3\0\1\u0103"+
    "\1\52\3\0\1\52\4\0\1\u0104\1\0\1\u0100\7\52"+
    "\1\0\2\52\7\0\14\52\17\0\1\u0105\21\0\1\373"+
    "\16\0\1\374\1\375\2\374\31\0\3\52\1\u0106\1\0"+
    "\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52\4\0"+
    "\1\52\1\0\1\u0100\2\52\1\u0107\4\52\1\0\2\52"+
    "\7\0\14\52\13\0\4\52\1\0\2\52\2\0\1\u0100"+
    "\3\0\1\u0108\1\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\7\52\1\0\2\52\7\0\14\52\12\0\1\367"+
    "\7\0\1\u0109\71\0\1\u010a\10\0\1\u010b\15\0\1\373"+
    "\16\0\1\374\1\375\2\374\43\0\1\u010c\13\0\1\373"+
    "\16\0\1\374\1\375\2\374\30\0\1\u010d\7\0\1\u010e"+
    "\2\0\1\u010c\13\0\1\373\16\0\1\374\1\375\2\374"+
    "\25\0\1\u010f\121\0\1\u0110\11\0\1\373\16\0\1\374"+
    "\1\375\2\374\31\0\4\52\1\0\2\52\2\0\1\u0100"+
    "\3\0\2\52\3\0\1\u0111\4\0\1\52\1\0\1\u0100"+
    "\7\52\1\0\2\52\7\0\14\52\13\0\4\52\1\0"+
    "\2\52\2\0\1\u0100\3\0\2\52\3\0\1\u0112\4\0"+
    "\1\52\1\0\1\u0100\7\52\1\0\2\52\7\0\14\52"+
    "\32\0\1\u0113\61\0\1\u0114\20\0\1\366\5\0\1\373"+
    "\16\0\1\374\1\375\2\374\52\0\1\372\23\0\1\u0115"+
    "\1\u0116\33\0\2\52\1\u0117\1\52\1\0\2\52\2\0"+
    "\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\7\52\1\0\2\52\7\0\14\52\36\0\1\366"+
    "\2\0\1\373\16\0\1\374\1\375\2\374\55\0\1\u0118"+
    "\20\0\3\u0119\60\0\1\373\16\0\1\374\1\375\2\374"+
    "\31\0\3\52\1\u011a\1\0\2\52\2\0\1\u0100\3\0"+
    "\2\52\3\0\1\52\4\0\1\52\1\0\1\u0100\7\52"+
    "\1\0\2\52\7\0\14\52\13\0\3\52\1\u011b\1\0"+
    "\1\u011c\1\52\2\0\1\u0100\3\0\2\52\3\0\1\52"+
    "\4\0\1\52\1\0\1\u0100\7\52\1\0\2\52\7\0"+
    "\14\52\13\0\4\52\1\0\1\u011d\1\52\2\0\1\u0100"+
    "\3\0\2\52\3\0\1\52\4\0\1\52\1\0\1\u0100"+
    "\7\52\1\0\2\52\7\0\14\52\13\0\4\106\1\0"+
    "\2\106\2\0\1\u011e\3\0\2\106\3\0\1\106\4\0"+
    "\1\106\1\0\1\u011e\2\0\5\106\1\0\2\106\7\0"+
    "\11\106\1\0\2\106\56\0\1\107\11\0\1\107\2\0"+
    "\1\107\2\0\1\107\63\0\1\111\54\0\1\u011f\2\0"+
    "\1\u011f\23\0\2\113\24\0\52\115\2\0\26\115\5\0"+
    "\4\u0120\1\0\2\u0120\6\0\2\u0120\3\0\1\u0120\4\0"+
    "\1\u0120\4\0\5\u0120\1\0\1\u0120\1\107\7\0\1\u0120"+
    "\1\0\1\107\2\u0120\1\107\2\u0120\1\107\1\0\2\u0120"+
    "\105\0\1\u0121\102\0\1\u0122\3\0\1\144\102\0\1\u0123"+
    "\1\144\7\0\1\u0124\1\u0125\1\0\1\144\5\0\1\144"+
    "\60\0\1\u0125\12\0\1\144\67\0\4\127\1\0\2\127"+
    "\2\0\1\144\3\0\2\127\3\0\1\127\2\0\1\127"+
    "\1\0\1\127\1\0\1\144\7\127\1\0\2\127\7\0"+
    "\14\127\17\0\1\u0126\74\0\1\u0124\7\0\1\u0127\71\0"+
    "\1\144\10\0\1\u0128\103\0\1\u0129\66\0\1\144\7\0"+
    "\1\144\2\0\1\u0129\63\0\1\u012a\121\0\1\u012b\104\0"+
    "\1\u012c\61\0\1\144\20\0\1\144\102\0\1\144\103\0"+
    "\1\144\102\0\1\144\122\0\1\44\34\0\4\156\1\0"+
    "\2\156\6\0\2\156\3\0\1\156\4\0\1\156\4\0"+
    "\5\156\1\0\2\156\7\0\1\156\2\0\2\156\1\0"+
    "\3\156\1\0\2\156\60\0\1\155\111\0\1\160\2\0"+
    "\1\160\66\0\1\161\101\0\1\164\101\0\1\166\34\0"+
    "\4\172\1\0\2\172\6\0\2\172\3\0\1\172\4\0"+
    "\1\172\4\0\5\172\1\0\1\172\10\0\1\172\2\0"+
    "\2\172\1\0\2\172\2\0\2\172\56\0\1\173\11\0"+
    "\1\173\2\0\1\173\2\0\1\173\63\0\1\171\101\0"+
    "\1\176\77\0\1\u012d\11\0\1\u012d\2\0\1\u012d\2\0"+
    "\1\u012d\14\0\1\u012e\1\u012f\7\0\1\u0130\1\u0131\1\0"+
    "\1\u0132\5\0\1\u0133\60\0\1\u0131\12\0\1\u0132\67\0"+
    "\1\207\1\u0134\2\207\1\0\2\207\2\0\1\u0135\3\0"+
    "\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135\7\207"+
    "\1\0\2\207\7\0\14\207\13\0\4\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207"+
    "\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207\13\0"+
    "\3\207\1\u0136\1\0\2\207\2\0\1\u0135\3\0\2\207"+
    "\3\0\1\207\4\0\1\207\1\0\1\u0135\4\207\1\u0137"+
    "\2\207\1\0\2\207\7\0\14\207\13\0\4\207\1\0"+
    "\2\207\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\u0138\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\17\0\1\u0139\75\0\3\207\1\u013a\1\0\2\207\2\0"+
    "\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207\1\0"+
    "\1\u0135\2\207\1\u013b\4\207\1\0\2\207\7\0\14\207"+
    "\13\0\4\207\1\0\2\207\2\0\1\u0135\3\0\1\u013c"+
    "\1\207\3\0\1\207\4\0\1\207\1\0\1\u0135\7\207"+
    "\1\0\2\207\7\0\14\207\12\0\1\u0130\7\0\1\u013d"+
    "\71\0\1\u013e\10\0\1\u013f\103\0\1\u0140\76\0\1\u0141"+
    "\2\0\1\u0140\103\0\1\u0142\65\0\4\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\2\207\3\0\1\u0143\4\0\1\207"+
    "\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207\13\0"+
    "\4\207\1\0\2\207\2\0\1\u0135\3\0\2\207\3\0"+
    "\1\u0144\4\0\1\207\1\0\1\u0135\7\207\1\0\2\207"+
    "\7\0\14\207\32\0\1\u0145\61\0\1\u0146\20\0\1\u012f"+
    "\102\0\1\u0133\23\0\1\u0115\1\u0116\33\0\2\207\1\u0147"+
    "\1\207\1\0\2\207\2\0\1\u0135\3\0\2\207\3\0"+
    "\1\207\4\0\1\207\1\0\1\u0135\7\207\1\0\2\207"+
    "\7\0\14\207\36\0\1\u012f\56\0\3\207\1\u0148\1\0"+
    "\2\207\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\13\0\4\207\1\0\1\u0149\1\207\2\0\1\u0135\3\0"+
    "\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135\7\207"+
    "\1\0\2\207\7\0\14\207\13\0\4\207\1\0\1\u014a"+
    "\1\207\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\105\0\1\u014b\102\0\1\u014c\55\0\2\242\76\0\1\244"+
    "\101\0\1\250\36\0\1\u014d\2\0\2\u014d\25\0\2\u014d"+
    "\4\0\2\u014d\11\0\4\u014d\2\0\1\u014d\2\0\1\u014d"+
    "\10\0\1\u014e\1\0\1\u014e\10\0\1\u014e\15\0\1\u014e"+
    "\16\0\1\u014f\1\u0150\20\0\1\u014e\1\0\3\u014e\53\0"+
    "\1\255\30\0\1\u0151\177\0\1\u0152\102\0\1\u0153\53\0"+
    "\1\u0154\1\u0155\100\0\1\265\101\0\1\267\101\0\1\271"+
    "\103\0\2\273\21\0\1\u0156\1\u0157\100\0\1\u0158\102\0"+
    "\1\u0159\53\0\1\276\126\0\1\u015a\102\0\1\u015b\10\0"+
    "\1\u015c\2\0\2\u015c\25\0\2\u015c\4\0\2\u015c\11\0"+
    "\4\u015c\2\0\1\u015c\2\0\1\u015c\13\0\2\305\1\0"+
    "\1\305\11\0\2\305\3\0\1\305\4\0\1\305\6\0"+
    "\3\305\12\0\1\305\5\0\2\305\2\0\1\305\16\0"+
    "\1\306\2\0\2\306\25\0\2\306\4\0\2\306\11\0"+
    "\4\306\2\0\1\306\2\0\1\306\60\0\1\304\101\0"+
    "\3\u015d\77\0\1\311\126\0\1\u015e\102\0\1\u015f\6\0"+
    "\4\320\1\0\2\320\6\0\2\320\3\0\1\320\4\0"+
    "\1\320\4\0\5\320\1\0\2\320\7\0\1\320\2\0"+
    "\2\320\1\0\2\320\2\0\2\320\60\0\1\317\111\0"+
    "\1\322\2\0\1\322\2\0\1\322\63\0\1\u0160\1\u0161"+
    "\102\0\2\325\76\0\1\327\36\0\1\u0162\2\0\2\u0162"+
    "\25\0\2\u0162\4\0\2\u0162\11\0\4\u0162\2\0\1\u0162"+
    "\2\0\1\u0162\13\0\4\334\1\0\2\334\6\0\2\334"+
    "\3\0\1\334\4\0\1\334\4\0\5\334\1\0\2\334"+
    "\7\0\1\334\1\0\7\334\1\0\2\334\60\0\1\333"+
    "\31\0\1\361\102\0\1\u0163\1\361\7\0\1\u0164\1\u0165"+
    "\1\0\1\361\5\0\1\361\60\0\1\u0165\12\0\1\361"+
    "\70\0\1\u0166\115\0\1\u0167\70\0\1\u0168\100\0\1\u0169"+
    "\75\0\1\u0164\7\0\1\u016a\71\0\1\361\10\0\1\u016b"+
    "\103\0\1\u016c\66\0\1\361\7\0\1\361\2\0\1\u016c"+
    "\63\0\1\336\121\0\1\u016d\107\0\1\361\76\0\1\u016e"+
    "\61\0\1\361\20\0\1\361\102\0\1\361\103\0\1\361"+
    "\102\0\1\361\60\0\1\361\143\0\1\u016f\1\0\2\363"+
    "\55\0\1\u0170\1\0\1\373\16\0\1\374\1\375\2\374"+
    "\27\0\1\u010a\1\u0171\7\0\1\u010a\71\0\1\u010a\26\0"+
    "\1\373\16\0\1\374\1\375\2\374\30\0\1\u010a\147\0"+
    "\1\374\34\0\2\52\1\u0172\1\52\1\0\2\52\2\0"+
    "\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\7\52\1\0\2\52\7\0\14\52\13\0\4\52"+
    "\1\0\1\52\1\u0173\2\0\1\u0100\3\0\2\52\3\0"+
    "\1\52\4\0\1\52\1\0\1\u0100\7\52\1\0\2\52"+
    "\7\0\14\52\13\0\4\52\1\0\2\52\2\0\1\u0100"+
    "\3\0\2\52\3\0\1\52\4\0\1\52\1\0\1\u0100"+
    "\5\52\1\u0174\1\52\1\0\2\52\7\0\14\52\13\0"+
    "\4\52\1\0\2\52\2\0\1\u0100\3\0\1\52\1\u0175"+
    "\3\0\1\52\4\0\1\52\1\0\1\u0100\7\52\1\0"+
    "\2\52\7\0\14\52\13\0\4\52\1\0\2\52\2\0"+
    "\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\4\52\1\u0176\2\52\1\0\2\52\7\0\14\52"+
    "\17\0\1\u0177\21\0\1\373\16\0\1\374\1\375\2\374"+
    "\31\0\4\52\1\0\1\52\1\u0178\2\0\1\u0100\3\0"+
    "\2\52\3\0\1\52\4\0\1\52\1\0\1\u0100\7\52"+
    "\1\0\2\52\7\0\14\52\13\0\4\52\1\0\2\52"+
    "\2\0\1\u0100\3\0\1\52\1\u0179\3\0\1\52\4\0"+
    "\1\52\1\0\1\u0100\7\52\1\0\2\52\7\0\14\52"+
    "\22\0\1\u017a\102\0\1\u017b\15\0\1\373\16\0\1\374"+
    "\1\375\2\374\43\0\1\u010e\13\0\1\373\16\0\1\374"+
    "\1\375\2\374\26\0\1\u017c\120\0\1\u017d\65\0\4\52"+
    "\1\0\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52"+
    "\3\0\1\373\1\52\1\0\1\u0100\7\52\1\0\2\52"+
    "\1\0\1\374\1\375\2\374\2\0\14\52\13\0\4\52"+
    "\1\0\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52"+
    "\4\0\1\52\1\0\1\u0100\6\52\1\u017e\1\0\2\52"+
    "\7\0\14\52\32\0\1\u017f\6\0\1\373\16\0\1\374"+
    "\1\375\2\374\51\0\1\u011f\2\0\1\u011f\123\0\1\u0115"+
    "\34\0\4\52\1\0\2\52\2\0\1\u0100\3\0\2\52"+
    "\3\0\1\52\4\0\1\52\1\0\1\u0100\5\52\1\u0180"+
    "\1\52\1\0\2\52\7\0\14\52\37\0\1\u0181\1\0"+
    "\1\373\16\0\1\374\1\375\2\374\31\0\4\52\1\0"+
    "\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52\4\0"+
    "\1\52\1\0\1\u0100\4\52\1\u0182\2\52\1\0\2\52"+
    "\7\0\14\52\13\0\4\52\1\0\2\52\2\0\1\u0100"+
    "\3\0\1\52\1\u0183\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\7\52\1\0\2\52\7\0\14\52\6\0\1\u0184"+
    "\1\0\1\u0184\2\0\13\u0184\1\0\3\u0184\2\0\2\u0184"+
    "\2\0\1\u0184\1\0\12\u0184\1\0\7\u0184\1\0\16\u0184"+
    "\1\0\4\u0184\77\0\1\u0185\102\0\1\u0185\4\0\1\144"+
    "\1\u0125\7\0\1\144\71\0\1\144\106\0\1\144\104\0"+
    "\1\144\102\0\1\144\103\0\1\144\103\0\1\144\104\0"+
    "\1\144\60\0\1\u013e\10\0\1\u013e\71\0\1\u013e\102\0"+
    "\2\207\1\u0186\1\207\1\0\2\207\2\0\1\u0135\3\0"+
    "\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135\7\207"+
    "\1\0\2\207\7\0\14\207\13\0\4\207\1\0\1\207"+
    "\1\u0187\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\13\0\4\207\1\0\2\207\2\0\1\u0135\3\0\2\207"+
    "\3\0\1\207\4\0\1\207\1\0\1\u0135\5\207\1\u0188"+
    "\1\207\1\0\2\207\7\0\14\207\13\0\4\207\1\0"+
    "\2\207\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\4\207\1\u0189\2\207\1\0\2\207"+
    "\7\0\14\207\17\0\1\u018a\75\0\4\207\1\0\1\207"+
    "\1\u018b\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\13\0\4\207\1\0\2\207\2\0\1\u0135\3\0\1\207"+
    "\1\u018c\3\0\1\207\4\0\1\207\1\0\1\u0135\7\207"+
    "\1\0\2\207\7\0\14\207\22\0\1\u018d\102\0\1\u018e"+
    "\103\0\1\u0141\103\0\1\u018f\65\0\4\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207"+
    "\1\0\1\u0135\6\207\1\u0190\1\0\2\207\7\0\14\207"+
    "\32\0\1\u0135\62\0\4\207\1\0\2\207\2\0\1\u0135"+
    "\3\0\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135"+
    "\5\207\1\u0191\1\207\1\0\2\207\7\0\14\207\13\0"+
    "\4\207\1\0\2\207\2\0\1\u0135\3\0\2\207\3\0"+
    "\1\207\4\0\1\207\1\0\1\u0135\4\207\1\u0192\2\207"+
    "\1\0\2\207\7\0\14\207\13\0\4\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\1\207\1\u0193\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\105\0\1\u0194\102\0\1\u0194\10\0\1\u0195\2\0\2\u0195"+
    "\25\0\2\u0195\4\0\2\u0195\11\0\4\u0195\2\0\1\u0195"+
    "\2\0\1\u0195\60\0\1\u014f\126\0\1\u0196\102\0\1\u0196"+
    "\53\0\1\u0154\126\0\1\u0197\102\0\1\u0198\100\0\1\u0199"+
    "\102\0\1\u0199\100\0\1\u019a\102\0\1\u019a\100\0\1\u019b"+
    "\102\0\1\u019b\53\0\1\u0160\36\0\1\303\2\0\2\303"+
    "\25\0\2\303\4\0\2\303\11\0\4\303\2\0\1\303"+
    "\2\0\1\303\11\0\1\361\1\u0165\7\0\1\361\71\0"+
    "\1\361\104\0\1\362\115\0\1\361\67\0\1\361\103\0"+
    "\1\361\102\0\1\361\102\0\1\361\103\0\1\361\103\0"+
    "\1\361\104\0\1\361\127\0\1\u016f\3\363\76\0\3\u019c"+
    "\31\0\1\u019d\102\0\3\52\1\u019e\1\0\2\52\2\0"+
    "\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\7\52\1\0\2\52\7\0\14\52\13\0\2\52"+
    "\1\u019f\1\52\1\0\2\52\2\0\1\u0100\3\0\2\52"+
    "\3\0\1\52\4\0\1\52\1\0\1\u0100\7\52\1\0"+
    "\2\52\7\0\14\52\13\0\2\52\1\u01a0\1\52\1\0"+
    "\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52\4\0"+
    "\1\52\1\0\1\u0100\7\52\1\0\2\52\7\0\14\52"+
    "\37\0\1\u01a1\1\0\1\373\16\0\1\374\1\375\2\374"+
    "\31\0\2\52\1\u01a2\1\52\1\0\2\52\2\0\1\u0100"+
    "\3\0\2\52\3\0\1\52\4\0\1\52\1\0\1\u0100"+
    "\7\52\1\0\2\52\7\0\14\52\13\0\4\52\1\0"+
    "\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52\4\0"+
    "\1\52\1\0\1\u0100\3\52\1\u01a3\3\52\1\0\2\52"+
    "\7\0\14\52\13\0\4\52\1\0\2\52\2\0\1\u0100"+
    "\3\0\2\52\3\0\1\52\4\0\1\52\1\0\1\u0100"+
    "\5\52\1\u01a4\1\52\1\0\2\52\7\0\14\52\13\0"+
    "\4\52\1\0\2\52\2\0\1\u0100\3\0\2\52\3\0"+
    "\1\52\4\0\1\52\1\0\1\u0100\3\52\1\u01a5\3\52"+
    "\1\0\2\52\7\0\14\52\13\0\3\207\1\u01a6\1\0"+
    "\2\207\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0"+
    "\1\207\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207"+
    "\13\0\2\207\1\u01a7\1\207\1\0\2\207\2\0\1\u0135"+
    "\3\0\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135"+
    "\7\207\1\0\2\207\7\0\14\207\13\0\2\207\1\u01a8"+
    "\1\207\1\0\2\207\2\0\1\u0135\3\0\2\207\3\0"+
    "\1\207\4\0\1\207\1\0\1\u0135\7\207\1\0\2\207"+
    "\7\0\14\207\13\0\2\207\1\u01a9\1\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207"+
    "\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207\13\0"+
    "\4\207\1\0\2\207\2\0\1\u0135\3\0\2\207\3\0"+
    "\1\207\4\0\1\207\1\0\1\u0135\3\207\1\u01aa\3\207"+
    "\1\0\2\207\7\0\14\207\13\0\4\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207"+
    "\1\0\1\u0135\5\207\1\u01ab\1\207\1\0\2\207\7\0"+
    "\14\207\13\0\4\207\1\0\2\207\2\0\1\u0135\3\0"+
    "\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135\3\207"+
    "\1\u01ac\3\207\1\0\2\207\7\0\14\207\15\0\1\u01ad"+
    "\2\0\2\u01ad\25\0\2\u01ad\4\0\2\u01ad\11\0\4\u01ad"+
    "\2\0\1\u01ad\2\0\1\u01ad\105\0\1\u01ae\102\0\1\u01ae"+
    "\32\0\1\u01af\1\0\1\373\16\0\1\374\1\375\2\374"+
    "\31\0\4\52\1\0\2\52\2\0\1\u0100\3\0\2\52"+
    "\3\0\1\u01b0\4\0\1\52\1\0\1\u0100\7\52\1\0"+
    "\2\52\7\0\14\52\60\0\3\u01b1\32\0\4\52\1\0"+
    "\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52\4\0"+
    "\1\52\1\0\1\u0100\6\52\1\u01b2\1\0\2\52\7\0"+
    "\14\52\13\0\2\52\1\u01b3\1\52\1\0\2\52\2\0"+
    "\1\u0100\3\0\2\52\3\0\1\52\4\0\1\52\1\0"+
    "\1\u0100\7\52\1\0\2\52\7\0\14\52\13\0\1\52"+
    "\1\u01b4\2\52\1\0\2\52\2\0\1\u0100\3\0\2\52"+
    "\3\0\1\52\4\0\1\52\1\0\1\u0100\7\52\1\0"+
    "\2\52\7\0\14\52\13\0\4\207\1\0\2\207\2\0"+
    "\1\u0135\3\0\2\207\3\0\1\u01b5\4\0\1\207\1\0"+
    "\1\u0135\7\207\1\0\2\207\7\0\14\207\13\0\4\207"+
    "\1\0\2\207\2\0\1\u0135\3\0\2\207\3\0\1\207"+
    "\4\0\1\207\1\0\1\u0135\6\207\1\u01b6\1\0\2\207"+
    "\7\0\14\207\13\0\2\207\1\u01b7\1\207\1\0\2\207"+
    "\2\0\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207"+
    "\1\0\1\u0135\7\207\1\0\2\207\7\0\14\207\13\0"+
    "\1\207\1\u01b8\2\207\1\0\2\207\2\0\1\u0135\3\0"+
    "\2\207\3\0\1\207\4\0\1\207\1\0\1\u0135\7\207"+
    "\1\0\2\207\7\0\14\207\15\0\1\u01b9\2\0\2\u01b9"+
    "\25\0\2\u01b9\4\0\2\u01b9\11\0\4\u01b9\2\0\1\u01b9"+
    "\2\0\1\u01b9\60\0\3\u01ba\32\0\2\52\1\u01bb\1\52"+
    "\1\0\2\52\2\0\1\u0100\3\0\2\52\3\0\1\52"+
    "\4\0\1\52\1\0\1\u0100\7\52\1\0\2\52\7\0"+
    "\14\52\13\0\2\207\1\u01bc\1\207\1\0\2\207\2\0"+
    "\1\u0135\3\0\2\207\3\0\1\207\4\0\1\207\1\0"+
    "\1\u0135\7\207\1\0\2\207\7\0\14\207\15\0\1\u01bd"+
    "\2\0\2\u01bd\25\0\2\u01bd\4\0\2\u01bd\11\0\4\u01bd"+
    "\2\0\1\u01bd\2\0\1\u01bd\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19998];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\43\0\1\11\1\1\1\11\33\1\1\11\2\1\1\11"+
    "\2\1\2\11\1\0\1\1\1\11\2\1\3\11\22\1"+
    "\1\11\1\0\10\11\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\11\2\1\1\0\3\11"+
    "\1\0\2\1\1\11\15\1\1\11\10\1\2\11\1\1"+
    "\1\11\5\1\2\11\1\0\3\11\1\0\2\11\1\1"+
    "\2\11\1\1\1\0\1\1\2\0\1\1\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\3\1\1\11\1\0\2\1"+
    "\1\11\1\1\1\11\2\1\1\0\2\11\1\1\1\0"+
    "\1\11\2\1\1\11\1\1\1\0\1\1\1\0\1\11"+
    "\1\1\3\11\1\0\1\1\1\11\1\1\2\0\2\1"+
    "\2\0\1\1\2\0\3\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\1\1\0\3\1"+
    "\1\0\2\1\1\11\2\0\2\1\1\11\10\1\1\0"+
    "\5\1\2\0\5\1\1\0\2\1\1\11\4\1\1\11"+
    "\1\0\1\11\3\0\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\1\0\1\11\1\1\1\0\2\11\1\1"+
    "\1\11\7\1\1\0\1\11\2\1\1\11\1\0\3\1"+
    "\1\11\4\1\2\0\1\1\2\11\1\0\1\11\2\0"+
    "\1\11\7\0\2\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\1\3\0\1\1\2\0\2\1\1\0\2\1\2\0"+
    "\12\1\1\0\4\1\1\11\2\1\2\11\4\1\1\11"+
    "\2\1\3\11\4\1\1\11\1\1\1\11\2\0\4\11"+
    "\1\0\3\1\1\0\14\1\1\11\1\0\1\1\1\11"+
    "\10\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 172: break;
          case 2: 
            { // use stack to match up nested OPENING_CURLY and CLOSING_CURLY
                                               pushAndBegin(YYINITIAL);
                                               return ElixirTypes.OPENING_CURLY;
            }
          case 173: break;
          case 3: 
            { // protect from too many "}"
                    if (!stack.empty()) {
                      org.elixir_lang.lexer.StackFrame stackFrame = pop();
                      yybegin(stackFrame.getLastLexicalState());
                    }

                    return ElixirTypes.CLOSING_CURLY;
            }
          case 174: break;
          case 4: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
            }
          case 175: break;
          case 5: 
            { pushAndBegin(CALL_OR_KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IDENTIFIER_TOKEN;
            }
          case 176: break;
          case 6: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
            }
          case 177: break;
          case 7: 
            { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
            }
          case 178: break;
          case 8: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
            }
          case 179: break;
          case 9: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
            }
          case 180: break;
          case 10: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
            }
          case 181: break;
          case 11: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
            }
          case 182: break;
          case 12: 
            { pushAndBegin(DOT_OPERATION);
                                               return ElixirTypes.DOT_OPERATOR;
            }
          case 183: break;
          case 13: 
            { pushAndBegin(DUAL_OPERATION);
                                               return ElixirTypes.DUAL_OPERATOR;
            }
          case 184: break;
          case 14: 
            { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
            }
          case 185: break;
          case 15: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
            }
          case 186: break;
          case 16: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.DIVISION_OPERATOR;
            }
          case 187: break;
          case 17: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
            }
          case 188: break;
          case 18: 
            { pushAndBegin(CHAR_TOKENIZATION);
                                                          return ElixirTypes.CHAR_TOKENIZER;
            }
          case 189: break;
          case 19: 
            { return ElixirTypes.COMMA;
            }
          case 190: break;
          case 20: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ALIAS_TOKEN;
            }
          case 191: break;
          case 21: 
            { pushAndBegin(DECIMAL_WHOLE_NUMBER);
                                               return ElixirTypes.VALID_DECIMAL_DIGITS;
            }
          case 192: break;
          case 22: 
            { return ElixirTypes.SEMICOLON;
            }
          case 193: break;
          case 23: 
            { return ElixirTypes.EOL;
            }
          case 194: break;
          case 24: 
            { return TokenType.WHITE_SPACE;
            }
          case 195: break;
          case 25: 
            { return ElixirTypes.OPENING_PARENTHESIS;
            }
          case 196: break;
          case 26: 
            { return ElixirTypes.COMMENT;
            }
          case 197: break;
          case 27: 
            { return ElixirTypes.CLOSING_BRACKET;
            }
          case 198: break;
          case 28: 
            { return ElixirTypes.OPENING_BRACKET;
            }
          case 199: break;
          case 29: 
            { return ElixirTypes.CLOSING_PARENTHESIS;
            }
          case 200: break;
          case 30: 
            { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
            }
          case 201: break;
          case 31: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
            }
          case 202: break;
          case 32: 
            { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
            }
          case 203: break;
          case 33: 
            { yybegin(UNKNOWN_BASE_WHOLE_NUMBER);
                                             return ElixirTypes.UNKNOWN_WHOLE_NUMBER_BASE;
            }
          case 204: break;
          case 34: 
            { yybegin(OCTAL_WHOLE_NUMBER);
                                             return ElixirTypes.OCTAL_WHOLE_NUMBER_BASE;
            }
          case 205: break;
          case 35: 
            { yybegin(BINARY_WHOLE_NUMBER);
                                             return ElixirTypes.BINARY_WHOLE_NUMBER_BASE;
            }
          case 206: break;
          case 36: 
            { yybegin(BINARY_WHOLE_NUMBER);
                                             return ElixirTypes.OBSOLETE_BINARY_WHOLE_NUMBER_BASE;
            }
          case 207: break;
          case 37: 
            { yybegin(HEXADECIMAL_WHOLE_NUMBER);
                                             return ElixirTypes.HEXADECIMAL_WHOLE_NUMBER_BASE;
            }
          case 208: break;
          case 38: 
            { yybegin(HEXADECIMAL_WHOLE_NUMBER);
                                             return ElixirTypes.OBSOLETE_HEXADECIMAL_WHOLE_NUMBER_BASE;
            }
          case 209: break;
          case 39: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                            handleInState(stackFrame.getLastLexicalState());
            }
          case 210: break;
          case 40: 
            { return ElixirTypes.INVALID_BINARY_DIGITS;
            }
          case 211: break;
          case 41: 
            { return ElixirTypes.VALID_BINARY_DIGITS;
            }
          case 212: break;
          case 42: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                            handleInState(stackFrame.getLastLexicalState());
            }
          case 213: break;
          case 43: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                            handleInState(stackFrame.getLastLexicalState());
                                            // zero-width token
                                            return ElixirTypes.CALL;
            }
          case 214: break;
          case 44: 
            { handleInState(KEYWORD_PAIR_MAYBE);
            }
          case 215: break;
          case 45: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
             yybegin(stackFrame.getLastLexicalState());
             return ElixirTypes.CHAR_LIST_FRAGMENT;
            }
          case 216: break;
          case 46: 
            { yybegin(ESCAPE_SEQUENCE);
             return ElixirTypes.ESCAPE;
            }
          case 217: break;
          case 47: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                             handleInState(stackFrame.getLastLexicalState());
            }
          case 218: break;
          case 48: 
            { return ElixirTypes.INVALID_DECIMAL_DIGITS;
            }
          case 219: break;
          case 49: 
            { return ElixirTypes.VALID_DECIMAL_DIGITS;
            }
          case 220: break;
          case 50: 
            { return ElixirTypes.DECIMAL_SEPARATOR;
            }
          case 221: break;
          case 51: 
            { handleInState(DECIMAL_EXPONENT);
            }
          case 222: break;
          case 52: 
            { yybegin(DECIMAL_EXPONENT);
                    return ElixirTypes.DUAL_OPERATOR;
            }
          case 223: break;
          case 53: 
            { yybegin(DECIMAL_EXPONENT_SIGN);
                    return ElixirTypes.EXPONENT_MARK;
            }
          case 224: break;
          case 54: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                                      handleInState(stackFrame.getLastLexicalState());
            }
          case 225: break;
          case 55: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.RELATIONAL_OPERATOR;
            }
          case 226: break;
          case 56: 
            { yybegin(CALL_OR_KEYWORD_PAIR_MAYBE);
                                                      return ElixirTypes.IDENTIFIER_TOKEN;
            }
          case 227: break;
          case 57: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.CAPTURE_OPERATOR;
            }
          case 228: break;
          case 58: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.PIPE_OPERATOR;
            }
          case 229: break;
          case 59: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.UNARY_OPERATOR;
            }
          case 230: break;
          case 60: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.MATCH_OPERATOR;
            }
          case 231: break;
          case 61: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.STRUCT_OPERATOR;
            }
          case 232: break;
          case 62: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.DUAL_OPERATOR;
            }
          case 233: break;
          case 63: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AT_OPERATOR;
            }
          case 234: break;
          case 64: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.DIVISION_OPERATOR;
            }
          case 235: break;
          case 65: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.MULTIPLICATION_OPERATOR;
            }
          case 236: break;
          case 66: 
            { /* return to CALL_MAYBE so that OPENING_BRACKET or
                                                         OPENING_PARENTHESES after quote can be parsed
                                                         with CALL so parser doesn't think call is no parentheses with
                                                         parenthetical or list argument. */
                                                      yybegin(CALL_MAYBE);
                                                      startQuote(yytext());
                                                      return promoterType();
            }
          case 237: break;
          case 67: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.SIGNIFICANT_WHITE_SPACE;
            }
          case 238: break;
          case 68: 
            { yybegin(GROUP);
          return fragmentType();
            }
          case 239: break;
          case 69: 
            { yybegin(GROUP);
          return ElixirTypes.EOL;
            }
          case 240: break;
          case 70: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                    yybegin(stackFrame.getLastLexicalState());
                                    return ElixirTypes.ESCAPED_CHARACTER_TOKEN;
            }
          case 241: break;
          case 71: 
            { yybegin(UNICODE_ESCAPE_SEQUENCE);
                                    return ElixirTypes.UNICODE_ESCAPE_CHARACTER;
            }
          case 242: break;
          case 72: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                    yybegin(stackFrame.getLastLexicalState());
                                    return ElixirTypes.EOL;
            }
          case 243: break;
          case 73: 
            { yybegin(HEXADECIMAL_ESCAPE_SEQUENCE);
                                    return ElixirTypes.HEXADECIMAL_WHOLE_NUMBER_BASE;
            }
          case 244: break;
          case 74: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                             yybegin(stackFrame.getLastLexicalState());
                             return ElixirTypes.CLOSING_CURLY;
            }
          case 245: break;
          case 75: 
            { return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
            }
          case 246: break;
          case 76: 
            { return fragmentType();
            }
          case 247: break;
          case 77: 
            { if (isTerminator(yytext())) {
                                 if (isSigil()) {
                                   yybegin(SIGIL_MODIFIERS);
                                   return terminatorType();
                                 } else {
                                   org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                   yybegin(stackFrame.getLastLexicalState());
                                   return stackFrame.terminatorType();
                                 }
                               } else {
                                 return fragmentType();
                               }
            }
          case 248: break;
          case 78: 
            { if (isInterpolating()) {
                                 pushAndBegin(ESCAPE_SEQUENCE);
                                 return ElixirTypes.ESCAPE;
                               } else {
                                 yybegin(ESCAPE_IN_LITERAL_GROUP);
                                 return fragmentType();
                               }
            }
          case 249: break;
          case 79: 
            { if (isInterpolating()) {
                       pushAndBegin(ESCAPE_SEQUENCE);
                       return ElixirTypes.ESCAPE;
                     } else {
                       return fragmentType();
                     }
            }
          case 250: break;
          case 80: 
            { yybegin(GROUP_HEREDOC_LINE_START);
                     return ElixirTypes.EOL;
            }
          case 251: break;
          case 81: 
            { /* The EOL after the escape is also needed to end the Heredoc line.  It functions as both, so arbitarily I'm
             choosing the escaped version to be a zero-width token. */
          yypushback(yylength());
          yybegin(GROUP_HEREDOC_LINE_BODY);
          return ElixirTypes.EOL;
            }
          case 252: break;
          case 82: 
            { handleInState(GROUP_HEREDOC_LINE_BODY);
            }
          case 253: break;
          case 83: 
            { yybegin(GROUP_HEREDOC_LINE_BODY);
                                                return ElixirTypes.HEREDOC_LINE_WHITE_SPACE_TOKEN;
            }
          case 254: break;
          case 84: 
            { yybegin(GROUP_HEREDOC_LINE_START);
                               return ElixirTypes.EOL;
            }
          case 255: break;
          case 85: 
            { yybegin(EXTENDED_HEXADECIMAL_ESCAPE_SEQUENCE);
                             return ElixirTypes.OPENING_CURLY;
            }
          case 256: break;
          case 86: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                             yybegin(stackFrame.getLastLexicalState());
                             return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
            }
          case 257: break;
          case 87: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                 handleInState(stackFrame.getLastLexicalState());
            }
          case 258: break;
          case 88: 
            { return ElixirTypes.INVALID_HEXADECIMAL_DIGITS;
            }
          case 259: break;
          case 89: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
            }
          case 260: break;
          case 90: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              handleInState(stackFrame.getLastLexicalState());
            }
          case 261: break;
          case 91: 
            { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
            }
          case 262: break;
          case 92: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           handleInState(stackFrame.getLastLexicalState());
            }
          case 263: break;
          case 93: 
            { return ElixirTypes.INVALID_OCTAL_DIGITS;
            }
          case 264: break;
          case 94: 
            { return ElixirTypes.VALID_OCTAL_DIGITS;
            }
          case 265: break;
          case 95: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                 yybegin(stackFrame.getLastLexicalState());
                                 return ElixirTypes.DIVISION_OPERATOR;
            }
          case 266: break;
          case 96: 
            { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
            }
          case 267: break;
          case 97: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
            }
          case 268: break;
          case 98: 
            { return ElixirTypes.SIGIL_MODIFIER;
            }
          case 269: break;
          case 99: 
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                  handleInState(stackFrame.getLastLexicalState());
            }
          case 270: break;
          case 100: 
            { return ElixirTypes.INVALID_UNKNOWN_BASE_DIGITS;
            }
          case 271: break;
          case 101: 
            { return ElixirTypes.OPENING_BIT;
            }
          case 272: break;
          case 102: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
            }
          case 273: break;
          case 103: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
            }
          case 274: break;
          case 104: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
            }
          case 275: break;
          case 105: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 33;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 34;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { pushAndBegin(REFERENCE_OPERATION);
                                                         return ElixirTypes.IDENTIFIER_TOKEN;
            }
          case 276: break;
          case 106: 
            { return ElixirTypes.CLOSING_BIT;
            }
          case 277: break;
          case 107: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_SYMBOL_OPERATOR;
            }
          case 278: break;
          case 108: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.DO;
            }
          case 279: break;
          case 109: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_SYMBOL_OPERATOR;
            }
          case 280: break;
          case 110: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
            }
          case 281: break;
          case 111: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
            }
          case 282: break;
          case 112: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_WORD_OPERATOR;
            }
          case 283: break;
          case 113: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RANGE_OPERATOR;
            }
          case 284: break;
          case 114: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
            }
          case 285: break;
          case 115: 
            { return ElixirTypes.TYPE_OPERATOR;
            }
          case 286: break;
          case 116: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return ElixirTypes.COLON;
            }
          case 287: break;
          case 117: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
            }
          case 288: break;
          case 118: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FN;
            }
          case 289: break;
          case 119: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { pushAndBegin(BASE_WHOLE_NUMBER_BASE);
                                                          return ElixirTypes.BASE_WHOLE_NUMBER_PREFIX;
            }
          case 290: break;
          case 120: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(DECIMAL_FRACTION);
                                            return ElixirTypes.DECIMAL_MARK;
            }
          case 291: break;
          case 121: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.TWO_OPERATOR;
            }
          case 292: break;
          case 122: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.ARROW_OPERATOR;
            }
          case 293: break;
          case 123: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.IN_MATCH_OPERATOR;
            }
          case 294: break;
          case 124: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AND_SYMBOL_OPERATOR;
            }
          case 295: break;
          case 125: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.DO;
            }
          case 296: break;
          case 126: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.OR_SYMBOL_OPERATOR;
            }
          case 297: break;
          case 127: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.COMPARISON_OPERATOR;
            }
          case 298: break;
          case 128: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.OR_WORD_OPERATOR;
            }
          case 299: break;
          case 129: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.RANGE_OPERATOR;
            }
          case 300: break;
          case 130: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.STAB_OPERATOR;
            }
          case 301: break;
          case 131: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.IN_OPERATOR;
            }
          case 302: break;
          case 132: 
            { CharSequence groupTerminator = yytext().subSequence(1, yytext().length());

                               // manual lookahread pushes terminator back
                               yypushback(groupTerminator.length());

                               /* even literal groups have escape sequences because escaping the terminator is still
                                  allowed */
                               if (isTerminator(groupTerminator) || isInterpolating()) {
                                 // matches interpolating behavior from `{ESCAPE}` rule below
                                 pushAndBegin(ESCAPE_SEQUENCE);
                                 return ElixirTypes.ESCAPE;
                               } else {
                                 // matches non-interpolating behavior from `{ESCAPE}` rule below
                                 yybegin(ESCAPE_IN_LITERAL_GROUP);
                                 return fragmentType();
                               }
            }
          case 303: break;
          case 133: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (isInterpolating()) {
                                 pushAndBegin(ESCAPE_SEQUENCE);
                               } else {
                                 yybegin(ESCAPE_IN_LITERAL_GROUP);
                               }

                               return ElixirTypes.ESCAPE;
            }
          case 304: break;
          case 134: 
            { if (isInterpolating()) {
                           pushAndBegin(INTERPOLATION);
                           return ElixirTypes.INTERPOLATION_START;
                          } else {
                           return fragmentType();
                          }
            }
          case 305: break;
          case 135: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (isInterpolating()) {
                       pushAndBegin(ESCAPE_SEQUENCE);
                       return ElixirTypes.ESCAPE;
                     } else {
                       yybegin(GROUP_HEREDOC_LINE_ESCAPED_EOL);
                       return ElixirTypes.ESCAPE;
                     }
            }
          case 306: break;
          case 136: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              yybegin(stackFrame.getLastLexicalState());
                              return ElixirTypes.KEYWORD_PAIR_COLON;
            }
          case 307: break;
          case 137: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
            }
          case 308: break;
          case 138: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.NOT_OPERATOR;
            }
          case 309: break;
          case 139: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.NIL;
            }
          case 310: break;
          case 140: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_WORD_OPERATOR;
            }
          case 311: break;
          case 141: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.THREE_OPERATOR;
            }
          case 312: break;
          case 142: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
            }
          case 313: break;
          case 143: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return ElixirTypes.SIGNIFICANT_WHITE_SPACE;
            }
          case 314: break;
          case 144: 
            { startQuote(yytext());
                                               return promoterType();
            }
          case 315: break;
          case 145: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.END;
            }
          case 316: break;
          case 146: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.NIL;
            }
          case 317: break;
          case 147: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AND_WORD_OPERATOR;
            }
          case 318: break;
          case 148: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.THREE_OPERATOR;
            }
          case 319: break;
          case 149: 
            { /* Does NOT return to CALL_MAYBE because heredocs aren't valid
                                                         relative identifiers.  This clauses is only here to prevent a
                                                         prefix match on {QUOTE_PROMOTER}. */
                                                      org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                                      handleInState(stackFrame.getLastLexicalState());
            }
          case 320: break;
          case 150: 
            { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
            }
          case 321: break;
          case 151: 
            { handleInState(GROUP_HEREDOC_END);
            }
          case 322: break;
          case 152: 
            { // Similar to GROUP_HEREDOC_END's GROUP_HEREDOC_TERMINATOR rule, but...
                               if (isTerminator(yytext())) {
                                 if (isSigil()) {
                                   yybegin(SIGIL_MODIFIERS);
                                   return terminatorType();
                                 } else {
                                   org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                   yybegin(stackFrame.getLastLexicalState());
                                   return stackFrame.terminatorType();
                                 }
                               } else {
                                 /* ...returns BAD_CHARACTER instead of going to GROUP_HEREDOC_LINE_BODY when the wrong
                                    type of terminator */
                                 return TokenType.BAD_CHARACTER;
                               }
            }
          case 323: break;
          case 153: 
            { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
            }
          case 324: break;
          case 154: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
            }
          case 325: break;
          case 155: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
            }
          case 326: break;
          case 156: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ELSE;
            }
          case 327: break;
          case 157: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TRUE;
            }
          case 328: break;
          case 158: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.WHEN_OPERATOR;
            }
          case 329: break;
          case 159: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.ELSE;
            }
          case 330: break;
          case 160: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.TRUE;
            }
          case 331: break;
          case 161: 
            { String groupHeredocTerminator = yytext().toString().trim();

                                                // manual lookahead pushes terminator back
                                                yypushback(3);

                                                if (isTerminator(groupHeredocTerminator)) {
                                                  yybegin(GROUP_HEREDOC_END);
                                                  return ElixirTypes.HEREDOC_PREFIX_WHITE_SPACE;
                                                } else {
                                                  yybegin(GROUP_HEREDOC_LINE_BODY);
                                                  return ElixirTypes.HEREDOC_LINE_WHITE_SPACE_TOKEN;
                                                }
            }
          case 332: break;
          case 162: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AFTER;
            }
          case 333: break;
          case 163: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
            }
          case 334: break;
          case 164: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FALSE;
            }
          case 335: break;
          case 165: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CATCH;
            }
          case 336: break;
          case 166: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.AFTER;
            }
          case 337: break;
          case 167: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.FALSE;
            }
          case 338: break;
          case 168: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.CATCH;
            }
          case 339: break;
          case 169: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { // Definitely a Keyword pair, but KEYWORD_PAIR_MAYBE state will still work.
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
            }
          case 340: break;
          case 170: 
            { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RESCUE;
            }
          case 341: break;
          case 171: 
            { yybegin(CALL_MAYBE);
                                                      return ElixirTypes.RESCUE;
            }
          case 342: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
