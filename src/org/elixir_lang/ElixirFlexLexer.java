/* The following code was generated by JFlex 1.4.3 on 11/28/14 9:20 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/14 9:20 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int UNKNOWN_BASE_INTEGER = 30;
  public static final int BINARY_INTEGER = 8;
  public static final int GROUP_HEREDOC_END = 12;
  public static final int INTERPOLATION = 20;
  public static final int KEYWORD_PAIR_MAYBE = 22;
  public static final int GROUP_HEREDOC_LINE_START = 16;
  public static final int SIGIL_MODIFIERS = 28;
  public static final int SIGIL = 26;
  public static final int GROUP_HEREDOC_START = 18;
  public static final int GROUP = 10;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 14;
  public static final int NAMED_SIGIL = 24;
  public static final int ATOM_BODY = 2;
  public static final int BASE_INTEGER_BASE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\0\1\50\1\45\22\0\1\47\1\14\1\67"+
    "\1\51\1\0\1\17\1\7\1\66\1\65\1\64\1\34\1\30\1\41"+
    "\1\25\1\24\1\35\1\52\1\55\6\56\2\37\1\31\1\43\1\1"+
    "\1\15\1\2\1\36\1\32\4\42\1\61\1\42\24\53\1\63\1\26"+
    "\1\62\1\16\1\40\1\0\1\10\1\54\1\57\1\11\1\5\1\70"+
    "\1\60\1\4\1\33\2\60\1\71\1\60\1\6\1\22\2\60\1\27"+
    "\1\72\1\23\1\73\1\60\1\3\1\46\2\60\1\20\1\13\1\21"+
    "\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\2\2\4\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\2\3\1\12\1\13"+
    "\1\1\1\13\1\14\1\15\1\3\1\16\1\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\1\1\24\1\25\1\17"+
    "\1\26\1\27\1\30\1\31\2\32\1\3\1\33\1\34"+
    "\1\35\1\33\2\36\3\37\1\36\1\37\1\1\5\36"+
    "\1\1\1\37\2\36\1\1\1\36\1\1\1\36\1\37"+
    "\1\1\1\40\1\41\1\42\1\43\1\44\1\43\1\45"+
    "\1\46\1\47\3\46\1\0\1\50\1\46\4\51\1\52"+
    "\1\1\1\53\3\54\2\55\1\56\1\57\1\60\1\57"+
    "\1\61\1\62\1\61\1\0\1\63\1\64\1\0\1\2"+
    "\1\65\5\3\1\66\1\3\1\0\1\64\1\67\1\70"+
    "\1\71\1\70\2\0\1\72\1\67\1\3\1\63\1\73"+
    "\1\24\1\0\1\74\1\75\1\76\2\77\2\0\1\21"+
    "\3\100\2\0\1\101\1\3\1\0\1\36\3\0\1\36"+
    "\2\0\2\36\2\0\1\36\3\102\1\103\4\0\1\104"+
    "\2\0\1\3\1\105\1\7\1\106\2\66\1\7\1\67"+
    "\1\107\1\110\1\3\1\111\2\77\3\17\1\112\1\3"+
    "\1\0\1\102\1\0\1\113\1\0\1\114\1\115\1\116"+
    "\1\117\1\120\1\77\2\0\1\3\1\0\1\121\2\0"+
    "\1\17\1\122\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u03c0"+
    "\0\u0924\0\u03c0\0\u0960\0\u099c\0\u03c0\0\u09d8\0\u03c0\0\u03c0"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u03c0\0\u03c0\0\u03c0\0\u03c0"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u03c0\0\u0bb8\0\u03c0\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u03c0\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u03c0\0\u10a4\0\u10e0\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u03c0\0\u111c\0\u1158\0\u1194\0\u03c0\0\u03c0\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u03c0\0\u12c0\0\u03c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u03c0\0\u13b0\0\u03c0\0\u03c0\0\u13ec\0\u1428\0\u03c0"+
    "\0\u1464\0\u03c0\0\u03c0\0\u03c0\0\u14a0\0\u03c0\0\u14dc\0\u1518"+
    "\0\u1554\0\u03c0\0\u1590\0\u1590\0\u03c0\0\u03c0\0\u15cc\0\u03c0"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u03c0\0\u1770"+
    "\0\u17ac\0\u03c0\0\u03c0\0\u17e8\0\u1824\0\u03c0\0\u04b0\0\u1860"+
    "\0\u189c\0\u03c0\0\u03c0\0\u18d8\0\u1914\0\u03c0\0\u04b0\0\u03c0"+
    "\0\u1950\0\u198c\0\u19c8\0\u03c0\0\u03c0\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u04b0\0\u1af4\0\u1b30\0\u1b6c\0\u1b6c\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u0f00\0\u1d88"+
    "\0\u03c0\0\u1dc4\0\u1e00\0\u03c0\0\u1e3c\0\u1338\0\u1e78\0\u1eb4"+
    "\0\u03c0\0\u1ef0\0\u1f2c\0\u1f68\0\u04b0\0\u04b0\0\u04b0\0\u03c0"+
    "\0\u04b0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u1fa4\0\u03c0\0\u1fe0"+
    "\0\u201c\0\u2058\0\u1a04\0\u1a40\0\u03c0\0\u2094\0\u10a4\0\u20d0"+
    "\0\u210c\0\u03c0\0\u2148\0\u03c0\0\u03c0\0\u03c0\0\u04b0\0\u04b0"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u03c0\0\u22b0\0\u22ec"+
    "\0\u2328\0\u04b0\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\25\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\21\1\41\1\42\1\43\1\44\1\45\1\25"+
    "\1\46\1\47\1\50\1\51\2\52\1\53\1\54\1\25"+
    "\1\55\1\56\1\57\1\60\1\61\1\25\2\62\1\63"+
    "\1\64\1\56\1\25\2\54\2\25\1\56\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\3\25\3\74\4\75"+
    "\1\74\2\75\2\74\1\76\5\74\2\75\3\74\1\75"+
    "\2\74\2\75\2\74\1\76\2\75\1\74\1\75\2\74"+
    "\1\77\1\75\3\74\10\75\6\74\4\75\1\21\1\100"+
    "\1\101\1\102\2\103\1\104\1\105\1\106\1\103\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\21\1\116"+
    "\1\103\1\117\1\120\1\121\1\103\1\122\1\123\1\124"+
    "\1\125\2\124\2\21\1\103\1\21\1\103\2\21\1\126"+
    "\1\103\4\21\2\103\2\21\3\103\4\21\2\127\4\103"+
    "\3\0\4\130\1\0\2\130\10\0\2\130\3\0\1\130"+
    "\3\0\1\130\6\0\1\130\3\0\1\130\4\0\1\130"+
    "\1\131\2\0\3\130\6\0\4\130\3\132\4\133\1\132"+
    "\2\133\10\132\2\133\3\132\1\133\3\132\1\133\3\132"+
    "\1\133\2\132\1\133\2\132\1\134\1\133\3\132\1\135"+
    "\2\133\1\135\4\133\6\132\4\133\2\136\1\137\10\136"+
    "\1\137\5\136\1\137\4\136\1\140\6\136\1\137\7\136"+
    "\1\141\3\136\1\142\10\136\1\137\1\136\1\137\1\136"+
    "\2\137\4\136\66\0\2\143\4\0\26\136\1\140\15\136"+
    "\1\144\1\145\3\136\1\142\22\136\45\146\1\147\1\146"+
    "\2\150\15\146\2\151\4\146\44\21\1\152\1\153\27\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\25\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\154\1\41\1\42\1\43\1\44\1\45\1\25\1\46"+
    "\1\47\1\50\1\51\2\52\1\53\1\54\1\25\1\55"+
    "\1\56\1\57\1\60\1\61\1\25\2\62\1\63\1\64"+
    "\1\56\1\25\2\54\2\25\1\56\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\3\25\31\155\1\156\13\155"+
    "\1\157\26\155\1\21\1\160\11\21\1\160\4\21\1\160"+
    "\14\21\1\160\6\21\1\0\16\21\1\160\1\21\1\160"+
    "\2\161\7\21\4\162\1\21\2\162\10\21\2\162\3\21"+
    "\1\162\3\21\1\162\6\21\1\162\2\21\1\126\1\162"+
    "\4\21\2\162\2\21\3\162\6\21\4\162\3\163\4\164"+
    "\1\163\2\164\10\163\2\164\3\163\1\164\3\163\1\164"+
    "\11\163\1\165\1\164\5\163\1\164\2\163\2\164\7\163"+
    "\4\164\3\166\4\167\1\166\2\167\10\166\2\167\3\166"+
    "\1\167\3\166\1\167\3\166\1\167\2\166\1\167\2\166"+
    "\1\170\1\167\3\166\10\167\6\166\4\167\75\0\1\171"+
    "\1\172\7\0\1\173\1\174\1\0\1\175\7\0\1\176"+
    "\50\0\1\174\12\0\1\175\61\0\1\25\1\177\2\25"+
    "\1\0\2\25\2\0\1\200\5\0\2\25\3\0\1\25"+
    "\3\0\1\25\2\0\1\200\2\25\1\0\1\25\3\0"+
    "\1\25\3\0\10\25\6\0\4\25\3\0\4\25\1\0"+
    "\2\25\2\0\1\200\5\0\2\25\3\0\1\25\3\0"+
    "\1\25\2\0\1\200\2\25\1\0\1\25\3\0\1\25"+
    "\3\0\10\25\6\0\4\25\3\0\3\25\1\201\1\0"+
    "\2\25\2\0\1\200\5\0\2\25\3\0\1\25\3\0"+
    "\1\25\2\0\1\200\2\25\1\0\1\25\3\0\1\25"+
    "\3\0\10\25\6\0\4\25\3\0\4\25\1\0\2\25"+
    "\2\0\1\200\5\0\1\202\1\25\3\0\1\25\3\0"+
    "\1\203\2\0\1\200\2\25\1\0\1\25\3\0\1\25"+
    "\3\0\10\25\6\0\4\25\7\0\1\204\67\0\3\25"+
    "\1\205\1\0\2\25\2\0\1\200\5\0\2\25\3\0"+
    "\1\25\3\0\1\25\2\0\1\200\2\25\1\0\1\25"+
    "\3\0\1\25\3\0\10\25\6\0\4\25\2\0\1\173"+
    "\7\0\1\206\63\0\1\207\10\0\1\210\75\0\1\211"+
    "\60\0\1\212\7\0\1\213\2\0\1\211\74\0\1\214"+
    "\75\0\1\215\74\0\1\216\55\0\4\25\1\0\2\25"+
    "\2\0\1\200\5\0\2\25\3\0\1\217\3\0\1\25"+
    "\2\0\1\200\2\25\1\0\1\25\3\0\1\25\3\0"+
    "\10\25\6\0\4\25\3\0\4\25\1\0\2\25\2\0"+
    "\1\200\5\0\2\25\3\0\1\220\3\0\1\25\2\0"+
    "\1\200\2\25\1\0\1\25\3\0\1\25\3\0\10\25"+
    "\6\0\4\25\24\0\1\221\51\0\1\222\22\0\1\172"+
    "\74\0\1\176\15\0\1\223\1\224\56\0\1\172\74\0"+
    "\1\225\12\0\2\226\1\0\1\226\27\0\3\25\1\227"+
    "\1\0\2\25\2\0\1\200\5\0\2\25\3\0\1\25"+
    "\3\0\1\25\2\0\1\200\2\25\1\0\1\25\3\0"+
    "\1\25\3\0\10\25\6\0\4\25\26\230\1\231\15\230"+
    "\1\0\27\230\24\0\1\232\12\0\1\54\1\233\11\0"+
    "\1\54\2\0\2\54\20\0\4\56\1\0\2\56\2\0"+
    "\1\234\5\0\2\56\3\0\1\56\3\0\1\56\2\0"+
    "\1\234\2\56\1\0\1\56\3\0\1\56\3\0\10\56"+
    "\6\0\4\56\44\0\1\60\76\0\2\62\23\0\44\63"+
    "\2\0\26\63\3\0\4\235\1\0\2\235\10\0\1\236"+
    "\1\235\1\232\2\0\1\235\3\0\1\235\3\0\1\54"+
    "\1\233\1\0\1\235\3\0\1\237\3\0\1\54\2\235"+
    "\2\54\3\235\6\0\4\235\66\0\1\240\74\0\1\241"+
    "\7\0\3\25\1\242\1\0\1\243\1\25\2\0\1\200"+
    "\5\0\2\25\3\0\1\25\3\0\1\25\2\0\1\200"+
    "\2\25\1\0\1\25\3\0\1\25\3\0\10\25\6\0"+
    "\4\25\3\0\4\75\1\0\2\75\10\0\2\75\3\0"+
    "\1\75\2\0\2\75\3\0\2\75\1\0\1\75\3\0"+
    "\1\75\3\0\10\75\6\0\4\75\44\0\1\74\30\0"+
    "\1\244\1\124\7\0\1\245\1\246\1\0\1\124\7\0"+
    "\1\124\50\0\1\246\12\0\1\124\62\0\1\247\111\0"+
    "\1\250\60\0\1\251\72\0\1\252\67\0\1\245\7\0"+
    "\1\253\63\0\1\124\10\0\1\254\75\0\1\255\60\0"+
    "\1\124\7\0\1\124\2\0\1\255\74\0\1\256\75\0"+
    "\1\257\74\0\1\124\101\0\1\124\70\0\1\260\51\0"+
    "\1\124\22\0\1\124\74\0\1\124\75\0\1\124\74\0"+
    "\1\124\50\0\1\124\131\0\1\21\32\0\4\133\1\0"+
    "\2\133\10\0\2\133\3\0\1\133\3\0\1\133\3\0"+
    "\1\133\2\0\1\133\3\0\1\133\4\0\2\133\1\0"+
    "\4\133\6\0\4\133\44\0\1\132\101\0\1\135\2\0"+
    "\1\135\16\0\45\261\1\262\1\263\25\261\44\0\1\136"+
    "\47\0\1\264\141\0\2\265\50\0\1\144\73\0\1\146"+
    "\76\0\2\266\15\0\2\267\72\0\2\270\50\0\1\152"+
    "\73\0\2\271\1\0\1\271\70\0\1\155\115\0\2\272"+
    "\50\0\1\163\32\0\4\167\1\0\2\167\10\0\2\167"+
    "\3\0\1\167\3\0\1\167\3\0\1\167\2\0\1\167"+
    "\3\0\1\167\3\0\10\167\6\0\4\167\44\0\1\166"+
    "\30\0\1\207\1\273\7\0\1\207\63\0\1\207\74\0"+
    "\2\25\1\274\1\25\1\0\2\25\2\0\1\200\5\0"+
    "\2\25\3\0\1\25\3\0\1\25\2\0\1\200\2\25"+
    "\1\0\1\25\3\0\1\25\3\0\10\25\6\0\4\25"+
    "\3\0\4\25\1\0\1\25\1\275\2\0\1\200\5\0"+
    "\2\25\3\0\1\25\3\0\1\25\2\0\1\200\2\25"+
    "\1\0\1\25\3\0\1\25\3\0\10\25\6\0\4\25"+
    "\3\0\4\25\1\0\2\25\2\0\1\200\5\0\1\25"+
    "\1\276\3\0\1\25\3\0\1\25\2\0\1\200\2\25"+
    "\1\0\1\25\3\0\1\25\3\0\10\25\6\0\4\25"+
    "\3\0\4\25\1\0\2\25\2\0\1\200\5\0\2\25"+
    "\3\0\1\25\3\0\1\25\2\0\1\200\2\25\1\0"+
    "\1\25\3\0\1\25\3\0\10\25\6\0\1\25\1\277"+
    "\2\25\7\0\1\300\67\0\4\25\1\0\1\25\1\301"+
    "\2\0\1\200\5\0\2\25\3\0\1\25\3\0\1\25"+
    "\2\0\1\200\2\25\1\0\1\25\3\0\1\25\3\0"+
    "\10\25\6\0\4\25\12\0\1\302\74\0\1\303\75\0"+
    "\1\213\74\0\1\304\76\0\1\305\55\0\4\25\1\0"+
    "\2\25\2\0\1\200\5\0\2\25\3\0\1\25\3\0"+
    "\1\25\2\0\1\200\2\25\1\0\1\25\3\0\1\25"+
    "\3\0\10\25\6\0\3\25\1\306\24\0\1\200\113\0"+
    "\1\223\60\0\1\307\42\0\45\230\1\310\1\311\25\230"+
    "\37\0\1\312\12\0\1\312\2\0\2\312\54\0\1\54"+
    "\12\0\1\54\2\0\2\54\67\0\1\313\2\0\2\313"+
    "\22\0\1\314\2\0\2\314\25\0\1\314\2\0\1\314"+
    "\7\0\1\314\1\0\4\314\1\0\1\314\6\0\1\314"+
    "\71\0\1\315\74\0\1\315\7\0\4\25\1\0\2\25"+
    "\2\0\1\200\5\0\2\25\3\0\1\25\3\0\1\25"+
    "\2\0\1\200\2\25\1\0\1\25\3\0\1\25\3\0"+
    "\10\25\6\0\1\25\1\316\2\25\1\0\1\124\1\246"+
    "\7\0\1\124\63\0\1\124\76\0\1\317\111\0\1\124"+
    "\57\0\1\124\75\0\1\124\74\0\1\124\74\0\1\124"+
    "\75\0\1\124\74\0\1\124\101\0\1\124\113\0\1\261"+
    "\34\0\1\320\2\0\2\320\6\0\1\321\16\0\1\320"+
    "\2\0\1\320\7\0\1\320\1\0\4\320\1\0\1\320"+
    "\6\0\1\320\71\0\2\322\72\0\2\323\72\0\2\324"+
    "\72\0\2\325\6\0\1\326\74\0\3\25\1\327\1\0"+
    "\2\25\2\0\1\200\5\0\2\25\3\0\1\25\3\0"+
    "\1\25\2\0\1\200\2\25\1\0\1\25\3\0\1\25"+
    "\3\0\10\25\6\0\4\25\3\0\2\25\1\330\1\25"+
    "\1\0\2\25\2\0\1\200\5\0\2\25\3\0\1\25"+
    "\3\0\1\25\2\0\1\200\2\25\1\0\1\25\3\0"+
    "\1\25\3\0\10\25\6\0\4\25\44\0\1\230\34\0"+
    "\1\331\2\0\2\331\6\0\1\332\16\0\1\331\2\0"+
    "\1\331\7\0\1\331\1\0\4\331\1\0\1\331\6\0"+
    "\1\331\10\0\1\333\31\0\1\312\1\232\11\0\1\312"+
    "\2\0\2\312\2\0\1\333\15\0\4\25\1\0\2\25"+
    "\2\0\1\200\5\0\2\25\3\0\1\25\3\0\1\25"+
    "\2\0\1\200\2\25\1\0\1\25\3\0\1\25\3\0"+
    "\10\25\6\0\2\25\1\334\1\25\5\0\1\261\2\0"+
    "\2\261\25\0\1\261\2\0\1\261\7\0\1\261\1\0"+
    "\4\261\1\0\1\261\6\0\1\261\10\0\1\335\2\0"+
    "\2\335\25\0\1\335\2\0\1\335\7\0\1\335\1\0"+
    "\4\335\1\0\1\335\6\0\1\335\71\0\2\336\11\0"+
    "\1\230\2\0\2\230\25\0\1\230\2\0\1\230\7\0"+
    "\1\230\1\0\4\230\1\0\1\230\6\0\1\230\10\0"+
    "\1\337\2\0\2\337\25\0\1\337\2\0\1\337\7\0"+
    "\1\337\1\0\4\337\1\0\1\337\6\0\1\337\30\0"+
    "\1\340\2\0\1\340\6\0\1\341\12\0\1\341\2\0"+
    "\2\341\20\0\2\25\1\342\1\25\1\0\2\25\2\0"+
    "\1\200\5\0\2\25\3\0\1\25\3\0\1\25\2\0"+
    "\1\200\2\25\1\0\1\25\3\0\1\25\3\0\10\25"+
    "\6\0\4\25\5\0\1\343\2\0\2\343\7\0\1\261"+
    "\15\0\1\343\2\0\1\343\7\0\1\343\1\0\4\343"+
    "\1\0\1\343\6\0\1\343\10\0\1\344\2\0\2\344"+
    "\7\0\1\230\15\0\1\344\2\0\1\344\7\0\1\344"+
    "\1\0\4\344\1\0\1\344\6\0\1\344\42\0\1\341"+
    "\12\0\1\341\2\0\2\341\54\0\1\341\1\340\11\0"+
    "\1\341\2\0\2\341\22\0\1\345\2\0\2\345\7\0"+
    "\1\261\15\0\1\345\2\0\1\345\7\0\1\345\1\0"+
    "\4\345\1\0\1\345\6\0\1\345\10\0\1\346\2\0"+
    "\2\346\7\0\1\230\15\0\1\346\2\0\1\346\7\0"+
    "\1\346\1\0\4\346\1\0\1\346\6\0\1\346\10\0"+
    "\1\347\2\0\2\347\7\0\1\261\15\0\1\347\2\0"+
    "\1\347\7\0\1\347\1\0\4\347\1\0\1\347\6\0"+
    "\1\347\10\0\1\350\2\0\2\350\7\0\1\230\15\0"+
    "\1\350\2\0\1\350\7\0\1\350\1\0\4\350\1\0"+
    "\1\350\6\0\1\350\10\0\1\351\2\0\2\351\7\0"+
    "\1\261\15\0\1\351\2\0\1\351\7\0\1\351\1\0"+
    "\4\351\1\0\1\351\6\0\1\351\10\0\1\352\2\0"+
    "\2\352\7\0\1\230\15\0\1\352\2\0\1\352\7\0"+
    "\1\352\1\0\4\352\1\0\1\352\6\0\1\352\10\0"+
    "\1\353\2\0\2\353\7\0\1\261\15\0\1\353\2\0"+
    "\1\353\7\0\1\353\1\0\4\353\1\0\1\353\6\0"+
    "\1\353\10\0\1\354\2\0\2\354\7\0\1\230\15\0"+
    "\1\354\2\0\1\354\7\0\1\354\1\0\4\354\1\0"+
    "\1\354\6\0\1\354\24\0\1\261\73\0\1\230\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\1\11\26\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\11\4\1\4\11\3\1\1\11\1\1\1\11"+
    "\4\1\1\11\20\1\1\11\2\1\4\11\3\1\2\11"+
    "\3\1\1\0\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\2\11\2\1\1\11\1\1\3\11\1\1\1\11\2\1"+
    "\1\0\1\11\1\1\1\0\2\11\1\1\1\11\5\1"+
    "\1\0\1\11\2\1\2\11\2\0\1\11\3\1\2\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\2\0\2\11"+
    "\2\1\2\0\2\1\1\0\1\1\3\0\1\1\2\0"+
    "\2\1\2\0\1\1\1\11\2\1\1\11\4\0\1\11"+
    "\2\0\4\1\1\11\1\1\4\11\1\1\1\11\5\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\11\1\0\3\11"+
    "\3\1\2\0\1\1\1\0\1\11\2\0\2\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return ElixirTypes.NUMBER;
          }
        case 83: break;
        case 33: 
          { yybegin(UNKNOWN_BASE_INTEGER);
                          return ElixirTypes.UNKNOWN_INTEGER_BASE;
          }
        case 84: break;
        case 35: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                            handleInState(stackFrame.getLastLexicalState());
          }
        case 85: break;
        case 62: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
          }
        case 86: break;
        case 63: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 87: break;
        case 8: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
          }
        case 88: break;
        case 55: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_OPERATOR;
          }
        case 89: break;
        case 74: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 90: break;
        case 49: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                  handleInState(stackFrame.getLastLexicalState());
          }
        case 91: break;
        case 31: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 92: break;
        case 30: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 93: break;
        case 60: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 94: break;
        case 75: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 95: break;
        case 29: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 96: break;
        case 82: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FALSE;
          }
        case 97: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 98: break;
        case 76: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 99: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(BASE_INTEGER_BASE);
                                                return ElixirTypes.BASE_INTEGER_PREFIX;
          }
        case 100: break;
        case 34: 
          { yybegin(BINARY_INTEGER);
                          return ElixirTypes.BINARY_INTEGER_BASE;
          }
        case 101: break;
        case 28: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 102: break;
        case 67: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 103: break;
        case 39: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 104: break;
        case 66: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 105: break;
        case 80: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TRUE;
          }
        case 106: break;
        case 77: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 107: break;
        case 20: 
          { return TokenType.WHITE_SPACE;
          }
        case 108: break;
        case 54: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_OPERATOR;
          }
        case 109: break;
        case 36: 
          { return ElixirTypes.INVALID_BINARY_DIGITS;
          }
        case 110: break;
        case 19: 
          { return ElixirTypes.EOL;
          }
        case 111: break;
        case 32: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 112: break;
        case 23: 
          { return ElixirTypes.OPENING_BRACKET;
          }
        case 113: break;
        case 7: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
          }
        case 114: break;
        case 71: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.HAT_OPERATOR;
          }
        case 115: break;
        case 78: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 116: break;
        case 43: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 117: break;
        case 61: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 118: break;
        case 53: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 119: break;
        case 42: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 120: break;
        case 13: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
          }
        case 121: break;
        case 65: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FN;
          }
        case 122: break;
        case 2: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 123: break;
        case 45: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 124: break;
        case 44: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              handleInState(stackFrame.getLastLexicalState());
          }
        case 125: break;
        case 58: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
          }
        case 126: break;
        case 17: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ALIAS;
          }
        case 127: break;
        case 50: 
          { return ElixirTypes.INVALID_UNKNOWN_BASE_DIGITS;
          }
        case 128: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 129: break;
        case 48: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 130: break;
        case 6: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
          }
        case 131: break;
        case 16: 
          { return ElixirTypes.COMMA;
          }
        case 132: break;
        case 22: 
          { return ElixirTypes.CLOSING_BRACKET;
          }
        case 133: break;
        case 9: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
          }
        case 134: break;
        case 51: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
          }
        case 135: break;
        case 18: 
          { return ElixirTypes.SEMICOLON;
          }
        case 136: break;
        case 14: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 137: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 138: break;
        case 38: 
          { return fragmentType();
          }
        case 139: break;
        case 47: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 140: break;
        case 69: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
          }
        case 141: break;
        case 57: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 142: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 143: break;
        case 41: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 144: break;
        case 59: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
          }
        case 145: break;
        case 79: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
          }
        case 146: break;
        case 11: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.DUAL_OPERATOR;
          }
        case 147: break;
        case 40: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 148: break;
        case 70: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.NIL;
          }
        case 149: break;
        case 56: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 150: break;
        case 81: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 72: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
          }
        case 152: break;
        case 37: 
          { return ElixirTypes.VALID_BINARY_DIGITS;
          }
        case 153: break;
        case 26: 
          { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
          }
        case 154: break;
        case 68: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              yybegin(stackFrame.getLastLexicalState());
                              return ElixirTypes.KEYWORD_PAIR_COLON;
          }
        case 155: break;
        case 52: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
          }
        case 156: break;
        case 46: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 157: break;
        case 3: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IDENTIFIER;
          }
        case 158: break;
        case 24: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 159: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 160: break;
        case 21: 
          { return ElixirTypes.COMMENT;
          }
        case 161: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 162: break;
        case 4: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 163: break;
        case 25: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 164: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
