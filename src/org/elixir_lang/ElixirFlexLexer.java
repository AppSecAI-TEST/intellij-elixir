/* The following code was generated by JFlex 1.4.3 on 10/17/14 10:30 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/17/14 10:30 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 22;
  public static final int SIGIL = 20;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 18;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\30\1\0\1\32\1\31\22\0\1\32\1\3\1\43"+
    "\1\33\1\0\1\5\1\10\1\42\1\51\1\52\1\21\1\15\1\0"+
    "\1\16\1\11\1\22\1\34\1\36\6\41\2\25\1\17\1\0\1\1"+
    "\1\4\1\2\1\24\1\23\1\27\1\35\4\27\21\50\1\37\2\50"+
    "\1\51\1\20\1\52\1\14\1\26\1\0\1\45\1\46\4\45\10\44"+
    "\1\40\10\44\1\47\2\44\1\6\1\13\1\7\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\3\2\4\1\5\1\6\1\1"+
    "\2\7\3\5\1\10\1\11\1\12\1\10\5\13\1\1"+
    "\2\13\1\1\4\13\2\1\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\3\16\1\0\2\20\4\21\2\22\1\23"+
    "\2\24\1\25\2\26\1\27\1\30\6\0\1\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\13\1\0\2\31\1\32"+
    "\5\0\2\30\1\7\1\0\1\31\1\33\1\0\1\34"+
    "\1\35\1\0\1\36\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u025a"+
    "\0\u025a\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u025a\0\u0387\0\u03b2\0\u025a\0\u025a\0\u03dd\0\u0408\0\u0433"+
    "\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u025a\0\u025a"+
    "\0\u06b8\0\u025a\0\u025a\0\u025a\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u025a\0\u078f\0\u025a\0\u07ba\0\u07e5\0\u0810\0\u025a\0\u083b"+
    "\0\u025a\0\u025a\0\u0866\0\u025a\0\u025a\0\u0891\0\u025a\0\u08bc"+
    "\0\u08e7\0\u0912\0\u08bc\0\u093d\0\u0968\0\u0993\0\u09be\0\u09be"+
    "\0\u09e9\0\u050a\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u025a"+
    "\0\u0aeb\0\u025a\0\u0b16\0\u07e5\0\u0b41\0\u0b6c\0\u0b97\0\u08e7"+
    "\0\u0912\0\u025a\0\u0bc2\0\u0bed\0\u025a\0\u0c18\0\u025a\0\u025a"+
    "\0\u0c43\0\u025a\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\17\1\20\4\17\1\21\10\17\1\22\1\23\1\24"+
    "\1\25\1\26\5\17\1\27\1\30\21\17\1\20\4\17"+
    "\1\21\10\17\1\31\1\32\1\33\1\25\1\26\5\17"+
    "\1\27\1\30\7\17\3\34\1\35\17\34\1\36\1\35"+
    "\3\36\1\34\1\37\2\34\6\36\2\34\5\36\2\34"+
    "\1\17\1\40\1\41\1\42\1\43\1\44\1\45\1\17"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\3\57\2\17\2\60\1\17\1\61\3\17\1\60"+
    "\1\17\2\60\1\17\2\62\5\60\2\17\2\63\1\64"+
    "\4\63\1\64\3\63\1\64\4\63\1\65\1\63\1\64"+
    "\6\63\1\66\1\63\1\67\6\63\2\64\6\63\1\64"+
    "\42\0\2\70\7\0\20\63\1\65\7\63\1\71\1\72"+
    "\1\63\1\67\17\63\31\73\1\74\1\75\7\73\2\76"+
    "\7\73\30\17\1\77\1\100\30\17\1\101\2\17\1\20"+
    "\4\17\1\21\10\17\1\22\1\23\1\24\1\25\1\26"+
    "\5\17\1\27\1\30\16\17\1\101\2\17\1\20\4\17"+
    "\1\21\10\17\1\31\1\32\1\33\1\25\1\26\5\17"+
    "\1\27\1\30\10\17\1\102\4\17\1\102\4\17\1\102"+
    "\6\17\1\102\5\17\1\0\11\17\2\103\5\17\1\102"+
    "\30\17\1\104\1\17\1\61\3\17\1\104\1\17\2\104"+
    "\3\17\5\104\2\17\31\105\1\106\6\105\1\107\3\105"+
    "\4\107\3\105\103\0\1\22\54\0\1\24\20\0\30\25"+
    "\2\0\21\25\34\0\1\110\1\111\1\110\1\112\1\113"+
    "\1\110\4\0\1\111\1\112\45\0\1\114\53\0\1\115"+
    "\37\0\1\31\52\0\1\31\1\32\1\33\43\0\1\36"+
    "\1\0\3\36\4\0\6\36\2\0\5\36\32\0\1\34"+
    "\23\0\1\116\1\57\1\0\1\57\5\0\1\117\1\120"+
    "\2\0\1\57\36\0\1\120\1\0\1\57\52\0\1\121"+
    "\52\0\1\121\5\0\1\57\46\0\1\122\53\0\1\57"+
    "\53\0\1\123\53\0\1\124\43\0\1\117\7\0\1\125"+
    "\42\0\1\57\10\0\1\126\53\0\1\127\53\0\1\57"+
    "\37\0\1\57\13\0\1\57\53\0\1\57\53\0\1\57"+
    "\62\0\1\17\22\0\30\130\1\0\16\130\1\131\3\130"+
    "\30\0\1\63\30\0\1\132\106\0\2\133\37\0\1\71"+
    "\52\0\1\73\54\0\1\134\7\0\2\135\51\0\2\136"+
    "\37\0\1\77\64\0\2\137\37\0\1\105\56\0\1\110"+
    "\1\0\1\110\2\0\1\110\45\0\1\140\1\0\1\140"+
    "\41\0\1\141\1\0\1\141\4\0\3\141\2\0\1\141"+
    "\3\0\2\141\46\0\1\142\53\0\1\142\10\0\1\57"+
    "\1\120\7\0\1\57\42\0\1\57\54\0\1\57\56\0"+
    "\1\57\53\0\1\57\53\0\1\57\53\0\1\57\53\0"+
    "\1\57\44\0\1\143\16\0\1\144\1\0\1\144\4\0"+
    "\3\144\2\0\1\144\3\0\2\144\46\0\2\145\51\0"+
    "\2\146\51\0\2\147\51\0\2\150\34\0\1\151\1\0"+
    "\1\151\4\0\3\151\2\0\1\151\3\0\2\151\31\0"+
    "\1\130\1\0\1\130\4\0\3\130\2\0\1\130\3\0"+
    "\2\130\46\0\2\152\16\0\1\130\15\0\1\153\1\0"+
    "\1\153\4\0\3\153\2\0\1\153\3\0\2\153\13\0"+
    "\1\130\15\0\1\154\1\0\1\154\4\0\3\154\2\0"+
    "\1\154\3\0\2\154\13\0\1\130\15\0\1\155\1\0"+
    "\1\155\4\0\3\155\2\0\1\155\3\0\2\155\13\0"+
    "\1\130\15\0\1\156\1\0\1\156\4\0\3\156\2\0"+
    "\1\156\3\0\2\156\13\0\1\130\15\0\1\157\1\0"+
    "\1\157\4\0\3\157\2\0\1\157\3\0\2\157\13\0"+
    "\1\130\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3397];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\4\11\6\1\1\11\2\1\2\11\21\1\2\11"+
    "\1\1\3\11\3\1\1\0\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\2\11\1\1\2\11\1\1\1\11\1\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\1\1\11\5\0\2\1\1\11\1\0"+
    "\1\1\1\11\1\0\2\11\1\0\1\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 31: break;
        case 18: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 32: break;
        case 6: 
          { return ElixirTypes.COMMENT;
          }
        case 33: break;
        case 3: 
          { pushAndBegin(ATOM_START);
                                              return ElixirTypes.COLON;
          }
        case 34: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 35: break;
        case 9: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 36: break;
        case 15: 
          { if (isTerminator(yytext())) {
                         org.elixir_lang.lexer.StackFrame stackFrame = pop();
                         yybegin(stackFrame.getLastLexicalState());
                         return stackFrame.terminatorType();
                       } else {
                         return fragmentType();
                       }
          }
        case 37: break;
        case 19: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 38: break;
        case 23: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 39: break;
        case 20: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 40: break;
        case 12: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 41: break;
        case 30: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 42: break;
        case 5: 
          { return TokenType.WHITE_SPACE;
          }
        case 43: break;
        case 8: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 44: break;
        case 25: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 45: break;
        case 26: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 46: break;
        case 10: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 47: break;
        case 2: 
          { pushAndBegin(SIGIL);
                                              return ElixirTypes.TILDE;
          }
        case 48: break;
        case 16: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 49: break;
        case 11: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 50: break;
        case 14: 
          { return fragmentType();
          }
        case 51: break;
        case 4: 
          { return ElixirTypes.EOL;
          }
        case 52: break;
        case 28: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 53: break;
        case 22: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 54: break;
        case 7: 
          { startQuote(yytext());
                                              return promoterType();
          }
        case 55: break;
        case 13: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 56: break;
        case 21: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 57: break;
        case 17: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 58: break;
        case 29: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 59: break;
        case 24: 
          { return ElixirTypes.NUMBER;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
