/* The following code was generated by JFlex 1.4.3 on 11/19/14 8:18 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/19/14 8:18 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 22;
  public static final int SIGIL = 20;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 18;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\42\1\0\1\46\1\43\22\0\1\45\1\14\1\63"+
    "\1\47\1\0\1\17\1\7\1\62\1\61\1\60\1\33\1\30\1\0"+
    "\1\25\1\24\1\34\1\50\1\52\6\54\2\36\1\31\1\41\1\1"+
    "\1\15\1\2\1\35\1\32\4\40\1\57\1\40\24\37\1\64\1\26"+
    "\1\65\1\16\1\53\1\0\1\10\1\51\1\56\1\11\1\5\1\56"+
    "\1\55\1\4\5\55\1\6\1\22\2\55\1\27\1\55\1\23\2\55"+
    "\1\3\1\44\2\55\1\20\1\13\1\21\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\3\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\1\3\1\1\1\12"+
    "\1\1\1\12\1\13\1\14\1\15\1\1\1\16\1\17"+
    "\1\20\1\21\1\1\1\22\1\23\1\16\1\24\1\25"+
    "\2\26\1\27\1\30\1\31\1\27\2\32\3\33\1\32"+
    "\1\33\1\1\5\32\1\1\1\33\2\32\1\1\1\32"+
    "\1\1\1\32\1\1\1\34\1\35\1\36\3\35\1\0"+
    "\1\37\1\35\4\40\1\41\1\1\1\42\2\43\1\44"+
    "\1\45\1\46\1\45\1\0\1\47\1\50\1\0\1\2"+
    "\1\51\1\0\3\3\1\52\1\0\1\3\1\0\1\50"+
    "\1\53\1\54\1\55\1\54\2\0\1\56\1\53\1\47"+
    "\1\57\1\22\1\0\1\60\1\61\2\62\2\0\1\17"+
    "\6\0\1\32\3\0\1\32\2\0\2\32\2\0\1\32"+
    "\3\63\1\64\7\0\1\65\1\3\1\7\1\52\1\66"+
    "\1\52\1\7\1\53\1\67\1\70\1\71\2\62\4\16"+
    "\1\26\1\0\1\63\1\0\1\72\1\0\1\73\1\74"+
    "\1\75\1\76\1\77\1\0\1\62\3\0\1\100\1\0"+
    "\1\101\2\0\1\16\1\0\1\102\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u06f6\0\u072c\0\u0762\0\u0798\0\u0288\0\u0288"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u0288\0\u0288\0\u08a6\0\u08dc"+
    "\0\u0288\0\u0912\0\u0288\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0288"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0288\0\u0d80\0\u0288\0\u0288\0\u0288\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0288\0\u0e8e\0\u0288\0\u0ec4\0\u0efa\0\u0f30\0\u0288"+
    "\0\u0f66\0\u0288\0\u0288\0\u0f9c\0\u0288\0\u0288\0\u0288\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u103e\0\u1116\0\u114c"+
    "\0\u0288\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u10e0\0\u1290"+
    "\0\u12c6\0\u103e\0\u10e0\0\u12fc\0\u1332\0\u103e\0\u1368\0\u139e"+
    "\0\u103e\0\u0288\0\u13d4\0\u140a\0\u0288\0\u0288\0\u1440\0\u1476"+
    "\0\u14ac\0\u0288\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u17a0\0\u17d6\0\u0c06\0\u180c\0\u0288\0\u1842\0\u1878\0\u0288"+
    "\0\u18ae\0\u0efa\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u0288"+
    "\0\u19f2\0\u1368\0\u10e0\0\u0288\0\u1368\0\u10e0\0\u10e0\0\u1a28"+
    "\0\u1a28\0\u0288\0\u1a5e\0\u1a94\0\u1aca\0\u14e2\0\u1518\0\u154e"+
    "\0\u0288\0\u1b00\0\u1b36\0\u1b6c\0\u0288\0\u1ba2\0\u0288\0\u0288"+
    "\0\u1bd8\0\u0288\0\u0360\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u0288\0\u1d1c\0\u0288\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u0288"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\2\21\1\22\1\23\1\24"+
    "\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\15\1\34\1\21\1\35\1\36\1\37\1\21\1\40"+
    "\1\41\1\42\2\43\1\44\1\45\2\46\1\47\1\50"+
    "\1\51\1\21\2\52\1\53\1\54\1\21\1\45\1\21"+
    "\1\45\2\21\1\46\1\55\1\56\1\57\1\60\2\15"+
    "\3\61\4\62\1\61\2\62\2\61\1\63\5\61\2\62"+
    "\3\61\1\62\2\61\1\62\2\61\1\63\3\62\2\61"+
    "\1\64\1\62\3\61\10\62\6\61\1\15\1\65\1\66"+
    "\1\67\2\70\1\71\1\72\1\73\1\70\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\15\1\103\1\70"+
    "\1\104\1\105\1\106\1\70\1\107\1\110\3\111\2\15"+
    "\2\70\2\15\1\112\1\70\4\15\1\70\1\15\1\70"+
    "\1\15\3\70\2\15\2\113\2\15\2\114\1\115\10\114"+
    "\1\115\5\114\1\115\4\114\1\116\5\114\1\115\6\114"+
    "\1\117\3\114\1\120\10\114\1\115\1\114\2\115\1\114"+
    "\1\115\62\0\2\121\2\0\26\114\1\116\13\114\1\122"+
    "\1\123\3\114\1\120\16\114\43\124\1\125\1\124\2\126"+
    "\13\124\2\127\2\124\42\15\1\130\1\131\23\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\21\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\132\1\34"+
    "\1\21\1\35\1\36\1\37\1\21\1\40\1\41\1\42"+
    "\2\43\1\44\1\45\2\46\1\47\1\50\1\51\1\21"+
    "\2\52\1\53\1\54\1\21\1\45\1\21\1\45\2\21"+
    "\1\46\1\55\1\56\1\57\1\60\3\15\1\133\11\15"+
    "\1\133\4\15\1\133\13\15\1\133\5\15\1\0\16\15"+
    "\1\133\2\134\1\133\4\15\4\135\1\15\2\135\10\15"+
    "\2\135\3\15\1\135\7\15\2\135\2\15\1\112\1\135"+
    "\4\15\1\135\3\15\3\135\6\15\3\136\4\137\1\136"+
    "\2\137\10\136\2\137\3\136\1\137\13\136\1\140\1\137"+
    "\4\136\1\137\3\136\2\137\7\136\67\0\1\141\1\142"+
    "\7\0\1\143\1\144\1\0\1\145\7\0\1\146\3\0"+
    "\1\147\36\0\1\144\12\0\1\145\13\0\1\147\37\0"+
    "\1\21\1\150\2\21\1\0\2\21\2\0\1\151\5\0"+
    "\2\21\3\0\1\21\5\0\1\151\3\21\3\0\1\21"+
    "\3\0\10\21\11\0\4\21\1\0\2\21\2\0\1\151"+
    "\5\0\2\21\3\0\1\21\5\0\1\151\3\21\3\0"+
    "\1\21\3\0\10\21\11\0\4\21\1\0\2\21\2\0"+
    "\1\151\5\0\1\152\1\21\3\0\1\21\5\0\1\151"+
    "\3\21\3\0\1\21\3\0\10\21\15\0\1\153\21\0"+
    "\1\154\37\0\3\21\1\155\1\0\2\21\2\0\1\151"+
    "\5\0\2\21\3\0\1\21\5\0\1\151\3\21\3\0"+
    "\1\21\3\0\10\21\10\0\1\143\7\0\1\156\55\0"+
    "\1\157\10\0\1\160\15\0\1\154\51\0\1\161\13\0"+
    "\1\147\36\0\1\162\7\0\1\163\2\0\1\161\13\0"+
    "\1\154\52\0\1\164\12\0\1\147\54\0\1\165\10\0"+
    "\1\154\55\0\1\166\47\0\4\21\1\0\2\21\2\0"+
    "\1\151\5\0\2\21\3\0\1\167\5\0\1\151\3\21"+
    "\3\0\1\21\3\0\10\21\32\0\1\170\43\0\1\171"+
    "\22\0\1\142\3\0\1\154\62\0\1\146\13\0\1\172"+
    "\1\173\52\0\1\142\1\154\65\0\1\174\10\0\2\175"+
    "\1\0\1\175\51\0\1\154\34\0\26\176\1\177\13\176"+
    "\1\0\23\176\24\0\1\200\11\0\1\45\11\0\1\45"+
    "\1\0\1\45\1\201\1\45\14\0\4\46\1\0\2\46"+
    "\2\0\1\202\5\0\2\46\3\0\1\46\5\0\1\202"+
    "\3\46\3\0\1\46\3\0\10\46\50\0\1\50\70\0"+
    "\2\52\17\0\42\53\2\0\22\53\22\0\1\203\1\0"+
    "\1\200\11\0\1\45\5\0\1\204\3\0\1\45\1\205"+
    "\1\45\1\201\1\45\73\0\1\206\66\0\1\207\5\0"+
    "\4\62\1\0\2\62\10\0\2\62\3\0\1\62\2\0"+
    "\1\62\3\0\3\62\3\0\1\62\3\0\10\62\50\0"+
    "\1\61\24\0\1\210\1\111\7\0\1\211\1\212\1\0"+
    "\1\111\7\0\1\111\42\0\1\212\12\0\1\111\54\0"+
    "\1\213\103\0\1\214\52\0\1\215\64\0\1\216\61\0"+
    "\1\211\7\0\1\217\55\0\1\111\10\0\1\220\67\0"+
    "\1\221\52\0\1\111\7\0\1\111\2\0\1\221\66\0"+
    "\1\222\67\0\1\223\66\0\1\111\73\0\1\111\62\0"+
    "\1\224\43\0\1\111\22\0\1\111\66\0\1\111\67\0"+
    "\1\111\66\0\1\111\76\0\1\15\23\0\43\225\1\226"+
    "\1\227\21\225\42\0\1\114\43\0\1\230\127\0\2\231"+
    "\44\0\1\122\65\0\1\124\70\0\2\232\13\0\2\233"+
    "\64\0\2\234\44\0\1\130\105\0\2\235\44\0\1\136"+
    "\24\0\1\157\1\236\7\0\1\157\104\0\1\237\36\0"+
    "\1\157\26\0\1\147\36\0\1\157\114\0\1\147\76\0"+
    "\2\240\1\0\1\240\23\0\2\21\1\241\1\21\1\0"+
    "\2\21\2\0\1\151\5\0\2\21\3\0\1\21\5\0"+
    "\1\151\3\21\3\0\1\21\3\0\10\21\11\0\4\21"+
    "\1\0\2\21\2\0\1\151\5\0\1\21\1\242\3\0"+
    "\1\21\5\0\1\151\3\21\3\0\1\21\3\0\10\21"+
    "\15\0\1\243\21\0\1\147\76\0\2\244\1\0\1\244"+
    "\23\0\4\21\1\0\1\21\1\245\2\0\1\151\5\0"+
    "\2\21\3\0\1\21\5\0\1\151\3\21\3\0\1\21"+
    "\3\0\10\21\20\0\1\246\66\0\1\247\15\0\1\147"+
    "\51\0\1\163\13\0\1\147\52\0\1\250\70\0\1\251"+
    "\47\0\4\21\1\0\2\21\2\0\1\151\5\0\2\21"+
    "\3\0\1\21\1\0\1\147\3\0\1\151\3\21\3\0"+
    "\1\21\3\0\10\21\32\0\1\151\4\0\1\237\76\0"+
    "\1\172\54\0\1\252\34\0\43\176\1\253\1\254\21\176"+
    "\36\0\1\255\11\0\1\255\1\0\1\255\1\0\1\255"+
    "\47\0\1\45\11\0\1\45\1\0\1\45\1\0\1\45"+
    "\61\0\1\256\1\0\1\256\1\0\1\256\16\0\1\257"+
    "\2\0\2\257\24\0\1\257\1\0\1\257\7\0\3\257"+
    "\1\0\1\257\1\0\2\257\56\0\1\260\1\0\1\260"+
    "\75\0\1\261\66\0\1\261\3\0\1\111\1\212\7\0"+
    "\1\111\55\0\1\111\70\0\1\262\103\0\1\111\51\0"+
    "\1\111\67\0\1\111\66\0\1\111\66\0\1\111\67\0"+
    "\1\111\66\0\1\111\73\0\1\111\103\0\1\225\30\0"+
    "\1\263\2\0\2\263\6\0\1\264\15\0\1\263\1\0"+
    "\1\263\7\0\3\263\1\0\1\263\1\0\2\263\70\0"+
    "\2\265\64\0\2\266\64\0\2\267\64\0\2\270\4\0"+
    "\1\271\125\0\2\272\1\0\1\272\23\0\3\21\1\273"+
    "\1\0\2\21\2\0\1\151\5\0\2\21\3\0\1\21"+
    "\5\0\1\151\3\21\3\0\1\21\3\0\10\21\37\0"+
    "\1\274\76\0\1\176\30\0\1\275\2\0\2\275\6\0"+
    "\1\276\15\0\1\275\1\0\1\275\7\0\3\275\1\0"+
    "\1\275\1\0\2\275\13\0\1\277\30\0\1\255\11\0"+
    "\1\255\1\0\1\255\1\200\1\255\2\0\1\277\14\0"+
    "\1\111\64\0\1\225\2\0\2\225\24\0\1\225\1\0"+
    "\1\225\7\0\3\225\1\0\1\225\1\0\2\225\13\0"+
    "\1\300\2\0\2\300\24\0\1\300\1\0\1\300\7\0"+
    "\3\300\1\0\1\300\1\0\2\300\70\0\2\301\33\0"+
    "\1\302\76\0\2\303\1\0\1\303\25\0\1\176\2\0"+
    "\2\176\24\0\1\176\1\0\1\176\7\0\3\176\1\0"+
    "\1\176\1\0\2\176\13\0\1\304\2\0\2\304\24\0"+
    "\1\304\1\0\1\304\7\0\3\304\1\0\1\304\1\0"+
    "\2\304\33\0\1\305\2\0\1\305\5\0\1\306\11\0"+
    "\1\306\1\0\1\306\1\0\1\306\16\0\1\307\2\0"+
    "\2\307\7\0\1\225\14\0\1\307\1\0\1\307\7\0"+
    "\3\307\1\0\1\307\1\0\2\307\50\0\2\310\1\0"+
    "\1\310\25\0\1\311\2\0\2\311\7\0\1\176\14\0"+
    "\1\311\1\0\1\311\7\0\3\311\1\0\1\311\1\0"+
    "\2\311\44\0\1\306\11\0\1\306\1\0\1\306\1\0"+
    "\1\306\47\0\1\306\11\0\1\306\1\0\1\306\1\305"+
    "\1\306\16\0\1\312\2\0\2\312\7\0\1\225\14\0"+
    "\1\312\1\0\1\312\7\0\3\312\1\0\1\312\1\0"+
    "\2\312\13\0\1\313\2\0\2\313\7\0\1\176\14\0"+
    "\1\313\1\0\1\313\7\0\3\313\1\0\1\313\1\0"+
    "\2\313\13\0\1\314\2\0\2\314\7\0\1\225\14\0"+
    "\1\314\1\0\1\314\7\0\3\314\1\0\1\314\1\0"+
    "\2\314\13\0\1\315\2\0\2\315\7\0\1\176\14\0"+
    "\1\315\1\0\1\315\7\0\3\315\1\0\1\315\1\0"+
    "\2\315\13\0\1\316\2\0\2\316\7\0\1\225\14\0"+
    "\1\316\1\0\1\316\7\0\3\316\1\0\1\316\1\0"+
    "\2\316\13\0\1\317\2\0\2\317\7\0\1\176\14\0"+
    "\1\317\1\0\1\317\7\0\3\317\1\0\1\317\1\0"+
    "\2\317\13\0\1\320\2\0\2\320\7\0\1\225\14\0"+
    "\1\320\1\0\1\320\7\0\3\320\1\0\1\320\1\0"+
    "\2\320\13\0\1\321\2\0\2\321\7\0\1\176\14\0"+
    "\1\321\1\0\1\321\7\0\3\321\1\0\1\321\1\0"+
    "\2\321\27\0\1\225\65\0\1\176\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\31\1\2\11\4\1\2\11\2\1\1\11"+
    "\1\1\1\11\4\1\1\11\20\1\1\11\1\1\3\11"+
    "\3\1\1\0\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\2\11\1\1\3\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\5\1"+
    "\2\0\4\1\1\11\1\0\1\1\2\11\1\1\2\0"+
    "\1\11\6\0\1\1\3\0\1\1\2\0\2\1\2\0"+
    "\1\1\1\11\2\1\1\11\7\0\1\11\3\1\1\11"+
    "\5\1\1\11\6\1\1\11\1\0\1\1\1\0\1\11"+
    "\1\0\2\11\1\1\1\11\1\1\1\0\1\1\3\0"+
    "\1\11\1\0\1\11\2\0\1\1\1\0\1\11\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 67: break;
        case 57: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 68: break;
        case 43: 
          { return ElixirTypes.OR_OPERATOR;
          }
        case 69: break;
        case 11: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 70: break;
        case 15: 
          { return ElixirTypes.ALIAS;
          }
        case 71: break;
        case 64: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 45: 
          { return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 73: break;
        case 6: 
          { return ElixirTypes.PIPE_OPERATOR;
          }
        case 74: break;
        case 66: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 75: break;
        case 65: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 76: break;
        case 62: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 77: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 78: break;
        case 53: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 79: break;
        case 31: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 80: break;
        case 18: 
          { return TokenType.WHITE_SPACE;
          }
        case 81: break;
        case 48: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 82: break;
        case 21: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 83: break;
        case 56: 
          { return ElixirTypes.MAP_OPERATOR;
          }
        case 84: break;
        case 7: 
          { return ElixirTypes.UNARY_OPERATOR;
          }
        case 85: break;
        case 51: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 86: break;
        case 29: 
          { return fragmentType();
          }
        case 87: break;
        case 46: 
          { return ElixirTypes.TUPLE_OPERATOR;
          }
        case 88: break;
        case 12: 
          { return ElixirTypes.AT_OPERATOR;
          }
        case 89: break;
        case 17: 
          { return ElixirTypes.EOL;
          }
        case 90: break;
        case 44: 
          { return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 91: break;
        case 26: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 92: break;
        case 40: 
          { return ElixirTypes.ARROW_OPERATOR;
          }
        case 93: break;
        case 61: 
          { return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 94: break;
        case 32: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 95: break;
        case 24: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 96: break;
        case 58: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 97: break;
        case 34: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 98: break;
        case 63: 
          { return ElixirTypes.WHEN_OPERATOR;
          }
        case 99: break;
        case 49: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 100: break;
        case 27: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 101: break;
        case 36: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 102: break;
        case 13: 
          { return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 103: break;
        case 55: 
          { return ElixirTypes.HAT_OPERATOR;
          }
        case 104: break;
        case 4: 
          { return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 105: break;
        case 47: 
          { return ElixirTypes.STAB_OPERATOR;
          }
        case 106: break;
        case 3: 
          { return ElixirTypes.IDENTIFIER;
          }
        case 107: break;
        case 20: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 108: break;
        case 33: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 109: break;
        case 22: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 110: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 111: break;
        case 37: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 112: break;
        case 39: 
          { return ElixirTypes.TWO_OPERATOR;
          }
        case 113: break;
        case 42: 
          { return ElixirTypes.AND_OPERATOR;
          }
        case 114: break;
        case 14: 
          { return ElixirTypes.NUMBER;
          }
        case 115: break;
        case 19: 
          { return ElixirTypes.COMMENT;
          }
        case 116: break;
        case 23: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 117: break;
        case 25: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 118: break;
        case 41: 
          { return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 119: break;
        case 35: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 120: break;
        case 10: 
          { return ElixirTypes.DUAL_OPERATOR;
          }
        case 121: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 122: break;
        case 60: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 123: break;
        case 52: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 124: break;
        case 8: 
          { return ElixirTypes.MATCH_OPERATOR;
          }
        case 125: break;
        case 50: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 126: break;
        case 9: 
          { return ElixirTypes.STRUCT_OPERATOR;
          }
        case 127: break;
        case 38: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 128: break;
        case 2: 
          { return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 129: break;
        case 16: 
          { return ElixirTypes.SEMICOLON;
          }
        case 130: break;
        case 59: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 131: break;
        case 28: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 132: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
