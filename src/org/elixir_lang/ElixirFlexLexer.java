/* The following code was generated by JFlex 1.4.3 on 11/22/14 10:01 AM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/22/14 10:01 AM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 22;
  public static final int SIGIL = 20;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 18;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\43\1\0\1\47\1\44\22\0\1\46\1\14\1\64"+
    "\1\50\1\0\1\17\1\7\1\63\1\62\1\61\1\34\1\30\1\0"+
    "\1\25\1\24\1\35\1\51\1\53\6\55\2\37\1\31\1\42\1\1"+
    "\1\15\1\2\1\36\1\32\4\41\1\60\1\41\24\40\1\65\1\26"+
    "\1\66\1\16\1\54\1\0\1\10\1\52\1\57\1\11\1\5\1\57"+
    "\1\56\1\4\1\33\4\56\1\6\1\22\2\56\1\27\1\56\1\23"+
    "\2\56\1\3\1\45\2\56\1\20\1\13\1\21\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\3\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\1\3\1\12\1\13"+
    "\1\1\1\13\1\14\1\15\1\3\1\16\1\1\1\17"+
    "\1\20\1\21\1\22\1\1\1\23\1\24\1\17\1\25"+
    "\1\26\2\27\1\30\1\31\1\32\1\30\2\33\3\34"+
    "\1\33\1\34\1\1\5\33\1\1\1\34\2\33\1\1"+
    "\1\33\1\1\1\33\1\34\1\1\1\35\1\36\1\37"+
    "\3\36\1\0\1\40\1\36\4\41\1\42\1\1\1\43"+
    "\2\44\1\45\1\46\1\47\1\46\1\0\1\50\1\51"+
    "\1\0\1\2\1\52\1\0\3\3\1\53\1\0\1\3"+
    "\1\0\1\51\1\54\1\55\1\56\1\55\2\0\1\57"+
    "\1\54\1\50\1\60\1\23\1\0\1\61\1\62\1\63"+
    "\2\64\2\0\1\20\6\0\1\33\3\0\1\33\2\0"+
    "\2\33\2\0\1\33\3\65\1\66\7\0\1\67\1\3"+
    "\1\7\1\53\1\70\1\53\1\7\1\54\1\71\1\72"+
    "\1\73\2\64\4\17\1\27\1\0\1\65\1\0\1\74"+
    "\1\0\1\75\1\76\1\77\1\100\1\101\1\0\1\64"+
    "\3\0\1\102\1\0\1\103\2\0\1\17\1\0\1\104"+
    "\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0717\0\u0785\0\u07bc\0\u07f3\0\u0294"+
    "\0\u0294\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0294\0\u0294\0\u0906"+
    "\0\u093d\0\u0294\0\u0974\0\u0294\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0294\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0294\0\u0df7\0\u0e2e\0\u0294\0\u0294\0\u0294\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0294\0\u0f41\0\u0294\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u0294\0\u101d\0\u0294\0\u0294\0\u1054\0\u0294\0\u0294"+
    "\0\u0294\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u10f9"+
    "\0\u11d5\0\u120c\0\u0294\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u119e\0\u1356\0\u138d\0\u10f9\0\u119e\0\u13c4\0\u13fb\0\u10f9"+
    "\0\u1432\0\u1469\0\u10f9\0\u0294\0\u14a0\0\u14d7\0\u0294\0\u0370"+
    "\0\u0294\0\u150e\0\u1545\0\u157c\0\u0294\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u0c76\0\u18ec\0\u0294"+
    "\0\u1923\0\u195a\0\u0294\0\u1991\0\u0faf\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u0294\0\u1adb\0\u1432\0\u119e\0\u0294\0\u1432"+
    "\0\u119e\0\u119e\0\u1b12\0\u1b12\0\u0294\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u15b3\0\u15ea\0\u1621\0\u0294\0\u0df7\0\u1bee\0\u1c25\0\u0294"+
    "\0\u1c5c\0\u0294\0\u0294\0\u1c93\0\u0294\0\u0370\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u0294\0\u1ddd\0\u0294\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u0294\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\u20a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\2\21\1\22\1\23\1\24"+
    "\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\15\1\34\1\21\1\35\1\36\1\37\1\21\1\40"+
    "\1\41\1\42\1\43\2\44\1\45\1\46\2\47\1\50"+
    "\1\51\1\52\1\21\2\53\1\54\1\55\1\21\1\46"+
    "\1\21\1\46\2\21\1\47\1\56\1\57\1\60\1\61"+
    "\2\15\3\62\4\63\1\62\2\63\2\62\1\64\5\62"+
    "\2\63\3\62\1\63\2\62\2\63\2\62\1\64\3\63"+
    "\2\62\1\65\1\63\3\62\10\63\6\62\1\15\1\66"+
    "\1\67\1\70\2\71\1\72\1\73\1\74\1\71\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\15\1\104"+
    "\1\71\1\105\1\106\1\107\1\71\1\110\1\111\1\112"+
    "\1\113\2\112\2\15\2\71\2\15\1\114\1\71\4\15"+
    "\1\71\1\15\1\71\1\15\3\71\2\15\2\115\2\15"+
    "\2\116\1\117\10\116\1\117\5\116\1\117\4\116\1\120"+
    "\6\116\1\117\6\116\1\121\3\116\1\122\10\116\1\117"+
    "\1\116\2\117\1\116\1\117\63\0\2\123\2\0\26\116"+
    "\1\120\14\116\1\124\1\125\3\116\1\122\16\116\44\126"+
    "\1\127\1\126\2\130\13\126\2\131\2\126\43\15\1\132"+
    "\1\133\23\15\1\16\1\17\1\20\2\21\1\22\1\23"+
    "\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\134\1\34\1\21\1\35\1\36\1\37\1\21"+
    "\1\40\1\41\1\42\1\43\2\44\1\45\1\46\2\47"+
    "\1\50\1\51\1\52\1\21\2\53\1\54\1\55\1\21"+
    "\1\46\1\21\1\46\2\21\1\47\1\56\1\57\1\60"+
    "\1\61\3\15\1\135\11\15\1\135\4\15\1\135\14\15"+
    "\1\135\5\15\1\0\16\15\1\135\2\136\1\135\4\15"+
    "\4\137\1\15\2\137\10\15\2\137\3\15\1\137\3\15"+
    "\1\137\4\15\2\137\2\15\1\114\1\137\4\15\1\137"+
    "\3\15\3\137\6\15\3\140\4\141\1\140\2\141\10\140"+
    "\2\141\3\140\1\141\3\140\1\141\10\140\1\142\1\141"+
    "\4\140\1\141\3\140\2\141\7\140\70\0\1\143\1\144"+
    "\7\0\1\145\1\146\1\0\1\147\7\0\1\150\3\0"+
    "\1\151\37\0\1\146\12\0\1\147\13\0\1\151\40\0"+
    "\1\21\1\152\2\21\1\0\2\21\2\0\1\153\5\0"+
    "\2\21\3\0\1\21\3\0\1\21\2\0\1\153\3\21"+
    "\3\0\1\21\3\0\10\21\11\0\4\21\1\0\2\21"+
    "\2\0\1\153\5\0\2\21\3\0\1\21\3\0\1\21"+
    "\2\0\1\153\3\21\3\0\1\21\3\0\10\21\11\0"+
    "\4\21\1\0\2\21\2\0\1\153\5\0\1\154\1\21"+
    "\3\0\1\21\3\0\1\21\2\0\1\153\3\21\3\0"+
    "\1\21\3\0\10\21\15\0\1\155\21\0\1\156\40\0"+
    "\3\21\1\157\1\0\2\21\2\0\1\153\5\0\2\21"+
    "\3\0\1\21\3\0\1\21\2\0\1\153\3\21\3\0"+
    "\1\21\3\0\10\21\10\0\1\145\7\0\1\160\56\0"+
    "\1\161\10\0\1\162\15\0\1\156\52\0\1\163\13\0"+
    "\1\151\37\0\1\164\7\0\1\165\2\0\1\163\13\0"+
    "\1\156\53\0\1\166\12\0\1\151\55\0\1\167\10\0"+
    "\1\156\56\0\1\170\50\0\4\21\1\0\2\21\2\0"+
    "\1\153\5\0\2\21\3\0\1\171\3\0\1\21\2\0"+
    "\1\153\3\21\3\0\1\21\3\0\10\21\32\0\1\172"+
    "\44\0\1\173\22\0\1\144\3\0\1\156\63\0\1\150"+
    "\14\0\1\174\1\175\52\0\1\144\1\156\66\0\1\176"+
    "\11\0\2\177\1\0\1\177\51\0\1\156\40\0\3\21"+
    "\1\200\1\0\2\21\2\0\1\153\5\0\2\21\3\0"+
    "\1\21\3\0\1\21\2\0\1\153\3\21\3\0\1\21"+
    "\3\0\10\21\6\0\26\201\1\202\14\201\1\0\23\201"+
    "\24\0\1\203\12\0\1\46\11\0\1\46\1\0\1\46"+
    "\1\204\1\46\14\0\4\47\1\0\2\47\2\0\1\205"+
    "\5\0\2\47\3\0\1\47\3\0\1\47\2\0\1\205"+
    "\3\47\3\0\1\47\3\0\10\47\51\0\1\51\71\0"+
    "\2\53\17\0\43\54\2\0\22\54\22\0\1\206\1\0"+
    "\1\203\12\0\1\46\5\0\1\207\3\0\1\46\1\210"+
    "\1\46\1\204\1\46\74\0\1\211\67\0\1\212\5\0"+
    "\4\63\1\0\2\63\10\0\2\63\3\0\1\63\2\0"+
    "\2\63\3\0\3\63\3\0\1\63\3\0\10\63\51\0"+
    "\1\62\24\0\1\213\1\112\7\0\1\214\1\215\1\0"+
    "\1\112\7\0\1\112\43\0\1\215\12\0\1\112\55\0"+
    "\1\216\104\0\1\217\53\0\1\220\65\0\1\221\62\0"+
    "\1\214\7\0\1\222\56\0\1\112\10\0\1\223\70\0"+
    "\1\224\53\0\1\112\7\0\1\112\2\0\1\224\67\0"+
    "\1\225\70\0\1\226\67\0\1\112\74\0\1\112\63\0"+
    "\1\227\44\0\1\112\22\0\1\112\67\0\1\112\70\0"+
    "\1\112\67\0\1\112\43\0\1\112\123\0\1\15\23\0"+
    "\44\230\1\231\1\232\21\230\43\0\1\116\43\0\1\233"+
    "\131\0\2\234\45\0\1\124\66\0\1\126\71\0\2\235"+
    "\13\0\2\236\65\0\2\237\45\0\1\132\106\0\2\240"+
    "\45\0\1\140\24\0\1\161\1\241\7\0\1\161\105\0"+
    "\1\242\37\0\1\161\26\0\1\151\37\0\1\161\115\0"+
    "\1\151\100\0\2\243\1\0\1\243\23\0\2\21\1\244"+
    "\1\21\1\0\2\21\2\0\1\153\5\0\2\21\3\0"+
    "\1\21\3\0\1\21\2\0\1\153\3\21\3\0\1\21"+
    "\3\0\10\21\11\0\4\21\1\0\2\21\2\0\1\153"+
    "\5\0\1\21\1\245\3\0\1\21\3\0\1\21\2\0"+
    "\1\153\3\21\3\0\1\21\3\0\10\21\15\0\1\246"+
    "\21\0\1\151\100\0\2\247\1\0\1\247\23\0\4\21"+
    "\1\0\1\21\1\250\2\0\1\153\5\0\2\21\3\0"+
    "\1\21\3\0\1\21\2\0\1\153\3\21\3\0\1\21"+
    "\3\0\10\21\20\0\1\251\67\0\1\252\15\0\1\151"+
    "\52\0\1\165\13\0\1\151\53\0\1\253\71\0\1\254"+
    "\50\0\4\21\1\0\2\21\2\0\1\153\5\0\2\21"+
    "\3\0\1\21\1\0\1\151\1\0\1\21\2\0\1\153"+
    "\3\21\3\0\1\21\3\0\10\21\32\0\1\153\4\0"+
    "\1\242\100\0\1\174\54\0\1\255\35\0\44\201\1\256"+
    "\1\257\21\201\37\0\1\260\11\0\1\260\1\0\1\260"+
    "\1\0\1\260\50\0\1\46\11\0\1\46\1\0\1\46"+
    "\1\0\1\46\62\0\1\261\1\0\1\261\1\0\1\261"+
    "\16\0\1\262\2\0\2\262\25\0\1\262\1\0\1\262"+
    "\7\0\3\262\1\0\1\262\1\0\2\262\57\0\1\263"+
    "\1\0\1\263\76\0\1\264\67\0\1\264\3\0\1\112"+
    "\1\215\7\0\1\112\56\0\1\112\71\0\1\265\104\0"+
    "\1\112\52\0\1\112\70\0\1\112\67\0\1\112\67\0"+
    "\1\112\70\0\1\112\67\0\1\112\74\0\1\112\105\0"+
    "\1\230\30\0\1\266\2\0\2\266\6\0\1\267\16\0"+
    "\1\266\1\0\1\266\7\0\3\266\1\0\1\266\1\0"+
    "\2\266\71\0\2\270\65\0\2\271\65\0\2\272\65\0"+
    "\2\273\4\0\1\274\127\0\2\275\1\0\1\275\23\0"+
    "\3\21\1\276\1\0\2\21\2\0\1\153\5\0\2\21"+
    "\3\0\1\21\3\0\1\21\2\0\1\153\3\21\3\0"+
    "\1\21\3\0\10\21\37\0\1\277\100\0\1\201\30\0"+
    "\1\300\2\0\2\300\6\0\1\301\16\0\1\300\1\0"+
    "\1\300\7\0\3\300\1\0\1\300\1\0\2\300\13\0"+
    "\1\302\31\0\1\260\11\0\1\260\1\0\1\260\1\203"+
    "\1\260\2\0\1\302\13\0\1\230\2\0\2\230\25\0"+
    "\1\230\1\0\1\230\7\0\3\230\1\0\1\230\1\0"+
    "\2\230\13\0\1\303\2\0\2\303\25\0\1\303\1\0"+
    "\1\303\7\0\3\303\1\0\1\303\1\0\2\303\71\0"+
    "\2\304\33\0\1\305\100\0\2\306\1\0\1\306\25\0"+
    "\1\201\2\0\2\201\25\0\1\201\1\0\1\201\7\0"+
    "\3\201\1\0\1\201\1\0\2\201\13\0\1\307\2\0"+
    "\2\307\25\0\1\307\1\0\1\307\7\0\3\307\1\0"+
    "\1\307\1\0\2\307\33\0\1\310\2\0\1\310\6\0"+
    "\1\311\11\0\1\311\1\0\1\311\1\0\1\311\16\0"+
    "\1\312\2\0\2\312\7\0\1\230\15\0\1\312\1\0"+
    "\1\312\7\0\3\312\1\0\1\312\1\0\2\312\51\0"+
    "\2\313\1\0\1\313\25\0\1\314\2\0\2\314\7\0"+
    "\1\201\15\0\1\314\1\0\1\314\7\0\3\314\1\0"+
    "\1\314\1\0\2\314\45\0\1\311\11\0\1\311\1\0"+
    "\1\311\1\0\1\311\50\0\1\311\11\0\1\311\1\0"+
    "\1\311\1\310\1\311\16\0\1\315\2\0\2\315\7\0"+
    "\1\230\15\0\1\315\1\0\1\315\7\0\3\315\1\0"+
    "\1\315\1\0\2\315\13\0\1\316\2\0\2\316\7\0"+
    "\1\201\15\0\1\316\1\0\1\316\7\0\3\316\1\0"+
    "\1\316\1\0\2\316\13\0\1\317\2\0\2\317\7\0"+
    "\1\230\15\0\1\317\1\0\1\317\7\0\3\317\1\0"+
    "\1\317\1\0\2\317\13\0\1\320\2\0\2\320\7\0"+
    "\1\201\15\0\1\320\1\0\1\320\7\0\3\320\1\0"+
    "\1\320\1\0\2\320\13\0\1\321\2\0\2\321\7\0"+
    "\1\230\15\0\1\321\1\0\1\321\7\0\3\321\1\0"+
    "\1\321\1\0\2\321\13\0\1\322\2\0\2\322\7\0"+
    "\1\201\15\0\1\322\1\0\1\322\7\0\3\322\1\0"+
    "\1\322\1\0\2\322\13\0\1\323\2\0\2\323\7\0"+
    "\1\230\15\0\1\323\1\0\1\323\7\0\3\323\1\0"+
    "\1\323\1\0\2\323\13\0\1\324\2\0\2\324\7\0"+
    "\1\201\15\0\1\324\1\0\1\324\7\0\3\324\1\0"+
    "\1\324\1\0\2\324\27\0\1\230\66\0\1\201\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8415];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\32\1\2\11\4\1\2\11\2\1\1\11"+
    "\1\1\1\11\4\1\1\11\20\1\1\11\2\1\3\11"+
    "\3\1\1\0\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\2\11\1\1\3\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\5\1"+
    "\2\0\4\1\1\11\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\2\0\1\11\6\0\1\1\3\0\1\1\2\0"+
    "\2\1\2\0\1\1\1\11\2\1\1\11\7\0\1\11"+
    "\3\1\1\11\5\1\1\11\6\1\1\11\1\0\1\1"+
    "\1\0\1\11\1\0\2\11\1\1\1\11\1\1\1\0"+
    "\1\1\3\0\1\11\1\0\1\11\2\0\1\1\1\0"+
    "\1\11\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 69: break;
        case 59: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 70: break;
        case 44: 
          { return ElixirTypes.OR_OPERATOR;
          }
        case 71: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 72: break;
        case 16: 
          { return ElixirTypes.ALIAS;
          }
        case 73: break;
        case 51: 
          { return ElixirTypes.IN_OPERATOR;
          }
        case 74: break;
        case 66: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 75: break;
        case 46: 
          { return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 76: break;
        case 6: 
          { return ElixirTypes.PIPE_OPERATOR;
          }
        case 77: break;
        case 68: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 78: break;
        case 67: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 79: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 80: break;
        case 56: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 81: break;
        case 55: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 82: break;
        case 32: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 83: break;
        case 19: 
          { return TokenType.WHITE_SPACE;
          }
        case 84: break;
        case 49: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 85: break;
        case 22: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 86: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 87: break;
        case 58: 
          { return ElixirTypes.MAP_OPERATOR;
          }
        case 88: break;
        case 7: 
          { return ElixirTypes.UNARY_OPERATOR;
          }
        case 89: break;
        case 53: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 90: break;
        case 30: 
          { return fragmentType();
          }
        case 91: break;
        case 47: 
          { return ElixirTypes.TUPLE_OPERATOR;
          }
        case 92: break;
        case 13: 
          { return ElixirTypes.AT_OPERATOR;
          }
        case 93: break;
        case 18: 
          { return ElixirTypes.EOL;
          }
        case 94: break;
        case 45: 
          { return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 95: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 96: break;
        case 41: 
          { return ElixirTypes.ARROW_OPERATOR;
          }
        case 97: break;
        case 63: 
          { return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 98: break;
        case 33: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 99: break;
        case 25: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 100: break;
        case 60: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 101: break;
        case 35: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 102: break;
        case 65: 
          { return ElixirTypes.WHEN_OPERATOR;
          }
        case 103: break;
        case 50: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 104: break;
        case 28: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 105: break;
        case 37: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 106: break;
        case 14: 
          { return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 107: break;
        case 57: 
          { return ElixirTypes.HAT_OPERATOR;
          }
        case 108: break;
        case 4: 
          { return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 109: break;
        case 48: 
          { return ElixirTypes.STAB_OPERATOR;
          }
        case 110: break;
        case 3: 
          { return ElixirTypes.IDENTIFIER;
          }
        case 111: break;
        case 21: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 112: break;
        case 34: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 113: break;
        case 23: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 114: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 115: break;
        case 38: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 116: break;
        case 40: 
          { return ElixirTypes.TWO_OPERATOR;
          }
        case 117: break;
        case 43: 
          { return ElixirTypes.AND_OPERATOR;
          }
        case 118: break;
        case 15: 
          { return ElixirTypes.NUMBER;
          }
        case 119: break;
        case 20: 
          { return ElixirTypes.COMMENT;
          }
        case 120: break;
        case 24: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 121: break;
        case 26: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 122: break;
        case 42: 
          { return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 123: break;
        case 36: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 124: break;
        case 11: 
          { return ElixirTypes.DUAL_OPERATOR;
          }
        case 125: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 126: break;
        case 62: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 127: break;
        case 54: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 128: break;
        case 8: 
          { return ElixirTypes.MATCH_OPERATOR;
          }
        case 129: break;
        case 52: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 130: break;
        case 9: 
          { return ElixirTypes.STRUCT_OPERATOR;
          }
        case 131: break;
        case 39: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 132: break;
        case 2: 
          { return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 133: break;
        case 17: 
          { return ElixirTypes.SEMICOLON;
          }
        case 134: break;
        case 61: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 135: break;
        case 29: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 136: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
