/* The following code was generated by JFlex 1.4.3 on 11/28/14 4:05 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/14 4:05 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int KEYWORD_PAIR_MAYBE = 18;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 24;
  public static final int SIGIL = 22;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 20;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\0\1\50\1\45\22\0\1\47\1\14\1\67"+
    "\1\51\1\0\1\17\1\7\1\66\1\65\1\64\1\34\1\30\1\41"+
    "\1\25\1\24\1\35\1\52\1\54\6\56\2\37\1\31\1\43\1\1"+
    "\1\15\1\2\1\36\1\32\4\42\1\61\1\42\24\40\1\63\1\26"+
    "\1\62\1\16\1\55\1\0\1\10\1\53\1\60\1\11\1\5\1\70"+
    "\1\57\1\4\1\33\4\57\1\6\1\22\2\57\1\27\1\57\1\23"+
    "\2\57\1\3\1\46\2\57\1\20\1\13\1\21\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\4\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\1\3\1\12\1\13"+
    "\1\1\1\13\1\14\1\15\1\3\1\16\1\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\1\1\24\1\25\1\17"+
    "\1\26\1\27\1\30\1\31\2\32\1\3\1\33\1\34"+
    "\1\35\1\33\2\36\3\37\1\36\1\37\1\1\5\36"+
    "\1\1\1\37\2\36\1\1\1\36\1\1\1\36\1\37"+
    "\1\1\1\40\1\41\1\42\3\41\1\0\1\43\1\41"+
    "\4\44\1\45\1\1\1\46\3\47\2\50\1\51\1\52"+
    "\1\53\1\52\1\0\1\54\1\55\1\0\1\2\1\56"+
    "\4\3\1\57\1\3\1\0\1\55\1\60\1\61\1\62"+
    "\1\61\2\0\1\63\1\60\1\54\1\64\1\24\1\0"+
    "\1\65\1\66\1\67\2\70\2\0\1\20\5\0\1\71"+
    "\1\0\1\36\3\0\1\36\2\0\2\36\2\0\1\36"+
    "\3\72\1\73\4\0\1\74\2\0\1\3\1\75\1\7"+
    "\2\57\1\7\1\60\1\76\1\77\1\100\2\70\4\17"+
    "\1\101\1\0\1\72\1\0\1\102\1\0\1\103\1\104"+
    "\1\105\1\106\1\70\3\0\1\107\2\0\1\17\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u02e5\0\u07cb\0\u02e5\0\u0804\0\u083d"+
    "\0\u0876\0\u02e5\0\u02e5\0\u02e5\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u0993\0\u09cc\0\u0a05\0\u02e5"+
    "\0\u0a3e\0\u02e5\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u02e5\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u02e5"+
    "\0\u0eeb\0\u0f24\0\u02e5\0\u02e5\0\u02e5\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u02e5\0\u1041\0\u02e5\0\u107a\0\u10b3\0\u10ec\0\u02e5"+
    "\0\u1125\0\u02e5\0\u02e5\0\u115e\0\u1197\0\u02e5\0\u11d0\0\u02e5"+
    "\0\u02e5\0\u02e5\0\u1209\0\u1242\0\u02e5\0\u127b\0\u127b\0\u02e5"+
    "\0\u02e5\0\u12b4\0\u02e5\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u02e5\0\u140a\0\u1443\0\u02e5\0\u02e5\0\u147c\0\u14b5\0\u02e5"+
    "\0\u03c9\0\u14ee\0\u02e5\0\u02e5\0\u1527\0\u1560\0\u02e5\0\u03c9"+
    "\0\u02e5\0\u1599\0\u15d2\0\u160b\0\u02e5\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u03c9\0\u1761\0\u179a\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u0d5c\0\u199b"+
    "\0\u02e5\0\u19d4\0\u1a0d\0\u02e5\0\u1a46\0\u10b3\0\u1a7f\0\u1ab8"+
    "\0\u02e5\0\u1af1\0\u1b2a\0\u1b63\0\u03c9\0\u03c9\0\u02e5\0\u03c9"+
    "\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1644\0\u167d\0\u16b6\0\u02e5\0\u0eeb\0\u1c47\0\u1c80\0\u02e5"+
    "\0\u1cb9\0\u02e5\0\u02e5\0\u02e5\0\u03c9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u02e5\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\22\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\16\1\36\1\22\1\37\1\40\1\41\1\22"+
    "\1\42\1\43\1\44\1\45\2\46\1\47\1\50\1\51"+
    "\1\52\1\51\1\53\1\54\1\55\1\22\2\56\1\57"+
    "\1\60\1\22\1\50\1\22\1\50\2\22\1\51\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\3\70\4\71"+
    "\1\70\2\71\2\70\1\72\5\70\2\71\3\70\1\71"+
    "\2\70\2\71\2\70\1\72\2\71\1\70\1\71\2\70"+
    "\1\73\1\71\3\70\10\71\6\70\1\71\1\16\1\74"+
    "\1\75\1\76\2\77\1\100\1\101\1\102\1\77\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\16\1\112"+
    "\1\77\1\113\1\114\1\115\1\77\1\116\1\117\1\120"+
    "\1\121\2\120\2\16\1\77\1\16\1\77\2\16\1\122"+
    "\1\77\4\16\1\77\1\16\1\77\1\16\3\77\4\16"+
    "\2\123\1\77\2\124\1\125\10\124\1\125\5\124\1\125"+
    "\4\124\1\126\6\124\1\125\7\124\1\127\3\124\1\130"+
    "\10\124\1\125\1\124\1\125\1\124\2\125\1\124\66\0"+
    "\2\131\1\0\26\124\1\126\15\124\1\132\1\133\3\124"+
    "\1\130\17\124\45\134\1\135\1\134\2\136\15\134\2\137"+
    "\1\134\44\16\1\140\1\141\24\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\22\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\142\1\36\1\22"+
    "\1\37\1\40\1\41\1\22\1\42\1\43\1\44\1\45"+
    "\2\46\1\47\1\50\1\51\1\52\1\51\1\53\1\54"+
    "\1\55\1\22\2\56\1\57\1\60\1\22\1\50\1\22"+
    "\1\50\2\22\1\51\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\31\143\1\144\13\143\1\145\23\143\1\16"+
    "\1\146\11\16\1\146\4\16\1\146\14\16\1\146\6\16"+
    "\1\0\16\16\1\146\1\16\1\146\2\147\4\16\4\150"+
    "\1\16\2\150\10\16\2\150\3\16\1\150\3\16\1\150"+
    "\4\16\1\150\1\16\1\150\2\16\1\122\1\150\4\16"+
    "\1\150\3\16\3\150\6\16\1\150\3\151\4\152\1\151"+
    "\2\152\10\151\2\152\3\151\1\152\3\151\1\152\11\151"+
    "\1\153\1\152\4\151\1\152\3\151\2\152\7\151\1\152"+
    "\72\0\1\154\1\155\7\0\1\156\1\157\1\0\1\160"+
    "\7\0\1\161\45\0\1\157\12\0\1\160\56\0\1\22"+
    "\1\162\2\22\1\0\2\22\2\0\1\163\5\0\2\22"+
    "\3\0\1\22\3\0\1\22\2\0\1\163\2\22\1\0"+
    "\1\22\3\0\1\22\3\0\10\22\6\0\1\22\3\0"+
    "\4\22\1\0\2\22\2\0\1\163\5\0\2\22\3\0"+
    "\1\22\3\0\1\22\2\0\1\163\2\22\1\0\1\22"+
    "\3\0\1\22\3\0\10\22\6\0\1\22\3\0\3\22"+
    "\1\164\1\0\2\22\2\0\1\163\5\0\2\22\3\0"+
    "\1\22\3\0\1\22\2\0\1\163\2\22\1\0\1\22"+
    "\3\0\1\22\3\0\10\22\6\0\1\22\3\0\4\22"+
    "\1\0\2\22\2\0\1\163\5\0\1\165\1\22\3\0"+
    "\1\22\3\0\1\22\2\0\1\163\2\22\1\0\1\22"+
    "\3\0\1\22\3\0\10\22\6\0\1\22\7\0\1\166"+
    "\64\0\3\22\1\167\1\0\2\22\2\0\1\163\5\0"+
    "\2\22\3\0\1\22\3\0\1\22\2\0\1\163\2\22"+
    "\1\0\1\22\3\0\1\22\3\0\10\22\6\0\1\22"+
    "\2\0\1\156\7\0\1\170\60\0\1\171\10\0\1\172"+
    "\72\0\1\173\55\0\1\174\7\0\1\175\2\0\1\173"+
    "\71\0\1\176\72\0\1\177\71\0\1\200\52\0\4\22"+
    "\1\0\2\22\2\0\1\163\5\0\2\22\3\0\1\201"+
    "\3\0\1\22\2\0\1\163\2\22\1\0\1\22\3\0"+
    "\1\22\3\0\10\22\6\0\1\22\24\0\1\202\46\0"+
    "\1\203\22\0\1\155\71\0\1\161\15\0\1\204\1\205"+
    "\53\0\1\155\71\0\1\206\12\0\2\207\1\0\1\207"+
    "\24\0\3\22\1\210\1\0\2\22\2\0\1\163\5\0"+
    "\2\22\3\0\1\22\3\0\1\22\2\0\1\163\2\22"+
    "\1\0\1\22\3\0\1\22\3\0\10\22\6\0\1\22"+
    "\26\211\1\212\15\211\1\0\24\211\24\0\1\213\12\0"+
    "\1\50\12\0\1\50\1\0\1\50\1\214\1\50\15\0"+
    "\4\51\1\0\2\51\2\0\1\215\5\0\2\51\3\0"+
    "\1\51\3\0\1\51\2\0\1\215\2\51\1\0\1\51"+
    "\3\0\1\51\3\0\10\51\6\0\1\51\44\0\1\54"+
    "\73\0\2\56\20\0\44\57\2\0\23\57\22\0\1\216"+
    "\1\0\1\213\12\0\1\50\6\0\1\217\3\0\1\50"+
    "\1\220\1\50\1\214\1\50\100\0\1\221\71\0\1\222"+
    "\4\0\3\22\1\223\1\0\2\22\2\0\1\163\5\0"+
    "\2\22\3\0\1\22\3\0\1\22\2\0\1\163\2\22"+
    "\1\0\1\22\3\0\1\22\3\0\10\22\6\0\1\22"+
    "\3\0\4\71\1\0\2\71\10\0\2\71\3\0\1\71"+
    "\2\0\2\71\3\0\2\71\1\0\1\71\3\0\1\71"+
    "\3\0\10\71\6\0\1\71\44\0\1\70\25\0\1\224"+
    "\1\120\7\0\1\225\1\226\1\0\1\120\7\0\1\120"+
    "\45\0\1\226\12\0\1\120\57\0\1\227\106\0\1\230"+
    "\55\0\1\231\67\0\1\232\64\0\1\225\7\0\1\233"+
    "\60\0\1\120\10\0\1\234\72\0\1\235\55\0\1\120"+
    "\7\0\1\120\2\0\1\235\71\0\1\236\72\0\1\237"+
    "\71\0\1\120\76\0\1\120\65\0\1\240\46\0\1\120"+
    "\22\0\1\120\71\0\1\120\72\0\1\120\71\0\1\120"+
    "\45\0\1\120\126\0\1\16\24\0\45\241\1\242\1\243"+
    "\22\241\44\0\1\124\44\0\1\244\136\0\2\245\45\0"+
    "\1\132\70\0\1\134\73\0\2\246\15\0\2\247\67\0"+
    "\2\250\45\0\1\140\70\0\2\251\1\0\1\251\65\0"+
    "\1\143\112\0\2\252\45\0\1\151\25\0\1\171\1\253"+
    "\7\0\1\171\60\0\1\171\71\0\2\22\1\254\1\22"+
    "\1\0\2\22\2\0\1\163\5\0\2\22\3\0\1\22"+
    "\3\0\1\22\2\0\1\163\2\22\1\0\1\22\3\0"+
    "\1\22\3\0\10\22\6\0\1\22\3\0\4\22\1\0"+
    "\1\22\1\255\2\0\1\163\5\0\2\22\3\0\1\22"+
    "\3\0\1\22\2\0\1\163\2\22\1\0\1\22\3\0"+
    "\1\22\3\0\10\22\6\0\1\22\3\0\4\22\1\0"+
    "\2\22\2\0\1\163\5\0\1\22\1\256\3\0\1\22"+
    "\3\0\1\22\2\0\1\163\2\22\1\0\1\22\3\0"+
    "\1\22\3\0\10\22\6\0\1\22\7\0\1\257\64\0"+
    "\4\22\1\0\1\22\1\260\2\0\1\163\5\0\2\22"+
    "\3\0\1\22\3\0\1\22\2\0\1\163\2\22\1\0"+
    "\1\22\3\0\1\22\3\0\10\22\6\0\1\22\12\0"+
    "\1\261\71\0\1\262\72\0\1\175\71\0\1\263\73\0"+
    "\1\264\73\0\1\163\110\0\1\204\55\0\1\265\37\0"+
    "\45\211\1\266\1\267\22\211\37\0\1\270\12\0\1\270"+
    "\1\0\1\270\1\0\1\270\51\0\1\50\12\0\1\50"+
    "\1\0\1\50\1\0\1\50\64\0\1\271\1\0\1\271"+
    "\1\0\1\271\17\0\1\272\2\0\2\272\25\0\1\272"+
    "\2\0\1\272\7\0\3\272\1\0\1\272\1\0\2\272"+
    "\6\0\1\272\52\0\1\273\1\0\1\273\102\0\1\274"+
    "\71\0\1\274\2\0\1\120\1\226\7\0\1\120\60\0"+
    "\1\120\73\0\1\275\106\0\1\120\54\0\1\120\72\0"+
    "\1\120\71\0\1\120\71\0\1\120\72\0\1\120\71\0"+
    "\1\120\76\0\1\120\110\0\1\241\31\0\1\276\2\0"+
    "\2\276\6\0\1\277\16\0\1\276\2\0\1\276\7\0"+
    "\3\276\1\0\1\276\1\0\2\276\6\0\1\276\66\0"+
    "\2\300\67\0\2\301\67\0\2\302\67\0\2\303\3\0"+
    "\1\304\71\0\3\22\1\305\1\0\2\22\2\0\1\163"+
    "\5\0\2\22\3\0\1\22\3\0\1\22\2\0\1\163"+
    "\2\22\1\0\1\22\3\0\1\22\3\0\10\22\6\0"+
    "\1\22\44\0\1\211\31\0\1\306\2\0\2\306\6\0"+
    "\1\307\16\0\1\306\2\0\1\306\7\0\3\306\1\0"+
    "\1\306\1\0\2\306\6\0\1\306\5\0\1\310\31\0"+
    "\1\270\12\0\1\270\1\0\1\270\1\213\1\270\2\0"+
    "\1\310\14\0\1\241\2\0\2\241\25\0\1\241\2\0"+
    "\1\241\7\0\3\241\1\0\1\241\1\0\2\241\6\0"+
    "\1\241\5\0\1\311\2\0\2\311\25\0\1\311\2\0"+
    "\1\311\7\0\3\311\1\0\1\311\1\0\2\311\6\0"+
    "\1\311\66\0\2\312\6\0\1\211\2\0\2\211\25\0"+
    "\1\211\2\0\1\211\7\0\3\211\1\0\1\211\1\0"+
    "\2\211\6\0\1\211\5\0\1\313\2\0\2\313\25\0"+
    "\1\313\2\0\1\313\7\0\3\313\1\0\1\313\1\0"+
    "\2\313\6\0\1\313\25\0\1\314\2\0\1\314\6\0"+
    "\1\315\12\0\1\315\1\0\1\315\1\0\1\315\17\0"+
    "\1\316\2\0\2\316\7\0\1\241\15\0\1\316\2\0"+
    "\1\316\7\0\3\316\1\0\1\316\1\0\2\316\6\0"+
    "\1\316\5\0\1\317\2\0\2\317\7\0\1\211\15\0"+
    "\1\317\2\0\1\317\7\0\3\317\1\0\1\317\1\0"+
    "\2\317\6\0\1\317\37\0\1\315\12\0\1\315\1\0"+
    "\1\315\1\0\1\315\51\0\1\315\12\0\1\315\1\0"+
    "\1\315\1\314\1\315\17\0\1\320\2\0\2\320\7\0"+
    "\1\241\15\0\1\320\2\0\1\320\7\0\3\320\1\0"+
    "\1\320\1\0\2\320\6\0\1\320\5\0\1\321\2\0"+
    "\2\321\7\0\1\211\15\0\1\321\2\0\1\321\7\0"+
    "\3\321\1\0\1\321\1\0\2\321\6\0\1\321\5\0"+
    "\1\322\2\0\2\322\7\0\1\241\15\0\1\322\2\0"+
    "\1\322\7\0\3\322\1\0\1\322\1\0\2\322\6\0"+
    "\1\322\5\0\1\323\2\0\2\323\7\0\1\211\15\0"+
    "\1\323\2\0\1\323\7\0\3\323\1\0\1\323\1\0"+
    "\2\323\6\0\1\323\5\0\1\324\2\0\2\324\7\0"+
    "\1\241\15\0\1\324\2\0\1\324\7\0\3\324\1\0"+
    "\1\324\1\0\2\324\6\0\1\324\5\0\1\325\2\0"+
    "\2\325\7\0\1\211\15\0\1\325\2\0\1\325\7\0"+
    "\3\325\1\0\1\325\1\0\2\325\6\0\1\325\5\0"+
    "\1\326\2\0\2\326\7\0\1\241\15\0\1\326\2\0"+
    "\1\326\7\0\3\326\1\0\1\326\1\0\2\326\6\0"+
    "\1\326\5\0\1\327\2\0\2\327\7\0\1\211\15\0"+
    "\1\327\2\0\1\327\7\0\3\327\1\0\1\327\1\0"+
    "\2\327\6\0\1\327\21\0\1\241\70\0\1\211\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8379];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\25\1\1\11\1\1\1\11\3\1\3\11"+
    "\4\1\4\11\3\1\1\11\1\1\1\11\4\1\1\11"+
    "\20\1\1\11\2\1\3\11\3\1\1\0\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\2\11\2\1\1\11\1\1"+
    "\3\11\1\1\1\0\1\11\1\1\1\0\2\11\1\1"+
    "\1\11\4\1\1\0\1\11\2\1\2\11\2\0\1\11"+
    "\2\1\2\11\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\2\0\1\11\5\0\1\1\1\0\1\1\3\0\1\1"+
    "\2\0\2\1\2\0\1\1\1\11\2\1\1\11\4\0"+
    "\1\11\2\0\3\1\1\11\1\1\5\11\6\1\1\11"+
    "\1\0\1\1\1\0\1\11\1\0\3\11\2\1\3\0"+
    "\1\11\2\0\1\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 72: break;
        case 34: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 73: break;
        case 16: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ALIAS;
          }
        case 74: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 75: break;
        case 7: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
          }
        case 76: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 77: break;
        case 51: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
          }
        case 78: break;
        case 71: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 79: break;
        case 14: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 80: break;
        case 9: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
          }
        case 81: break;
        case 45: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
          }
        case 82: break;
        case 70: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
          }
        case 83: break;
        case 35: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 84: break;
        case 20: 
          { return TokenType.WHITE_SPACE;
          }
        case 85: break;
        case 53: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 86: break;
        case 25: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 87: break;
        case 52: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
          }
        case 88: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 89: break;
        case 49: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 90: break;
        case 69: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 91: break;
        case 58: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 92: break;
        case 33: 
          { return fragmentType();
          }
        case 93: break;
        case 48: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_OPERATOR;
          }
        case 94: break;
        case 55: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
          }
        case 95: break;
        case 17: 
          { return ElixirTypes.COMMA;
          }
        case 96: break;
        case 19: 
          { return ElixirTypes.EOL;
          }
        case 97: break;
        case 4: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 98: break;
        case 11: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.DUAL_OPERATOR;
          }
        case 99: break;
        case 30: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 100: break;
        case 36: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 101: break;
        case 28: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 102: break;
        case 66: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 103: break;
        case 38: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 104: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 105: break;
        case 8: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
          }
        case 106: break;
        case 31: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 107: break;
        case 41: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 108: break;
        case 63: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
          }
        case 109: break;
        case 57: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FN;
          }
        case 110: break;
        case 60: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              yybegin(stackFrame.getLastLexicalState());
                              return ElixirTypes.KEYWORD_PAIR_COLON;
          }
        case 111: break;
        case 24: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 112: break;
        case 37: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 113: break;
        case 65: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 114: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 115: break;
        case 42: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 116: break;
        case 15: 
          { return ElixirTypes.NUMBER;
          }
        case 117: break;
        case 21: 
          { return ElixirTypes.COMMENT;
          }
        case 118: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 119: break;
        case 29: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 120: break;
        case 40: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 121: break;
        case 13: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
          }
        case 122: break;
        case 26: 
          { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
          }
        case 123: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 124: break;
        case 68: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 125: break;
        case 59: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 126: break;
        case 6: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
          }
        case 127: break;
        case 62: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.HAT_OPERATOR;
          }
        case 128: break;
        case 56: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 129: break;
        case 3: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IDENTIFIER;
          }
        case 130: break;
        case 22: 
          { return ElixirTypes.CLOSING_BRACKET;
          }
        case 131: break;
        case 2: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 132: break;
        case 50: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 133: break;
        case 43: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 134: break;
        case 39: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              handleInState(stackFrame.getLastLexicalState());
          }
        case 135: break;
        case 44: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
          }
        case 136: break;
        case 61: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
          }
        case 137: break;
        case 47: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_OPERATOR;
          }
        case 138: break;
        case 18: 
          { return ElixirTypes.SEMICOLON;
          }
        case 139: break;
        case 67: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 140: break;
        case 23: 
          { return ElixirTypes.OPENING_BRACKET;
          }
        case 141: break;
        case 32: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 142: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
