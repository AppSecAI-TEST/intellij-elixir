/* The following code was generated by JFlex 1.4.3 on 11/22/14 4:26 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/22/14 4:26 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 22;
  public static final int SIGIL = 20;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 18;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\0\1\50\1\45\22\0\1\47\1\14\1\65"+
    "\1\51\1\0\1\17\1\7\1\64\1\63\1\62\1\34\1\30\1\41"+
    "\1\25\1\24\1\35\1\52\1\54\6\56\2\37\1\31\1\43\1\1"+
    "\1\15\1\2\1\36\1\32\4\42\1\61\1\42\24\40\1\66\1\26"+
    "\1\67\1\16\1\55\1\0\1\10\1\53\1\60\1\11\1\5\1\60"+
    "\1\57\1\4\1\33\4\57\1\6\1\22\2\57\1\27\1\57\1\23"+
    "\2\57\1\3\1\46\2\57\1\20\1\13\1\21\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\3\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\1\3\1\12\1\13"+
    "\1\1\1\13\1\14\1\15\1\3\1\16\1\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\1\1\24\1\25\1\17"+
    "\1\26\1\27\2\30\1\31\1\32\1\33\1\31\2\34"+
    "\3\35\1\34\1\35\1\1\5\34\1\1\1\35\2\34"+
    "\1\1\1\34\1\1\1\34\1\35\1\1\1\36\1\37"+
    "\1\40\3\37\1\0\1\41\1\37\4\42\1\43\1\1"+
    "\1\44\2\45\1\46\1\47\1\50\1\47\1\0\1\51"+
    "\1\52\1\0\1\2\1\53\1\0\3\3\1\54\1\0"+
    "\1\3\1\0\1\52\1\55\1\56\1\57\1\56\2\0"+
    "\1\60\1\55\1\51\1\61\1\24\1\0\1\62\1\63"+
    "\1\64\2\65\2\0\1\20\6\0\1\34\3\0\1\34"+
    "\2\0\2\34\2\0\1\34\3\66\1\67\7\0\1\70"+
    "\1\3\1\7\1\54\1\71\1\54\1\7\1\55\1\72"+
    "\1\73\1\74\2\65\4\17\1\30\1\0\1\66\1\0"+
    "\1\75\1\0\1\76\1\77\1\100\1\101\1\102\1\0"+
    "\1\65\3\0\1\103\1\0\1\104\2\0\1\17\1\0"+
    "\1\105\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u0738\0\u07a8\0\u07e0\0\u0818\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u02a0\0\u02a0"+
    "\0\u0930\0\u0968\0\u02a0\0\u09a0\0\u02a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u02a0\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u02a0\0\u0e38\0\u0e70\0\u02a0\0\u02a0\0\u02a0"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u02a0\0\u0f88\0\u02a0\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u02a0\0\u1068\0\u02a0\0\u02a0\0\u10a0\0\u02a0"+
    "\0\u02a0\0\u02a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1148\0\u1228\0\u1260\0\u02a0\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u11f0\0\u13b0\0\u13e8\0\u1148\0\u11f0\0\u1420\0\u1458"+
    "\0\u1148\0\u1490\0\u14c8\0\u1148\0\u02a0\0\u1500\0\u1538\0\u02a0"+
    "\0\u0380\0\u02a0\0\u1570\0\u15a8\0\u15e0\0\u02a0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u0cb0\0\u1960"+
    "\0\u02a0\0\u1998\0\u19d0\0\u02a0\0\u1a08\0\u0ff8\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u02a0\0\u1b58\0\u1490\0\u11f0\0\u02a0"+
    "\0\u1490\0\u11f0\0\u11f0\0\u1b90\0\u1b90\0\u02a0\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1618\0\u1650\0\u1688\0\u02a0\0\u0e38\0\u1c70\0\u1ca8"+
    "\0\u02a0\0\u1ce0\0\u02a0\0\u02a0\0\u1d18\0\u02a0\0\u0380\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u02a0\0\u1e68\0\u02a0\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u02a0\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\2\21\1\22\1\23\1\24"+
    "\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\15\1\34\1\21\1\35\1\36\1\37\1\21\1\40"+
    "\1\41\1\42\1\43\2\44\1\45\1\46\1\47\1\50"+
    "\1\47\1\51\1\52\1\53\1\21\2\54\1\55\1\56"+
    "\1\21\1\46\1\21\1\46\2\21\1\47\1\57\1\60"+
    "\1\61\1\62\2\15\3\63\4\64\1\63\2\64\2\63"+
    "\1\65\5\63\2\64\3\63\1\64\2\63\2\64\2\63"+
    "\1\65\2\64\1\63\1\64\2\63\1\66\1\64\3\63"+
    "\10\64\6\63\1\15\1\67\1\70\1\71\2\72\1\73"+
    "\1\74\1\75\1\72\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\15\1\105\1\72\1\106\1\107\1\110"+
    "\1\72\1\111\1\112\1\113\1\114\2\113\2\15\1\72"+
    "\1\15\1\72\2\15\1\115\1\72\4\15\1\72\1\15"+
    "\1\72\1\15\3\72\2\15\2\116\2\15\2\117\1\120"+
    "\10\117\1\120\5\117\1\120\4\117\1\121\6\117\1\120"+
    "\7\117\1\122\3\117\1\123\10\117\1\120\1\117\2\120"+
    "\1\117\1\120\64\0\2\124\2\0\26\117\1\121\15\117"+
    "\1\125\1\126\3\117\1\123\16\117\45\127\1\130\1\127"+
    "\2\131\13\127\2\132\2\127\44\15\1\133\1\134\23\15"+
    "\1\16\1\17\1\20\2\21\1\22\1\23\1\24\1\21"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\135"+
    "\1\34\1\21\1\35\1\36\1\37\1\21\1\40\1\41"+
    "\1\42\1\43\2\44\1\45\1\46\1\47\1\50\1\47"+
    "\1\51\1\52\1\53\1\21\2\54\1\55\1\56\1\21"+
    "\1\46\1\21\1\46\2\21\1\47\1\57\1\60\1\61"+
    "\1\62\3\15\1\136\11\15\1\136\4\15\1\136\14\15"+
    "\1\136\6\15\1\0\16\15\1\136\2\137\1\136\4\15"+
    "\4\140\1\15\2\140\10\15\2\140\3\15\1\140\3\15"+
    "\1\140\4\15\1\140\1\15\1\140\2\15\1\115\1\140"+
    "\4\15\1\140\3\15\3\140\6\15\3\141\4\142\1\141"+
    "\2\142\10\141\2\142\3\141\1\142\3\141\1\142\11\141"+
    "\1\143\1\142\4\141\1\142\3\141\2\142\7\141\71\0"+
    "\1\144\1\145\7\0\1\146\1\147\1\0\1\150\7\0"+
    "\1\151\3\0\1\152\40\0\1\147\12\0\1\150\13\0"+
    "\1\152\41\0\1\21\1\153\2\21\1\0\2\21\2\0"+
    "\1\154\5\0\2\21\3\0\1\21\3\0\1\21\2\0"+
    "\1\154\2\21\1\0\1\21\3\0\1\21\3\0\10\21"+
    "\11\0\4\21\1\0\2\21\2\0\1\154\5\0\2\21"+
    "\3\0\1\21\3\0\1\21\2\0\1\154\2\21\1\0"+
    "\1\21\3\0\1\21\3\0\10\21\11\0\4\21\1\0"+
    "\2\21\2\0\1\154\5\0\1\155\1\21\3\0\1\21"+
    "\3\0\1\21\2\0\1\154\2\21\1\0\1\21\3\0"+
    "\1\21\3\0\10\21\15\0\1\156\21\0\1\157\41\0"+
    "\3\21\1\160\1\0\2\21\2\0\1\154\5\0\2\21"+
    "\3\0\1\21\3\0\1\21\2\0\1\154\2\21\1\0"+
    "\1\21\3\0\1\21\3\0\10\21\10\0\1\146\7\0"+
    "\1\161\57\0\1\162\10\0\1\163\15\0\1\157\53\0"+
    "\1\164\13\0\1\152\40\0\1\165\7\0\1\166\2\0"+
    "\1\164\13\0\1\157\54\0\1\167\12\0\1\152\56\0"+
    "\1\170\10\0\1\157\57\0\1\171\51\0\4\21\1\0"+
    "\2\21\2\0\1\154\5\0\2\21\3\0\1\172\3\0"+
    "\1\21\2\0\1\154\2\21\1\0\1\21\3\0\1\21"+
    "\3\0\10\21\32\0\1\173\45\0\1\174\22\0\1\145"+
    "\3\0\1\157\64\0\1\151\15\0\1\175\1\176\52\0"+
    "\1\145\1\157\67\0\1\177\12\0\2\200\1\0\1\200"+
    "\51\0\1\157\41\0\3\21\1\201\1\0\2\21\2\0"+
    "\1\154\5\0\2\21\3\0\1\21\3\0\1\21\2\0"+
    "\1\154\2\21\1\0\1\21\3\0\1\21\3\0\10\21"+
    "\6\0\26\202\1\203\15\202\1\0\23\202\24\0\1\204"+
    "\12\0\1\46\12\0\1\46\1\0\1\46\1\205\1\46"+
    "\14\0\4\47\1\0\2\47\2\0\1\206\5\0\2\47"+
    "\3\0\1\47\3\0\1\47\2\0\1\206\2\47\1\0"+
    "\1\47\3\0\1\47\3\0\10\47\52\0\1\52\72\0"+
    "\2\54\17\0\44\55\2\0\22\55\22\0\1\207\1\0"+
    "\1\204\12\0\1\46\6\0\1\210\3\0\1\46\1\211"+
    "\1\46\1\205\1\46\75\0\1\212\70\0\1\213\5\0"+
    "\4\64\1\0\2\64\10\0\2\64\3\0\1\64\2\0"+
    "\2\64\3\0\2\64\1\0\1\64\3\0\1\64\3\0"+
    "\10\64\52\0\1\63\24\0\1\214\1\113\7\0\1\215"+
    "\1\216\1\0\1\113\7\0\1\113\44\0\1\216\12\0"+
    "\1\113\56\0\1\217\105\0\1\220\54\0\1\221\66\0"+
    "\1\222\63\0\1\215\7\0\1\223\57\0\1\113\10\0"+
    "\1\224\71\0\1\225\54\0\1\113\7\0\1\113\2\0"+
    "\1\225\70\0\1\226\71\0\1\227\70\0\1\113\75\0"+
    "\1\113\64\0\1\230\45\0\1\113\22\0\1\113\70\0"+
    "\1\113\71\0\1\113\70\0\1\113\44\0\1\113\125\0"+
    "\1\15\23\0\45\231\1\232\1\233\21\231\44\0\1\117"+
    "\43\0\1\234\133\0\2\235\46\0\1\125\67\0\1\127"+
    "\72\0\2\236\13\0\2\237\66\0\2\240\46\0\1\133"+
    "\107\0\2\241\46\0\1\141\24\0\1\162\1\242\7\0"+
    "\1\162\106\0\1\243\40\0\1\162\26\0\1\152\40\0"+
    "\1\162\116\0\1\152\102\0\2\244\1\0\1\244\23\0"+
    "\2\21\1\245\1\21\1\0\2\21\2\0\1\154\5\0"+
    "\2\21\3\0\1\21\3\0\1\21\2\0\1\154\2\21"+
    "\1\0\1\21\3\0\1\21\3\0\10\21\11\0\4\21"+
    "\1\0\2\21\2\0\1\154\5\0\1\21\1\246\3\0"+
    "\1\21\3\0\1\21\2\0\1\154\2\21\1\0\1\21"+
    "\3\0\1\21\3\0\10\21\15\0\1\247\21\0\1\152"+
    "\102\0\2\250\1\0\1\250\23\0\4\21\1\0\1\21"+
    "\1\251\2\0\1\154\5\0\2\21\3\0\1\21\3\0"+
    "\1\21\2\0\1\154\2\21\1\0\1\21\3\0\1\21"+
    "\3\0\10\21\20\0\1\252\70\0\1\253\15\0\1\152"+
    "\53\0\1\166\13\0\1\152\54\0\1\254\72\0\1\255"+
    "\51\0\4\21\1\0\2\21\2\0\1\154\5\0\2\21"+
    "\3\0\1\21\1\0\1\152\1\0\1\21\2\0\1\154"+
    "\2\21\1\0\1\21\3\0\1\21\3\0\10\21\32\0"+
    "\1\154\4\0\1\243\102\0\1\175\54\0\1\256\36\0"+
    "\45\202\1\257\1\260\21\202\37\0\1\261\12\0\1\261"+
    "\1\0\1\261\1\0\1\261\50\0\1\46\12\0\1\46"+
    "\1\0\1\46\1\0\1\46\63\0\1\262\1\0\1\262"+
    "\1\0\1\262\16\0\1\263\2\0\2\263\25\0\1\263"+
    "\2\0\1\263\7\0\3\263\1\0\1\263\1\0\2\263"+
    "\60\0\1\264\1\0\1\264\77\0\1\265\70\0\1\265"+
    "\3\0\1\113\1\216\7\0\1\113\57\0\1\113\72\0"+
    "\1\266\105\0\1\113\53\0\1\113\71\0\1\113\70\0"+
    "\1\113\70\0\1\113\71\0\1\113\70\0\1\113\75\0"+
    "\1\113\107\0\1\231\30\0\1\267\2\0\2\267\6\0"+
    "\1\270\16\0\1\267\2\0\1\267\7\0\3\267\1\0"+
    "\1\267\1\0\2\267\72\0\2\271\66\0\2\272\66\0"+
    "\2\273\66\0\2\274\4\0\1\275\131\0\2\276\1\0"+
    "\1\276\23\0\3\21\1\277\1\0\2\21\2\0\1\154"+
    "\5\0\2\21\3\0\1\21\3\0\1\21\2\0\1\154"+
    "\2\21\1\0\1\21\3\0\1\21\3\0\10\21\37\0"+
    "\1\300\102\0\1\202\30\0\1\301\2\0\2\301\6\0"+
    "\1\302\16\0\1\301\2\0\1\301\7\0\3\301\1\0"+
    "\1\301\1\0\2\301\13\0\1\303\31\0\1\261\12\0"+
    "\1\261\1\0\1\261\1\204\1\261\2\0\1\303\13\0"+
    "\1\231\2\0\2\231\25\0\1\231\2\0\1\231\7\0"+
    "\3\231\1\0\1\231\1\0\2\231\13\0\1\304\2\0"+
    "\2\304\25\0\1\304\2\0\1\304\7\0\3\304\1\0"+
    "\1\304\1\0\2\304\72\0\2\305\33\0\1\306\102\0"+
    "\2\307\1\0\1\307\25\0\1\202\2\0\2\202\25\0"+
    "\1\202\2\0\1\202\7\0\3\202\1\0\1\202\1\0"+
    "\2\202\13\0\1\310\2\0\2\310\25\0\1\310\2\0"+
    "\1\310\7\0\3\310\1\0\1\310\1\0\2\310\33\0"+
    "\1\311\2\0\1\311\6\0\1\312\12\0\1\312\1\0"+
    "\1\312\1\0\1\312\16\0\1\313\2\0\2\313\7\0"+
    "\1\231\15\0\1\313\2\0\1\313\7\0\3\313\1\0"+
    "\1\313\1\0\2\313\52\0\2\314\1\0\1\314\25\0"+
    "\1\315\2\0\2\315\7\0\1\202\15\0\1\315\2\0"+
    "\1\315\7\0\3\315\1\0\1\315\1\0\2\315\45\0"+
    "\1\312\12\0\1\312\1\0\1\312\1\0\1\312\50\0"+
    "\1\312\12\0\1\312\1\0\1\312\1\311\1\312\16\0"+
    "\1\316\2\0\2\316\7\0\1\231\15\0\1\316\2\0"+
    "\1\316\7\0\3\316\1\0\1\316\1\0\2\316\13\0"+
    "\1\317\2\0\2\317\7\0\1\202\15\0\1\317\2\0"+
    "\1\317\7\0\3\317\1\0\1\317\1\0\2\317\13\0"+
    "\1\320\2\0\2\320\7\0\1\231\15\0\1\320\2\0"+
    "\1\320\7\0\3\320\1\0\1\320\1\0\2\320\13\0"+
    "\1\321\2\0\2\321\7\0\1\202\15\0\1\321\2\0"+
    "\1\321\7\0\3\321\1\0\1\321\1\0\2\321\13\0"+
    "\1\322\2\0\2\322\7\0\1\231\15\0\1\322\2\0"+
    "\1\322\7\0\3\322\1\0\1\322\1\0\2\322\13\0"+
    "\1\323\2\0\2\323\7\0\1\202\15\0\1\323\2\0"+
    "\1\323\7\0\3\323\1\0\1\323\1\0\2\323\13\0"+
    "\1\324\2\0\2\324\7\0\1\231\15\0\1\324\2\0"+
    "\1\324\7\0\3\324\1\0\1\324\1\0\2\324\13\0"+
    "\1\325\2\0\2\325\7\0\1\202\15\0\1\325\2\0"+
    "\1\325\7\0\3\325\1\0\1\325\1\0\2\325\27\0"+
    "\1\231\67\0\1\202\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\32\1\3\11\4\1\2\11\2\1\1\11"+
    "\1\1\1\11\4\1\1\11\20\1\1\11\2\1\3\11"+
    "\3\1\1\0\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\2\11\1\1\3\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\5\1"+
    "\2\0\4\1\1\11\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\2\0\1\11\6\0\1\1\3\0\1\1\2\0"+
    "\2\1\2\0\1\1\1\11\2\1\1\11\7\0\1\11"+
    "\3\1\1\11\5\1\1\11\6\1\1\11\1\0\1\1"+
    "\1\0\1\11\1\0\2\11\1\1\1\11\1\1\1\0"+
    "\1\1\3\0\1\11\1\0\1\11\2\0\1\1\1\0"+
    "\1\11\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 70: break;
        case 60: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 71: break;
        case 45: 
          { return ElixirTypes.OR_OPERATOR;
          }
        case 72: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 73: break;
        case 16: 
          { return ElixirTypes.ALIAS;
          }
        case 74: break;
        case 52: 
          { return ElixirTypes.IN_OPERATOR;
          }
        case 75: break;
        case 67: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 76: break;
        case 47: 
          { return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 77: break;
        case 6: 
          { return ElixirTypes.PIPE_OPERATOR;
          }
        case 78: break;
        case 69: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 79: break;
        case 68: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 80: break;
        case 65: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 81: break;
        case 57: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 82: break;
        case 56: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 83: break;
        case 33: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 84: break;
        case 20: 
          { return TokenType.WHITE_SPACE;
          }
        case 85: break;
        case 50: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 86: break;
        case 23: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 87: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 88: break;
        case 59: 
          { return ElixirTypes.MAP_OPERATOR;
          }
        case 89: break;
        case 7: 
          { return ElixirTypes.UNARY_OPERATOR;
          }
        case 90: break;
        case 54: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 91: break;
        case 31: 
          { return fragmentType();
          }
        case 92: break;
        case 48: 
          { return ElixirTypes.TUPLE_OPERATOR;
          }
        case 93: break;
        case 13: 
          { return ElixirTypes.AT_OPERATOR;
          }
        case 94: break;
        case 17: 
          { return ElixirTypes.COMMA;
          }
        case 95: break;
        case 19: 
          { return ElixirTypes.EOL;
          }
        case 96: break;
        case 46: 
          { return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 97: break;
        case 28: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 98: break;
        case 42: 
          { return ElixirTypes.ARROW_OPERATOR;
          }
        case 99: break;
        case 64: 
          { return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 100: break;
        case 34: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 101: break;
        case 26: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 102: break;
        case 61: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 103: break;
        case 36: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 104: break;
        case 66: 
          { return ElixirTypes.WHEN_OPERATOR;
          }
        case 105: break;
        case 51: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 106: break;
        case 29: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 107: break;
        case 38: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 108: break;
        case 14: 
          { return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 109: break;
        case 58: 
          { return ElixirTypes.HAT_OPERATOR;
          }
        case 110: break;
        case 4: 
          { return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 111: break;
        case 49: 
          { return ElixirTypes.STAB_OPERATOR;
          }
        case 112: break;
        case 3: 
          { return ElixirTypes.IDENTIFIER;
          }
        case 113: break;
        case 22: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 114: break;
        case 35: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 115: break;
        case 24: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 116: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 117: break;
        case 39: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 118: break;
        case 41: 
          { return ElixirTypes.TWO_OPERATOR;
          }
        case 119: break;
        case 44: 
          { return ElixirTypes.AND_OPERATOR;
          }
        case 120: break;
        case 15: 
          { return ElixirTypes.NUMBER;
          }
        case 121: break;
        case 21: 
          { return ElixirTypes.COMMENT;
          }
        case 122: break;
        case 25: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 123: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 124: break;
        case 43: 
          { return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 125: break;
        case 37: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 126: break;
        case 11: 
          { return ElixirTypes.DUAL_OPERATOR;
          }
        case 127: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 128: break;
        case 63: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 129: break;
        case 55: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 130: break;
        case 8: 
          { return ElixirTypes.MATCH_OPERATOR;
          }
        case 131: break;
        case 53: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 132: break;
        case 9: 
          { return ElixirTypes.STRUCT_OPERATOR;
          }
        case 133: break;
        case 40: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 134: break;
        case 2: 
          { return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 135: break;
        case 18: 
          { return ElixirTypes.SEMICOLON;
          }
        case 136: break;
        case 62: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 137: break;
        case 30: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 138: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
