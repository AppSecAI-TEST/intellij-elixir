/* The following code was generated by JFlex 1.4.3 on 10/31/14 9:38 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/31/14 9:38 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 22;
  public static final int SIGIL = 20;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 18;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\36\1\0\1\42\1\37\22\0\1\42\1\11\1\52"+
    "\1\43\1\0\1\16\1\3\1\51\1\57\1\60\1\27\1\23\1\0"+
    "\1\24\1\21\1\30\1\44\1\46\6\50\2\33\1\25\1\40\1\1"+
    "\1\12\1\2\1\32\1\31\1\35\1\45\4\35\21\56\1\47\2\56"+
    "\1\57\1\26\1\60\1\13\1\34\1\0\1\4\1\55\1\54\1\6"+
    "\2\54\7\53\1\5\1\14\2\53\1\22\1\53\1\15\3\53\1\41"+
    "\2\53\1\17\1\10\1\20\1\7\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\3\1\1\3\1\1\1\4\1\5"+
    "\1\4\2\1\2\6\1\7\1\1\1\10\1\1\1\11"+
    "\1\1\1\12\1\13\1\1\2\14\1\15\1\16\1\17"+
    "\1\15\3\20\3\21\1\1\4\20\1\21\1\20\1\1"+
    "\3\20\2\1\1\20\1\1\1\22\1\23\1\24\3\23"+
    "\1\0\1\25\1\23\4\26\1\27\1\1\1\30\2\31"+
    "\1\32\1\33\1\34\1\33\1\0\1\35\1\36\1\0"+
    "\1\2\1\37\3\0\1\36\1\40\1\41\1\42\1\41"+
    "\1\0\1\40\1\12\1\0\2\43\2\0\1\44\4\0"+
    "\1\20\1\0\1\20\3\0\2\20\2\0\1\20\3\45"+
    "\1\46\5\0\1\37\1\4\1\47\2\43\2\44\1\14"+
    "\1\45\1\0\1\50\1\0\1\51\1\52\1\43\2\0"+
    "\1\53\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u024c\0\u052b\0\u024c\0\u055c\0\u024c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u024c\0\u06b3"+
    "\0\u024c\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u024c"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u024c\0\u0a87\0\u024c"+
    "\0\u024c\0\u024c\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u024c\0\u0b7c"+
    "\0\u024c\0\u0bad\0\u0bde\0\u0c0f\0\u024c\0\u0c40\0\u024c\0\u024c"+
    "\0\u0c71\0\u024c\0\u024c\0\u024c\0\u0ca2\0\u0cd3\0\u024c\0\u0d04"+
    "\0\u0d04\0\u024c\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u024c\0\u0df9"+
    "\0\u0e2a\0\u024c\0\u024c\0\u0e5b\0\u024c\0\u024c\0\u0e8c\0\u024c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0eee\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u0961\0\u119c\0\u024c\0\u11cd\0\u11fe\0\u024c\0\u122f"+
    "\0\u0bde\0\u1260\0\u1291\0\u12c2\0\u024c\0\u024c\0\u024c\0\u12f3"+
    "\0\u1324\0\u0f1f\0\u0f50\0\u024c\0\u1355\0\u1386\0\u024c\0\u13b7"+
    "\0\u024c\0\u024c\0\u13e8\0\u1419\0\u144a\0\u024c\0\u147b\0\u14ac"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\15\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\4\15\1\31\1\15"+
    "\1\32\1\33\1\34\1\35\2\36\1\15\1\37\3\15"+
    "\1\40\1\41\1\40\1\15\1\42\1\43\1\44\4\15"+
    "\1\45\1\46\6\15\4\47\3\50\2\47\1\51\2\47"+
    "\2\50\4\47\1\50\6\47\1\50\1\51\3\50\1\47"+
    "\1\52\1\47\1\50\2\47\5\50\2\47\4\50\2\47"+
    "\1\15\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\60\1\67\1\70"+
    "\1\15\1\71\1\60\1\72\1\73\1\74\1\75\3\76"+
    "\2\15\2\60\1\15\1\77\1\15\1\60\3\15\1\60"+
    "\1\15\1\60\1\15\2\100\4\60\2\15\2\101\1\102"+
    "\5\101\1\102\7\101\1\102\5\101\1\103\1\101\1\102"+
    "\6\101\1\104\3\101\1\105\5\101\2\102\5\101\1\102"+
    "\51\0\2\106\6\0\26\101\1\103\7\101\1\107\1\110"+
    "\1\107\2\101\1\105\15\101\37\111\1\112\2\111\1\113"+
    "\6\111\2\114\6\111\36\15\1\115\1\116\1\115\21\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\15\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\3\15\1\117\1\31\1\15"+
    "\1\32\1\33\1\34\1\35\2\36\1\15\1\37\3\15"+
    "\1\40\1\41\1\40\1\15\1\42\1\43\1\44\4\15"+
    "\1\45\1\46\7\15\1\120\6\15\1\120\6\15\1\120"+
    "\10\15\1\120\5\15\1\0\12\15\2\121\4\15\1\120"+
    "\5\15\3\122\5\15\2\122\4\15\1\122\12\15\1\122"+
    "\1\15\1\77\1\15\1\122\3\15\1\122\1\15\1\122"+
    "\3\15\4\122\2\15\4\123\3\124\5\123\2\124\4\123"+
    "\1\124\14\123\1\125\1\123\1\124\11\123\3\124\3\123"+
    "\62\0\1\126\1\127\4\0\1\130\1\131\1\0\1\132"+
    "\50\0\1\131\7\0\1\132\51\0\1\133\62\0\1\134"+
    "\67\0\1\135\46\0\1\130\4\0\1\136\53\0\1\137"+
    "\5\0\1\140\62\0\1\141\50\0\1\142\4\0\1\143"+
    "\2\0\1\141\61\0\1\144\67\0\1\145\57\0\1\127"+
    "\62\0\1\127\61\0\1\127\72\0\1\146\1\147\21\0"+
    "\26\150\1\151\7\150\1\0\22\150\36\0\1\40\64\0"+
    "\1\42\16\0\36\43\2\0\21\43\14\0\1\152\24\0"+
    "\1\153\2\0\1\154\1\155\1\154\1\153\1\154\4\0"+
    "\1\155\54\0\1\156\61\0\1\157\12\0\3\50\5\0"+
    "\2\50\4\0\1\50\6\0\1\50\1\0\3\50\3\0"+
    "\1\50\2\0\5\50\2\0\4\50\40\0\1\47\23\0"+
    "\1\160\1\76\4\0\1\161\1\162\1\0\1\76\11\0"+
    "\1\76\36\0\1\162\7\0\1\76\51\0\1\163\62\0"+
    "\1\164\67\0\1\165\46\0\1\161\4\0\1\166\53\0"+
    "\1\76\5\0\1\167\62\0\1\170\50\0\1\76\4\0"+
    "\1\76\2\0\1\170\61\0\1\171\67\0\1\76\55\0"+
    "\1\172\61\0\1\76\61\0\1\173\62\0\1\76\37\0"+
    "\1\76\21\0\1\76\61\0\1\76\61\0\1\76\70\0"+
    "\1\15\22\0\37\174\1\175\1\174\1\176\17\174\36\0"+
    "\1\101\41\0\1\177\112\0\2\200\44\0\1\107\60\0"+
    "\1\111\64\0\1\201\6\0\2\202\57\0\2\203\44\0"+
    "\1\115\73\0\2\204\44\0\1\123\23\0\1\137\5\0"+
    "\1\137\53\0\1\137\61\0\1\205\63\0\1\205\67\0"+
    "\1\206\52\0\1\206\61\0\1\145\62\0\1\143\61\0"+
    "\1\207\103\0\1\146\22\0\37\150\1\210\1\150\1\211"+
    "\17\150\44\0\1\154\1\0\1\154\1\0\1\154\14\0"+
    "\1\212\1\0\1\212\24\0\1\212\1\0\1\212\6\0"+
    "\3\212\1\0\1\212\3\0\2\212\47\0\1\213\1\0"+
    "\1\213\63\0\1\214\61\0\1\214\7\0\1\76\1\162"+
    "\4\0\1\76\53\0\1\76\61\0\1\76\63\0\1\76"+
    "\67\0\1\76\52\0\1\76\61\0\1\76\62\0\1\76"+
    "\61\0\1\76\66\0\1\76\75\0\1\174\26\0\1\215"+
    "\1\0\1\215\10\0\1\216\13\0\1\215\1\0\1\215"+
    "\6\0\3\215\1\0\1\215\3\0\2\215\54\0\2\217"+
    "\57\0\2\220\57\0\2\221\57\0\2\222\44\0\1\150"+
    "\26\0\1\223\1\0\1\223\10\0\1\224\13\0\1\223"+
    "\1\0\1\223\6\0\3\223\1\0\1\223\3\0\2\223"+
    "\7\0\1\174\1\0\1\174\24\0\1\174\1\0\1\174"+
    "\6\0\3\174\1\0\1\174\3\0\2\174\7\0\1\225"+
    "\1\0\1\225\24\0\1\225\1\0\1\225\6\0\3\225"+
    "\1\0\1\225\3\0\2\225\54\0\2\226\12\0\1\150"+
    "\1\0\1\150\24\0\1\150\1\0\1\150\6\0\3\150"+
    "\1\0\1\150\3\0\2\150\7\0\1\227\1\0\1\227"+
    "\24\0\1\227\1\0\1\227\6\0\3\227\1\0\1\227"+
    "\3\0\2\227\7\0\1\230\1\0\1\230\11\0\1\174"+
    "\12\0\1\230\1\0\1\230\6\0\3\230\1\0\1\230"+
    "\3\0\2\230\7\0\1\231\1\0\1\231\11\0\1\150"+
    "\12\0\1\231\1\0\1\231\6\0\3\231\1\0\1\231"+
    "\3\0\2\231\7\0\1\232\1\0\1\232\11\0\1\174"+
    "\12\0\1\232\1\0\1\232\6\0\3\232\1\0\1\232"+
    "\3\0\2\232\7\0\1\233\1\0\1\233\11\0\1\150"+
    "\12\0\1\233\1\0\1\233\6\0\3\233\1\0\1\233"+
    "\3\0\2\233\7\0\1\234\1\0\1\234\11\0\1\174"+
    "\12\0\1\234\1\0\1\234\6\0\3\234\1\0\1\234"+
    "\3\0\2\234\7\0\1\235\1\0\1\235\11\0\1\150"+
    "\12\0\1\235\1\0\1\235\6\0\3\235\1\0\1\235"+
    "\3\0\2\235\7\0\1\236\1\0\1\236\11\0\1\174"+
    "\12\0\1\236\1\0\1\236\6\0\3\236\1\0\1\236"+
    "\3\0\2\236\7\0\1\237\1\0\1\237\11\0\1\150"+
    "\12\0\1\237\1\0\1\237\6\0\3\237\1\0\1\237"+
    "\3\0\2\237\7\0\1\240\1\0\1\240\11\0\1\174"+
    "\12\0\1\240\1\0\1\240\6\0\3\240\1\0\1\240"+
    "\3\0\2\240\7\0\1\241\1\0\1\241\11\0\1\150"+
    "\12\0\1\241\1\0\1\241\6\0\3\241\1\0\1\241"+
    "\3\0\2\241\23\0\1\174\60\0\1\150\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5782];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\16\1\1\11\1\1\1\11\1\1\1\11"+
    "\6\1\1\11\1\1\1\11\6\1\1\11\15\1\1\11"+
    "\1\1\3\11\3\1\1\0\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\2\11\1\1\3\11\1\1\1\0\1\11"+
    "\1\1\1\0\1\11\1\1\3\0\1\11\2\1\2\11"+
    "\1\0\2\11\1\0\1\11\1\1\2\0\1\1\4\0"+
    "\1\1\1\0\1\1\3\0\2\1\2\0\1\1\1\11"+
    "\2\1\1\11\5\0\3\11\4\1\1\11\1\1\1\0"+
    "\1\11\1\0\2\11\1\1\2\0\1\11\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 44: break;
        case 32: 
          { return ElixirTypes.OR_OPERATOR;
          }
        case 45: break;
        case 43: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 46: break;
        case 34: 
          { return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 47: break;
        case 21: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 48: break;
        case 10: 
          { return TokenType.WHITE_SPACE;
          }
        case 49: break;
        case 4: 
          { return ElixirTypes.UNARY_OPERATOR;
          }
        case 50: break;
        case 37: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 51: break;
        case 19: 
          { return fragmentType();
          }
        case 52: break;
        case 9: 
          { return ElixirTypes.EOL;
          }
        case 53: break;
        case 7: 
          { pushAndBegin(ATOM_START);
                                         return ElixirTypes.COLON;
          }
        case 54: break;
        case 33: 
          { return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 55: break;
        case 16: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 56: break;
        case 30: 
          { return ElixirTypes.ARROW_OPERATOR;
          }
        case 57: break;
        case 22: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 58: break;
        case 14: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 59: break;
        case 40: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 60: break;
        case 24: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 61: break;
        case 17: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 62: break;
        case 26: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 63: break;
        case 8: 
          { return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 64: break;
        case 39: 
          { return ElixirTypes.HAT_OPERATOR;
          }
        case 65: break;
        case 23: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 66: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 67: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 68: break;
        case 29: 
          { return ElixirTypes.TWO_OPERATOR;
          }
        case 69: break;
        case 36: 
          { return ElixirTypes.NUMBER;
          }
        case 70: break;
        case 31: 
          { return ElixirTypes.AND_OPERATOR;
          }
        case 71: break;
        case 11: 
          { return ElixirTypes.COMMENT;
          }
        case 72: break;
        case 13: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 73: break;
        case 15: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 74: break;
        case 25: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 75: break;
        case 6: 
          { return ElixirTypes.DUAL_OPERATOR;
          }
        case 76: break;
        case 42: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 77: break;
        case 38: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 78: break;
        case 3: 
          { pushAndBegin(SIGIL);
                                         return ElixirTypes.TILDE;
          }
        case 79: break;
        case 5: 
          { return ElixirTypes.MATCH_OPERATOR;
          }
        case 80: break;
        case 35: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 81: break;
        case 28: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 82: break;
        case 12: 
          { startQuote(yytext());
                                         return promoterType();
          }
        case 83: break;
        case 2: 
          { return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 84: break;
        case 41: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 85: break;
        case 18: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
