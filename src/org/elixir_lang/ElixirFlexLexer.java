/* The following code was generated by JFlex 1.4.3 on 11/19/14 6:57 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/19/14 6:57 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 22;
  public static final int SIGIL = 20;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 18;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\42\1\0\1\46\1\43\22\0\1\45\1\14\1\62"+
    "\1\47\1\0\1\17\1\7\1\61\1\63\1\60\1\33\1\30\1\0"+
    "\1\25\1\24\1\34\1\50\1\52\6\54\2\36\1\31\1\41\1\1"+
    "\1\15\1\2\1\35\1\32\4\40\1\57\1\40\24\37\1\63\1\26"+
    "\1\64\1\16\1\53\1\0\1\10\1\51\1\56\1\11\1\5\1\56"+
    "\1\55\1\4\5\55\1\6\1\22\2\55\1\27\1\55\1\23\2\55"+
    "\1\3\1\44\2\55\1\20\1\13\1\21\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\3\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\1\3\1\1\1\12"+
    "\1\1\1\12\1\13\1\14\1\15\1\1\1\16\1\17"+
    "\1\20\1\21\1\1\1\22\1\23\1\16\1\24\2\25"+
    "\1\26\1\27\1\30\1\26\2\31\3\32\1\31\1\32"+
    "\1\1\5\31\1\1\1\32\2\31\1\1\1\31\1\1"+
    "\1\31\1\1\1\33\1\34\1\35\3\34\1\0\1\36"+
    "\1\34\4\37\1\40\1\1\1\41\2\42\1\43\1\44"+
    "\1\45\1\44\1\0\1\46\1\47\1\0\1\2\1\50"+
    "\1\0\3\3\1\51\1\0\1\3\1\0\1\47\1\52"+
    "\1\53\1\54\1\53\2\0\1\55\1\52\1\46\1\56"+
    "\1\22\1\0\1\57\1\60\2\61\2\0\1\17\6\0"+
    "\1\31\3\0\1\31\2\0\2\31\2\0\1\31\3\62"+
    "\1\63\7\0\1\64\1\3\1\7\1\51\1\65\1\51"+
    "\1\7\1\52\1\66\1\67\1\70\2\61\4\16\1\25"+
    "\1\0\1\62\1\0\1\71\1\0\1\72\1\73\1\74"+
    "\1\75\1\76\1\0\1\61\3\0\1\77\1\0\1\100"+
    "\2\0\1\16\1\0\1\101\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u06d5\0\u070a\0\u073f\0\u0774\0\u027c\0\u027c"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u027c\0\u087d\0\u08b2\0\u027c"+
    "\0\u08e7\0\u027c\0\u091c\0\u0951\0\u0986\0\u09bb\0\u027c\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u027c"+
    "\0\u0d40\0\u027c\0\u027c\0\u027c\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u027c\0\u0e49\0\u027c\0\u0e7e\0\u0eb3\0\u0ee8\0\u027c\0\u0f1d"+
    "\0\u027c\0\u027c\0\u0f52\0\u027c\0\u027c\0\u027c\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u0ff1\0\u10c5\0\u10fa\0\u027c"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1090\0\u1238\0\u126d"+
    "\0\u0ff1\0\u1090\0\u12a2\0\u12d7\0\u0ff1\0\u130c\0\u1341\0\u0ff1"+
    "\0\u027c\0\u1376\0\u13ab\0\u027c\0\u027c\0\u13e0\0\u1415\0\u144a"+
    "\0\u027c\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u0bcd\0\u179a\0\u027c\0\u17cf\0\u1804\0\u027c\0\u1839"+
    "\0\u0eb3\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u027c\0\u1977"+
    "\0\u130c\0\u1090\0\u027c\0\u130c\0\u1090\0\u1090\0\u19ac\0\u19ac"+
    "\0\u027c\0\u19e1\0\u1a16\0\u1a4b\0\u147f\0\u14b4\0\u14e9\0\u027c"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u027c\0\u1b1f\0\u027c\0\u027c\0\u1b54"+
    "\0\u027c\0\u0350\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u027c"+
    "\0\u1c92\0\u027c\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u027c\0\u1d9b"+
    "\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\2\21\1\22\1\23\1\24"+
    "\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\15\1\34\1\21\1\35\1\36\1\37\1\21\1\40"+
    "\1\41\1\42\2\43\1\44\1\45\2\46\1\47\1\50"+
    "\1\51\1\21\2\52\1\53\1\54\1\21\1\45\1\21"+
    "\1\45\2\21\1\46\1\55\1\56\1\57\2\15\3\60"+
    "\4\61\1\60\2\61\2\60\1\62\5\60\2\61\3\60"+
    "\1\61\2\60\1\61\2\60\1\62\3\61\2\60\1\63"+
    "\1\61\3\60\10\61\5\60\1\15\1\64\1\65\1\66"+
    "\2\67\1\70\1\71\1\72\1\67\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\15\1\102\1\67\1\103"+
    "\1\104\1\105\1\67\1\106\1\107\3\110\2\15\2\67"+
    "\2\15\1\111\1\67\4\15\1\67\1\15\1\67\1\15"+
    "\3\67\1\15\2\112\2\15\2\113\1\114\10\113\1\114"+
    "\5\113\1\114\4\113\1\115\5\113\1\114\6\113\1\116"+
    "\3\113\1\117\10\113\3\114\1\113\1\114\61\0\2\120"+
    "\2\0\26\113\1\115\13\113\1\121\1\122\3\113\1\117"+
    "\15\113\43\123\1\124\1\123\2\125\12\123\2\126\2\123"+
    "\42\15\1\127\1\130\22\15\1\16\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\131\1\34\1\21\1\35\1\36"+
    "\1\37\1\21\1\40\1\41\1\42\2\43\1\44\1\45"+
    "\2\46\1\47\1\50\1\51\1\21\2\52\1\53\1\54"+
    "\1\21\1\45\1\21\1\45\2\21\1\46\1\55\1\56"+
    "\1\57\3\15\1\132\11\15\1\132\4\15\1\132\13\15"+
    "\1\132\5\15\1\0\16\15\2\133\1\132\4\15\4\134"+
    "\1\15\2\134\10\15\2\134\3\15\1\134\7\15\2\134"+
    "\2\15\1\111\1\134\4\15\1\134\3\15\3\134\5\15"+
    "\3\135\4\136\1\135\2\136\10\135\2\136\3\135\1\136"+
    "\13\135\1\137\1\136\4\135\1\136\3\135\2\136\6\135"+
    "\66\0\1\140\1\141\7\0\1\142\1\143\1\0\1\144"+
    "\7\0\1\145\3\0\1\146\35\0\1\143\12\0\1\144"+
    "\13\0\1\146\36\0\1\21\1\147\2\21\1\0\2\21"+
    "\2\0\1\150\5\0\2\21\3\0\1\21\5\0\1\150"+
    "\3\21\3\0\1\21\3\0\10\21\10\0\4\21\1\0"+
    "\2\21\2\0\1\150\5\0\2\21\3\0\1\21\5\0"+
    "\1\150\3\21\3\0\1\21\3\0\10\21\10\0\4\21"+
    "\1\0\2\21\2\0\1\150\5\0\1\151\1\21\3\0"+
    "\1\21\5\0\1\150\3\21\3\0\1\21\3\0\10\21"+
    "\14\0\1\152\21\0\1\153\36\0\3\21\1\154\1\0"+
    "\2\21\2\0\1\150\5\0\2\21\3\0\1\21\5\0"+
    "\1\150\3\21\3\0\1\21\3\0\10\21\7\0\1\142"+
    "\7\0\1\155\54\0\1\156\10\0\1\157\15\0\1\153"+
    "\50\0\1\160\13\0\1\146\35\0\1\161\7\0\1\162"+
    "\2\0\1\160\13\0\1\153\51\0\1\163\12\0\1\146"+
    "\53\0\1\164\10\0\1\153\54\0\1\165\46\0\4\21"+
    "\1\0\2\21\2\0\1\150\5\0\2\21\3\0\1\166"+
    "\5\0\1\150\3\21\3\0\1\21\3\0\10\21\31\0"+
    "\1\167\42\0\1\170\22\0\1\141\3\0\1\153\61\0"+
    "\1\145\13\0\1\171\1\172\51\0\1\141\1\153\64\0"+
    "\1\173\10\0\2\174\1\0\1\174\50\0\1\153\33\0"+
    "\26\175\1\176\13\175\1\0\22\175\24\0\1\177\11\0"+
    "\1\45\11\0\1\45\1\0\1\45\1\200\1\45\13\0"+
    "\4\46\1\0\2\46\2\0\1\201\5\0\2\46\3\0"+
    "\1\46\5\0\1\201\3\46\3\0\1\46\3\0\10\46"+
    "\47\0\1\50\67\0\2\52\16\0\42\53\2\0\21\53"+
    "\22\0\1\202\1\0\1\177\11\0\1\45\5\0\1\203"+
    "\3\0\1\45\1\204\1\45\1\200\1\45\71\0\1\205"+
    "\65\0\1\206\5\0\4\61\1\0\2\61\10\0\2\61"+
    "\3\0\1\61\2\0\1\61\3\0\3\61\3\0\1\61"+
    "\3\0\10\61\47\0\1\60\23\0\1\207\1\110\7\0"+
    "\1\210\1\211\1\0\1\110\7\0\1\110\41\0\1\211"+
    "\12\0\1\110\53\0\1\212\102\0\1\213\51\0\1\214"+
    "\63\0\1\215\60\0\1\210\7\0\1\216\54\0\1\110"+
    "\10\0\1\217\66\0\1\220\51\0\1\110\7\0\1\110"+
    "\2\0\1\220\65\0\1\221\66\0\1\222\65\0\1\110"+
    "\72\0\1\110\61\0\1\223\42\0\1\110\22\0\1\110"+
    "\65\0\1\110\66\0\1\110\65\0\1\110\75\0\1\15"+
    "\22\0\43\224\1\225\1\226\20\224\42\0\1\113\42\0"+
    "\1\227\125\0\2\230\44\0\1\121\64\0\1\123\67\0"+
    "\2\231\12\0\2\232\63\0\2\233\44\0\1\127\103\0"+
    "\2\234\44\0\1\135\23\0\1\156\1\235\7\0\1\156"+
    "\103\0\1\236\35\0\1\156\26\0\1\146\35\0\1\156"+
    "\113\0\1\146\75\0\2\237\1\0\1\237\22\0\2\21"+
    "\1\240\1\21\1\0\2\21\2\0\1\150\5\0\2\21"+
    "\3\0\1\21\5\0\1\150\3\21\3\0\1\21\3\0"+
    "\10\21\10\0\4\21\1\0\2\21\2\0\1\150\5\0"+
    "\1\21\1\241\3\0\1\21\5\0\1\150\3\21\3\0"+
    "\1\21\3\0\10\21\14\0\1\242\21\0\1\146\75\0"+
    "\2\243\1\0\1\243\22\0\4\21\1\0\1\21\1\244"+
    "\2\0\1\150\5\0\2\21\3\0\1\21\5\0\1\150"+
    "\3\21\3\0\1\21\3\0\10\21\17\0\1\245\65\0"+
    "\1\246\15\0\1\146\50\0\1\162\13\0\1\146\51\0"+
    "\1\247\67\0\1\250\46\0\4\21\1\0\2\21\2\0"+
    "\1\150\5\0\2\21\3\0\1\21\1\0\1\146\3\0"+
    "\1\150\3\21\3\0\1\21\3\0\10\21\31\0\1\150"+
    "\4\0\1\236\75\0\1\171\53\0\1\251\33\0\43\175"+
    "\1\252\1\253\20\175\36\0\1\254\11\0\1\254\1\0"+
    "\1\254\1\0\1\254\46\0\1\45\11\0\1\45\1\0"+
    "\1\45\1\0\1\45\60\0\1\255\1\0\1\255\1\0"+
    "\1\255\15\0\1\256\2\0\2\256\24\0\1\256\1\0"+
    "\1\256\7\0\3\256\1\0\1\256\1\0\2\256\55\0"+
    "\1\257\1\0\1\257\73\0\1\260\65\0\1\260\3\0"+
    "\1\110\1\211\7\0\1\110\54\0\1\110\67\0\1\261"+
    "\102\0\1\110\50\0\1\110\66\0\1\110\65\0\1\110"+
    "\65\0\1\110\66\0\1\110\65\0\1\110\72\0\1\110"+
    "\102\0\1\224\27\0\1\262\2\0\2\262\6\0\1\263"+
    "\15\0\1\262\1\0\1\262\7\0\3\262\1\0\1\262"+
    "\1\0\2\262\66\0\2\264\63\0\2\265\63\0\2\266"+
    "\63\0\2\267\4\0\1\270\124\0\2\271\1\0\1\271"+
    "\22\0\3\21\1\272\1\0\2\21\2\0\1\150\5\0"+
    "\2\21\3\0\1\21\5\0\1\150\3\21\3\0\1\21"+
    "\3\0\10\21\36\0\1\273\75\0\1\175\27\0\1\274"+
    "\2\0\2\274\6\0\1\275\15\0\1\274\1\0\1\274"+
    "\7\0\3\274\1\0\1\274\1\0\2\274\12\0\1\276"+
    "\30\0\1\254\11\0\1\254\1\0\1\254\1\177\1\254"+
    "\2\0\1\276\13\0\1\110\63\0\1\224\2\0\2\224"+
    "\24\0\1\224\1\0\1\224\7\0\3\224\1\0\1\224"+
    "\1\0\2\224\12\0\1\277\2\0\2\277\24\0\1\277"+
    "\1\0\1\277\7\0\3\277\1\0\1\277\1\0\2\277"+
    "\66\0\2\300\33\0\1\301\75\0\2\302\1\0\1\302"+
    "\24\0\1\175\2\0\2\175\24\0\1\175\1\0\1\175"+
    "\7\0\3\175\1\0\1\175\1\0\2\175\12\0\1\303"+
    "\2\0\2\303\24\0\1\303\1\0\1\303\7\0\3\303"+
    "\1\0\1\303\1\0\2\303\32\0\1\304\2\0\1\304"+
    "\5\0\1\305\11\0\1\305\1\0\1\305\1\0\1\305"+
    "\15\0\1\306\2\0\2\306\7\0\1\224\14\0\1\306"+
    "\1\0\1\306\7\0\3\306\1\0\1\306\1\0\2\306"+
    "\47\0\2\307\1\0\1\307\24\0\1\310\2\0\2\310"+
    "\7\0\1\175\14\0\1\310\1\0\1\310\7\0\3\310"+
    "\1\0\1\310\1\0\2\310\43\0\1\305\11\0\1\305"+
    "\1\0\1\305\1\0\1\305\46\0\1\305\11\0\1\305"+
    "\1\0\1\305\1\304\1\305\15\0\1\311\2\0\2\311"+
    "\7\0\1\224\14\0\1\311\1\0\1\311\7\0\3\311"+
    "\1\0\1\311\1\0\2\311\12\0\1\312\2\0\2\312"+
    "\7\0\1\175\14\0\1\312\1\0\1\312\7\0\3\312"+
    "\1\0\1\312\1\0\2\312\12\0\1\313\2\0\2\313"+
    "\7\0\1\224\14\0\1\313\1\0\1\313\7\0\3\313"+
    "\1\0\1\313\1\0\2\313\12\0\1\314\2\0\2\314"+
    "\7\0\1\175\14\0\1\314\1\0\1\314\7\0\3\314"+
    "\1\0\1\314\1\0\2\314\12\0\1\315\2\0\2\315"+
    "\7\0\1\224\14\0\1\315\1\0\1\315\7\0\3\315"+
    "\1\0\1\315\1\0\2\315\12\0\1\316\2\0\2\316"+
    "\7\0\1\175\14\0\1\316\1\0\1\316\7\0\3\316"+
    "\1\0\1\316\1\0\2\316\12\0\1\317\2\0\2\317"+
    "\7\0\1\224\14\0\1\317\1\0\1\317\7\0\3\317"+
    "\1\0\1\317\1\0\2\317\12\0\1\320\2\0\2\320"+
    "\7\0\1\175\14\0\1\320\1\0\1\320\7\0\3\320"+
    "\1\0\1\320\1\0\2\320\26\0\1\224\64\0\1\175"+
    "\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\31\1\2\11\4\1\1\11\2\1\1\11"+
    "\1\1\1\11\4\1\1\11\20\1\1\11\1\1\3\11"+
    "\3\1\1\0\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\2\11\1\1\3\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\5\1"+
    "\2\0\4\1\1\11\1\0\1\1\2\11\1\1\2\0"+
    "\1\11\6\0\1\1\3\0\1\1\2\0\2\1\2\0"+
    "\1\1\1\11\2\1\1\11\7\0\1\11\3\1\1\11"+
    "\5\1\1\11\6\1\1\11\1\0\1\1\1\0\1\11"+
    "\1\0\2\11\1\1\1\11\1\1\1\0\1\1\3\0"+
    "\1\11\1\0\1\11\2\0\1\1\1\0\1\11\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 66: break;
        case 56: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 67: break;
        case 42: 
          { return ElixirTypes.OR_OPERATOR;
          }
        case 68: break;
        case 11: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 69: break;
        case 15: 
          { return ElixirTypes.ALIAS;
          }
        case 70: break;
        case 63: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 71: break;
        case 44: 
          { return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 72: break;
        case 6: 
          { return ElixirTypes.PIPE_OPERATOR;
          }
        case 73: break;
        case 65: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 74: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 75: break;
        case 61: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 76: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 77: break;
        case 52: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return ElixirTypes.OPERATOR_KEYWORD;
          }
        case 78: break;
        case 30: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 79: break;
        case 18: 
          { return TokenType.WHITE_SPACE;
          }
        case 80: break;
        case 47: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 81: break;
        case 55: 
          { return ElixirTypes.MAP_OPERATOR;
          }
        case 82: break;
        case 7: 
          { return ElixirTypes.UNARY_OPERATOR;
          }
        case 83: break;
        case 50: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 84: break;
        case 28: 
          { return fragmentType();
          }
        case 85: break;
        case 45: 
          { return ElixirTypes.TUPLE_OPERATOR;
          }
        case 86: break;
        case 12: 
          { return ElixirTypes.AT_OPERATOR;
          }
        case 87: break;
        case 17: 
          { return ElixirTypes.EOL;
          }
        case 88: break;
        case 43: 
          { return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 89: break;
        case 25: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 90: break;
        case 39: 
          { return ElixirTypes.ARROW_OPERATOR;
          }
        case 91: break;
        case 60: 
          { return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 92: break;
        case 31: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 93: break;
        case 23: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 94: break;
        case 57: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 95: break;
        case 33: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 96: break;
        case 62: 
          { return ElixirTypes.WHEN_OPERATOR;
          }
        case 97: break;
        case 48: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 98: break;
        case 26: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 99: break;
        case 35: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 100: break;
        case 13: 
          { return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 101: break;
        case 54: 
          { return ElixirTypes.HAT_OPERATOR;
          }
        case 102: break;
        case 4: 
          { return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 103: break;
        case 46: 
          { return ElixirTypes.STAB_OPERATOR;
          }
        case 104: break;
        case 3: 
          { return ElixirTypes.IDENTIFIER;
          }
        case 105: break;
        case 20: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 106: break;
        case 32: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 107: break;
        case 21: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 108: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 36: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 110: break;
        case 38: 
          { return ElixirTypes.TWO_OPERATOR;
          }
        case 111: break;
        case 41: 
          { return ElixirTypes.AND_OPERATOR;
          }
        case 112: break;
        case 14: 
          { return ElixirTypes.NUMBER;
          }
        case 113: break;
        case 19: 
          { return ElixirTypes.COMMENT;
          }
        case 114: break;
        case 22: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 115: break;
        case 24: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 116: break;
        case 40: 
          { return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 117: break;
        case 34: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 118: break;
        case 10: 
          { return ElixirTypes.DUAL_OPERATOR;
          }
        case 119: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 120: break;
        case 59: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 121: break;
        case 51: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 122: break;
        case 8: 
          { return ElixirTypes.MATCH_OPERATOR;
          }
        case 123: break;
        case 49: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 124: break;
        case 9: 
          { return ElixirTypes.STRUCT_OPERATOR;
          }
        case 125: break;
        case 37: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 126: break;
        case 2: 
          { return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 127: break;
        case 16: 
          { return ElixirTypes.SEMICOLON;
          }
        case 128: break;
        case 58: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 129: break;
        case 27: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 130: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
