/* The following code was generated by JFlex 1.4.3 on 11/29/14 3:10 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/29/14 3:10 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int UNKNOWN_BASE_INTEGER = 32;
  public static final int HEXADECIMAL_INTEGER = 20;
  public static final int BINARY_INTEGER = 8;
  public static final int GROUP_HEREDOC_END = 12;
  public static final int INTERPOLATION = 22;
  public static final int KEYWORD_PAIR_MAYBE = 24;
  public static final int GROUP_HEREDOC_LINE_START = 16;
  public static final int SIGIL_MODIFIERS = 30;
  public static final int SIGIL = 28;
  public static final int GROUP_HEREDOC_START = 18;
  public static final int GROUP = 10;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 14;
  public static final int NAMED_SIGIL = 26;
  public static final int ATOM_BODY = 2;
  public static final int BASE_INTEGER_BASE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\0\1\50\1\45\22\0\1\47\1\14\1\70"+
    "\1\51\1\0\1\17\1\7\1\67\1\66\1\65\1\34\1\30\1\41"+
    "\1\25\1\24\1\35\1\52\1\56\6\57\2\37\1\31\1\43\1\1"+
    "\1\15\1\2\1\36\1\32\1\42\1\55\2\42\1\62\1\42\24\53"+
    "\1\64\1\26\1\63\1\16\1\40\1\0\1\10\1\54\1\60\1\11"+
    "\1\5\1\71\1\61\1\4\1\33\2\61\1\72\1\61\1\6\1\22"+
    "\2\61\1\27\1\73\1\23\1\74\1\61\1\3\1\46\2\61\1\20"+
    "\1\13\1\21\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\2\2\4\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\2\3\1\12\1\13"+
    "\1\1\1\13\1\14\1\15\1\3\1\16\1\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\1\1\24\1\25\1\17"+
    "\1\26\1\27\1\30\1\31\2\32\1\3\1\33\1\34"+
    "\1\35\1\33\2\36\3\37\1\36\1\37\1\1\5\36"+
    "\1\1\1\37\2\36\1\1\1\36\1\1\1\36\1\37"+
    "\1\1\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\45\1\47\1\50\1\51\3\50\1\0\1\52\1\50"+
    "\4\53\1\54\1\1\1\55\1\56\1\57\1\55\1\60"+
    "\3\61\2\62\1\63\1\64\1\65\1\64\1\66\1\67"+
    "\1\66\1\0\1\70\1\71\1\0\1\2\1\72\5\3"+
    "\1\73\1\3\1\0\1\71\1\74\1\75\1\76\1\75"+
    "\2\0\1\77\1\74\1\3\1\70\1\100\1\24\1\0"+
    "\1\101\1\102\1\103\2\104\2\0\1\21\2\105\2\0"+
    "\1\106\1\3\1\0\1\36\3\0\1\36\2\0\2\36"+
    "\2\0\1\36\3\107\1\110\4\0\1\111\2\0\1\3"+
    "\1\112\1\7\1\113\2\73\1\7\1\74\1\114\1\115"+
    "\1\3\1\116\2\104\2\17\1\117\1\3\1\0\1\107"+
    "\1\0\1\120\1\0\1\121\1\122\1\123\1\124\1\125"+
    "\1\104\2\0\1\3\1\0\1\126\2\0\1\17\1\127"+
    "\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u040d\0\u0988\0\u040d\0\u09c5\0\u0a02\0\u040d\0\u0a3f\0\u040d"+
    "\0\u040d\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u040d\0\u040d\0\u040d"+
    "\0\u040d\0\u0b70\0\u0bad\0\u0bea\0\u040d\0\u0c27\0\u040d\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u040d\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u040d\0\u1128\0\u1165\0\u040d"+
    "\0\u040d\0\u040d\0\u040d\0\u040d\0\u040d\0\u11a2\0\u11df\0\u121c"+
    "\0\u040d\0\u040d\0\u1259\0\u1296\0\u12d3\0\u1310\0\u040d\0\u134d"+
    "\0\u040d\0\u138a\0\u13c7\0\u1404\0\u040d\0\u1441\0\u040d\0\u147e"+
    "\0\u14bb\0\u14f8\0\u040d\0\u040d\0\u1535\0\u1572\0\u040d\0\u15af"+
    "\0\u040d\0\u040d\0\u040d\0\u15ec\0\u040d\0\u1629\0\u1666\0\u16a3"+
    "\0\u040d\0\u16e0\0\u16e0\0\u040d\0\u040d\0\u171d\0\u040d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u040d\0\u18c8\0\u1905"+
    "\0\u040d\0\u040d\0\u1942\0\u197f\0\u040d\0\u0501\0\u19bc\0\u19f9"+
    "\0\u040d\0\u040d\0\u1a36\0\u1a73\0\u040d\0\u0501\0\u040d\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u040d\0\u040d\0\u1b67\0\u1ba4\0\u1be1\0\u0501"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u0f7d\0\u1ebd\0\u040d\0\u1efa"+
    "\0\u1f37\0\u040d\0\u1f74\0\u13c7\0\u1fb1\0\u1fee\0\u040d\0\u202b"+
    "\0\u2068\0\u20a5\0\u0501\0\u0501\0\u0501\0\u040d\0\u0501\0\u040d"+
    "\0\u040d\0\u040d\0\u040d\0\u20e2\0\u040d\0\u211f\0\u215c\0\u2199"+
    "\0\u1b67\0\u040d\0\u21d6\0\u1128\0\u2213\0\u2250\0\u040d\0\u228d"+
    "\0\u040d\0\u040d\0\u040d\0\u0501\0\u0501\0\u22ca\0\u2307\0\u2344"+
    "\0\u2381\0\u23be\0\u040d\0\u23fb\0\u2438\0\u2475\0\u0501\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\26\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\22\1\42\1\43\1\44\1\45\1\46\1\26"+
    "\1\47\1\50\1\51\1\52\2\53\1\54\1\55\1\26"+
    "\1\56\1\57\1\60\1\61\1\62\1\26\2\63\1\64"+
    "\1\65\1\57\1\26\1\57\2\55\2\26\1\57\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\3\26\3\75"+
    "\4\76\1\75\2\76\2\75\1\77\5\75\2\76\3\75"+
    "\1\76\2\75\2\76\2\75\1\77\2\76\1\75\1\76"+
    "\2\75\1\100\1\76\3\75\11\76\6\75\4\76\1\22"+
    "\1\101\1\102\1\103\2\104\1\105\1\106\1\107\1\104"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\22"+
    "\1\117\1\104\1\120\1\121\1\122\1\104\1\123\1\124"+
    "\1\125\1\126\2\125\2\22\1\104\1\22\1\104\2\22"+
    "\1\127\1\104\4\22\3\104\2\22\3\104\4\22\2\130"+
    "\4\104\3\0\4\131\1\0\2\131\10\0\2\131\3\0"+
    "\1\131\3\0\1\131\6\0\1\131\3\0\1\132\4\0"+
    "\1\131\1\133\1\134\2\0\3\131\6\0\4\131\3\135"+
    "\4\136\1\135\2\136\10\135\2\136\3\135\1\136\3\135"+
    "\1\136\3\135\1\136\2\135\1\136\2\135\1\137\1\136"+
    "\3\135\1\140\3\136\1\140\4\136\6\135\4\136\2\141"+
    "\1\142\10\141\1\142\5\141\1\142\4\141\1\143\6\141"+
    "\1\142\7\141\1\144\3\141\1\145\11\141\1\142\1\141"+
    "\1\142\1\141\2\142\4\141\67\0\2\146\4\0\26\141"+
    "\1\143\15\141\1\147\1\150\3\141\1\145\23\141\45\151"+
    "\1\152\1\151\2\153\16\151\2\154\4\151\44\22\1\155"+
    "\1\156\27\22\3\157\2\160\1\161\1\160\1\157\2\161"+
    "\10\157\2\160\3\157\1\160\3\157\1\160\3\157\1\161"+
    "\2\157\1\161\2\157\1\162\1\160\3\157\1\161\1\160"+
    "\5\161\1\160\1\161\6\157\1\161\3\160\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\26"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\163"+
    "\1\42\1\43\1\44\1\45\1\46\1\26\1\47\1\50"+
    "\1\51\1\52\2\53\1\54\1\55\1\26\1\56\1\57"+
    "\1\60\1\61\1\62\1\26\2\63\1\64\1\65\1\57"+
    "\1\26\1\57\2\55\2\26\1\57\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\3\26\31\164\1\165\13\164"+
    "\1\166\27\164\1\22\1\167\11\22\1\167\4\22\1\167"+
    "\14\22\1\167\6\22\1\0\17\22\1\167\1\22\1\167"+
    "\2\170\7\22\4\171\1\22\2\171\10\22\2\171\3\22"+
    "\1\171\3\22\1\171\6\22\1\171\2\22\1\127\1\171"+
    "\4\22\3\171\2\22\3\171\6\22\4\171\3\172\4\173"+
    "\1\172\2\173\10\172\2\173\3\172\1\173\3\172\1\173"+
    "\11\172\1\174\1\173\5\172\1\173\3\172\2\173\7\172"+
    "\4\173\3\175\4\176\1\175\2\176\10\175\2\176\3\175"+
    "\1\176\3\175\1\176\3\175\1\176\2\175\1\176\2\175"+
    "\1\177\1\176\3\175\11\176\6\175\4\176\76\0\1\200"+
    "\1\201\7\0\1\202\1\203\1\0\1\204\7\0\1\205"+
    "\51\0\1\203\12\0\1\204\62\0\1\26\1\206\2\26"+
    "\1\0\2\26\2\0\1\207\5\0\2\26\3\0\1\26"+
    "\3\0\1\26\2\0\1\207\2\26\1\0\1\26\3\0"+
    "\1\26\3\0\11\26\6\0\4\26\3\0\4\26\1\0"+
    "\2\26\2\0\1\207\5\0\2\26\3\0\1\26\3\0"+
    "\1\26\2\0\1\207\2\26\1\0\1\26\3\0\1\26"+
    "\3\0\11\26\6\0\4\26\3\0\3\26\1\210\1\0"+
    "\2\26\2\0\1\207\5\0\2\26\3\0\1\26\3\0"+
    "\1\26\2\0\1\207\2\26\1\0\1\26\3\0\1\26"+
    "\3\0\11\26\6\0\4\26\3\0\4\26\1\0\2\26"+
    "\2\0\1\207\5\0\1\211\1\26\3\0\1\26\3\0"+
    "\1\212\2\0\1\207\2\26\1\0\1\26\3\0\1\26"+
    "\3\0\11\26\6\0\4\26\7\0\1\213\70\0\3\26"+
    "\1\214\1\0\2\26\2\0\1\207\5\0\2\26\3\0"+
    "\1\26\3\0\1\26\2\0\1\207\2\26\1\0\1\26"+
    "\3\0\1\26\3\0\11\26\6\0\4\26\2\0\1\202"+
    "\7\0\1\215\64\0\1\216\10\0\1\217\76\0\1\220"+
    "\61\0\1\221\7\0\1\222\2\0\1\220\75\0\1\223"+
    "\76\0\1\224\75\0\1\225\56\0\4\26\1\0\2\26"+
    "\2\0\1\207\5\0\2\26\3\0\1\226\3\0\1\26"+
    "\2\0\1\207\2\26\1\0\1\26\3\0\1\26\3\0"+
    "\11\26\6\0\4\26\3\0\4\26\1\0\2\26\2\0"+
    "\1\207\5\0\2\26\3\0\1\227\3\0\1\26\2\0"+
    "\1\207\2\26\1\0\1\26\3\0\1\26\3\0\11\26"+
    "\6\0\4\26\24\0\1\230\52\0\1\231\22\0\1\201"+
    "\75\0\1\205\15\0\1\232\1\233\57\0\1\201\75\0"+
    "\1\234\12\0\2\235\1\0\1\235\30\0\3\26\1\236"+
    "\1\0\2\26\2\0\1\207\5\0\2\26\3\0\1\26"+
    "\3\0\1\26\2\0\1\207\2\26\1\0\1\26\3\0"+
    "\1\26\3\0\11\26\6\0\4\26\26\237\1\240\15\237"+
    "\1\0\30\237\24\0\1\241\12\0\1\55\1\242\11\0"+
    "\1\55\3\0\2\55\20\0\4\57\1\0\2\57\2\0"+
    "\1\243\5\0\2\57\3\0\1\57\3\0\1\57\2\0"+
    "\1\243\2\57\1\0\1\57\3\0\1\57\3\0\11\57"+
    "\6\0\4\57\44\0\1\61\77\0\2\63\24\0\44\64"+
    "\2\0\27\64\3\0\4\244\1\0\2\244\10\0\1\245"+
    "\1\244\1\241\2\0\1\244\3\0\1\244\3\0\1\55"+
    "\1\242\1\0\1\244\3\0\1\244\3\0\1\55\3\244"+
    "\2\55\3\244\6\0\4\244\67\0\1\246\75\0\1\247"+
    "\7\0\3\26\1\250\1\0\1\251\1\26\2\0\1\207"+
    "\5\0\2\26\3\0\1\26\3\0\1\26\2\0\1\207"+
    "\2\26\1\0\1\26\3\0\1\26\3\0\11\26\6\0"+
    "\4\26\3\0\4\76\1\0\2\76\10\0\2\76\3\0"+
    "\1\76\2\0\2\76\3\0\2\76\1\0\1\76\3\0"+
    "\1\76\3\0\11\76\6\0\4\76\44\0\1\75\31\0"+
    "\1\252\1\125\7\0\1\253\1\254\1\0\1\125\7\0"+
    "\1\125\51\0\1\254\12\0\1\125\63\0\1\255\112\0"+
    "\1\256\61\0\1\257\73\0\1\260\70\0\1\253\7\0"+
    "\1\261\64\0\1\125\10\0\1\262\76\0\1\263\61\0"+
    "\1\125\7\0\1\125\2\0\1\263\75\0\1\264\76\0"+
    "\1\265\75\0\1\125\102\0\1\125\71\0\1\266\52\0"+
    "\1\125\22\0\1\125\75\0\1\125\76\0\1\125\75\0"+
    "\1\125\51\0\1\125\132\0\1\22\33\0\4\136\1\0"+
    "\2\136\10\0\2\136\3\0\1\136\3\0\1\136\3\0"+
    "\1\136\2\0\1\136\3\0\1\136\4\0\3\136\1\0"+
    "\4\136\6\0\4\136\44\0\1\135\102\0\1\140\3\0"+
    "\1\140\16\0\45\267\1\270\1\271\26\267\44\0\1\141"+
    "\50\0\1\272\143\0\2\273\50\0\1\147\74\0\1\151"+
    "\77\0\2\274\16\0\2\275\73\0\2\276\50\0\1\155"+
    "\33\0\2\160\1\0\1\160\13\0\2\160\3\0\1\160"+
    "\3\0\1\160\12\0\1\160\4\0\1\160\5\0\1\160"+
    "\10\0\3\160\5\0\1\161\2\0\2\161\25\0\1\161"+
    "\2\0\1\161\7\0\1\161\1\0\5\161\1\0\1\161"+
    "\6\0\1\161\47\0\1\157\74\0\2\277\1\0\1\277"+
    "\71\0\1\164\117\0\2\300\50\0\1\172\33\0\4\176"+
    "\1\0\2\176\10\0\2\176\3\0\1\176\3\0\1\176"+
    "\3\0\1\176\2\0\1\176\3\0\1\176\3\0\11\176"+
    "\6\0\4\176\44\0\1\175\31\0\1\216\1\301\7\0"+
    "\1\216\64\0\1\216\75\0\2\26\1\302\1\26\1\0"+
    "\2\26\2\0\1\207\5\0\2\26\3\0\1\26\3\0"+
    "\1\26\2\0\1\207\2\26\1\0\1\26\3\0\1\26"+
    "\3\0\11\26\6\0\4\26\3\0\4\26\1\0\1\26"+
    "\1\303\2\0\1\207\5\0\2\26\3\0\1\26\3\0"+
    "\1\26\2\0\1\207\2\26\1\0\1\26\3\0\1\26"+
    "\3\0\11\26\6\0\4\26\3\0\4\26\1\0\2\26"+
    "\2\0\1\207\5\0\1\26\1\304\3\0\1\26\3\0"+
    "\1\26\2\0\1\207\2\26\1\0\1\26\3\0\1\26"+
    "\3\0\11\26\6\0\4\26\3\0\4\26\1\0\2\26"+
    "\2\0\1\207\5\0\2\26\3\0\1\26\3\0\1\26"+
    "\2\0\1\207\2\26\1\0\1\26\3\0\1\26\3\0"+
    "\11\26\6\0\1\26\1\305\2\26\7\0\1\306\70\0"+
    "\4\26\1\0\1\26\1\307\2\0\1\207\5\0\2\26"+
    "\3\0\1\26\3\0\1\26\2\0\1\207\2\26\1\0"+
    "\1\26\3\0\1\26\3\0\11\26\6\0\4\26\12\0"+
    "\1\310\75\0\1\311\76\0\1\222\75\0\1\312\77\0"+
    "\1\313\56\0\4\26\1\0\2\26\2\0\1\207\5\0"+
    "\2\26\3\0\1\26\3\0\1\26\2\0\1\207\2\26"+
    "\1\0\1\26\3\0\1\26\3\0\11\26\6\0\3\26"+
    "\1\314\24\0\1\207\114\0\1\232\61\0\1\315\43\0"+
    "\45\237\1\316\1\317\26\237\37\0\1\320\12\0\1\320"+
    "\3\0\2\320\54\0\1\55\12\0\1\55\3\0\2\55"+
    "\67\0\1\321\3\0\2\321\104\0\1\322\75\0\1\322"+
    "\7\0\4\26\1\0\2\26\2\0\1\207\5\0\2\26"+
    "\3\0\1\26\3\0\1\26\2\0\1\207\2\26\1\0"+
    "\1\26\3\0\1\26\3\0\11\26\6\0\1\26\1\323"+
    "\2\26\1\0\1\125\1\254\7\0\1\125\64\0\1\125"+
    "\77\0\1\324\112\0\1\125\60\0\1\125\76\0\1\125"+
    "\75\0\1\125\75\0\1\125\76\0\1\125\75\0\1\125"+
    "\102\0\1\125\114\0\1\267\35\0\1\325\2\0\2\325"+
    "\6\0\1\326\16\0\1\325\2\0\1\325\7\0\1\325"+
    "\1\0\5\325\1\0\1\325\6\0\1\325\72\0\2\327"+
    "\73\0\2\330\73\0\2\331\73\0\2\332\6\0\1\333"+
    "\75\0\3\26\1\334\1\0\2\26\2\0\1\207\5\0"+
    "\2\26\3\0\1\26\3\0\1\26\2\0\1\207\2\26"+
    "\1\0\1\26\3\0\1\26\3\0\11\26\6\0\4\26"+
    "\3\0\2\26\1\335\1\26\1\0\2\26\2\0\1\207"+
    "\5\0\2\26\3\0\1\26\3\0\1\26\2\0\1\207"+
    "\2\26\1\0\1\26\3\0\1\26\3\0\11\26\6\0"+
    "\4\26\44\0\1\237\35\0\1\336\2\0\2\336\6\0"+
    "\1\337\16\0\1\336\2\0\1\336\7\0\1\336\1\0"+
    "\5\336\1\0\1\336\6\0\1\336\10\0\1\340\31\0"+
    "\1\320\1\241\11\0\1\320\3\0\2\320\2\0\1\340"+
    "\15\0\4\26\1\0\2\26\2\0\1\207\5\0\2\26"+
    "\3\0\1\26\3\0\1\26\2\0\1\207\2\26\1\0"+
    "\1\26\3\0\1\26\3\0\11\26\6\0\2\26\1\341"+
    "\1\26\5\0\1\267\2\0\2\267\25\0\1\267\2\0"+
    "\1\267\7\0\1\267\1\0\5\267\1\0\1\267\6\0"+
    "\1\267\10\0\1\342\2\0\2\342\25\0\1\342\2\0"+
    "\1\342\7\0\1\342\1\0\5\342\1\0\1\342\6\0"+
    "\1\342\72\0\2\343\11\0\1\237\2\0\2\237\25\0"+
    "\1\237\2\0\1\237\7\0\1\237\1\0\5\237\1\0"+
    "\1\237\6\0\1\237\10\0\1\344\2\0\2\344\25\0"+
    "\1\344\2\0\1\344\7\0\1\344\1\0\5\344\1\0"+
    "\1\344\6\0\1\344\30\0\1\345\2\0\1\345\6\0"+
    "\1\346\12\0\1\346\3\0\2\346\20\0\2\26\1\347"+
    "\1\26\1\0\2\26\2\0\1\207\5\0\2\26\3\0"+
    "\1\26\3\0\1\26\2\0\1\207\2\26\1\0\1\26"+
    "\3\0\1\26\3\0\11\26\6\0\4\26\5\0\1\350"+
    "\2\0\2\350\7\0\1\267\15\0\1\350\2\0\1\350"+
    "\7\0\1\350\1\0\5\350\1\0\1\350\6\0\1\350"+
    "\10\0\1\351\2\0\2\351\7\0\1\237\15\0\1\351"+
    "\2\0\1\351\7\0\1\351\1\0\5\351\1\0\1\351"+
    "\6\0\1\351\42\0\1\346\12\0\1\346\3\0\2\346"+
    "\54\0\1\346\1\345\11\0\1\346\3\0\2\346\22\0"+
    "\1\352\2\0\2\352\7\0\1\267\15\0\1\352\2\0"+
    "\1\352\7\0\1\352\1\0\5\352\1\0\1\352\6\0"+
    "\1\352\10\0\1\353\2\0\2\353\7\0\1\237\15\0"+
    "\1\353\2\0\1\353\7\0\1\353\1\0\5\353\1\0"+
    "\1\353\6\0\1\353\10\0\1\354\2\0\2\354\7\0"+
    "\1\267\15\0\1\354\2\0\1\354\7\0\1\354\1\0"+
    "\5\354\1\0\1\354\6\0\1\354\10\0\1\355\2\0"+
    "\2\355\7\0\1\237\15\0\1\355\2\0\1\355\7\0"+
    "\1\355\1\0\5\355\1\0\1\355\6\0\1\355\10\0"+
    "\1\356\2\0\2\356\7\0\1\267\15\0\1\356\2\0"+
    "\1\356\7\0\1\356\1\0\5\356\1\0\1\356\6\0"+
    "\1\356\10\0\1\357\2\0\2\357\7\0\1\237\15\0"+
    "\1\357\2\0\1\357\7\0\1\357\1\0\5\357\1\0"+
    "\1\357\6\0\1\357\10\0\1\360\2\0\2\360\7\0"+
    "\1\267\15\0\1\360\2\0\1\360\7\0\1\360\1\0"+
    "\5\360\1\0\1\360\6\0\1\360\10\0\1\361\2\0"+
    "\2\361\7\0\1\237\15\0\1\361\2\0\1\361\7\0"+
    "\1\361\1\0\5\361\1\0\1\361\6\0\1\361\24\0"+
    "\1\267\74\0\1\237\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\11\26\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\11\4\1\4\11\3\1\1\11\1\1\1\11"+
    "\4\1\1\11\20\1\1\11\2\1\6\11\3\1\2\11"+
    "\3\1\1\0\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\3\1\2\11\2\1\1\11\1\1\3\11\1\1"+
    "\1\11\2\1\1\0\1\11\1\1\1\0\2\11\1\1"+
    "\1\11\5\1\1\0\1\11\2\1\2\11\2\0\1\11"+
    "\3\1\2\11\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\2\0\2\11\1\1\2\0\2\1\1\0\1\1\3\0"+
    "\1\1\2\0\2\1\2\0\1\1\1\11\2\1\1\11"+
    "\4\0\1\11\2\0\4\1\1\11\1\1\4\11\1\1"+
    "\1\11\4\1\1\11\1\1\1\0\1\1\1\0\1\11"+
    "\1\0\3\11\3\1\2\0\1\1\1\0\1\11\2\0"+
    "\2\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return ElixirTypes.NUMBER;
          }
        case 88: break;
        case 37: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                            handleInState(stackFrame.getLastLexicalState());
          }
        case 89: break;
        case 67: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
          }
        case 90: break;
        case 68: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 91: break;
        case 8: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
          }
        case 92: break;
        case 60: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_OPERATOR;
          }
        case 93: break;
        case 79: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 94: break;
        case 54: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                  handleInState(stackFrame.getLastLexicalState());
          }
        case 95: break;
        case 31: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 96: break;
        case 30: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 97: break;
        case 65: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 98: break;
        case 80: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 99: break;
        case 29: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 100: break;
        case 87: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FALSE;
          }
        case 101: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 102: break;
        case 81: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 103: break;
        case 33: 
          { yybegin(UNKNOWN_BASE_INTEGER);
                                   return ElixirTypes.UNKNOWN_INTEGER_BASE;
          }
        case 104: break;
        case 69: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(BASE_INTEGER_BASE);
                                                return ElixirTypes.BASE_INTEGER_PREFIX;
          }
        case 105: break;
        case 28: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 106: break;
        case 72: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 107: break;
        case 45: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                 handleInState(stackFrame.getLastLexicalState());
          }
        case 108: break;
        case 41: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 109: break;
        case 71: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 110: break;
        case 85: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TRUE;
          }
        case 111: break;
        case 82: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 112: break;
        case 20: 
          { return TokenType.WHITE_SPACE;
          }
        case 113: break;
        case 59: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_OPERATOR;
          }
        case 114: break;
        case 38: 
          { return ElixirTypes.INVALID_BINARY_DIGITS;
          }
        case 115: break;
        case 36: 
          { yybegin(BINARY_INTEGER);
                                   return ElixirTypes.OBSOLETE_BINARY_INTEGER_BASE;
          }
        case 116: break;
        case 19: 
          { return ElixirTypes.EOL;
          }
        case 117: break;
        case 32: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 118: break;
        case 23: 
          { return ElixirTypes.OPENING_BRACKET;
          }
        case 119: break;
        case 7: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
          }
        case 120: break;
        case 76: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.HAT_OPERATOR;
          }
        case 121: break;
        case 83: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 122: break;
        case 48: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 123: break;
        case 66: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 124: break;
        case 58: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 125: break;
        case 44: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 126: break;
        case 13: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
          }
        case 127: break;
        case 70: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FN;
          }
        case 128: break;
        case 2: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 129: break;
        case 50: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 130: break;
        case 49: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              handleInState(stackFrame.getLastLexicalState());
          }
        case 131: break;
        case 63: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
          }
        case 132: break;
        case 17: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ALIAS;
          }
        case 133: break;
        case 55: 
          { return ElixirTypes.INVALID_UNKNOWN_BASE_DIGITS;
          }
        case 134: break;
        case 47: 
          { return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
          }
        case 135: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 136: break;
        case 53: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 137: break;
        case 6: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
          }
        case 138: break;
        case 16: 
          { return ElixirTypes.COMMA;
          }
        case 139: break;
        case 22: 
          { return ElixirTypes.CLOSING_BRACKET;
          }
        case 140: break;
        case 9: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
          }
        case 141: break;
        case 56: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
          }
        case 142: break;
        case 18: 
          { return ElixirTypes.SEMICOLON;
          }
        case 143: break;
        case 46: 
          { return ElixirTypes.INVALID_HEXADECIMAL_DIGITS;
          }
        case 144: break;
        case 14: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 145: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 146: break;
        case 40: 
          { return fragmentType();
          }
        case 147: break;
        case 34: 
          { yybegin(HEXADECIMAL_INTEGER);
                                   return ElixirTypes.HEXADECIMAL_INTEGER_BASE;
          }
        case 148: break;
        case 52: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 149: break;
        case 74: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
          }
        case 150: break;
        case 62: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 151: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 152: break;
        case 43: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 153: break;
        case 64: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
          }
        case 154: break;
        case 84: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
          }
        case 155: break;
        case 11: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.DUAL_OPERATOR;
          }
        case 156: break;
        case 42: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 157: break;
        case 75: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.NIL;
          }
        case 158: break;
        case 61: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 159: break;
        case 86: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 160: break;
        case 77: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
          }
        case 161: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              yybegin(stackFrame.getLastLexicalState());
                              return ElixirTypes.KEYWORD_PAIR_COLON;
          }
        case 162: break;
        case 39: 
          { return ElixirTypes.VALID_BINARY_DIGITS;
          }
        case 163: break;
        case 26: 
          { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
          }
        case 164: break;
        case 57: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
          }
        case 165: break;
        case 51: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 166: break;
        case 35: 
          { yybegin(BINARY_INTEGER);
                                   return ElixirTypes.BINARY_INTEGER_BASE;
          }
        case 167: break;
        case 3: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IDENTIFIER;
          }
        case 168: break;
        case 24: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 169: break;
        case 78: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 170: break;
        case 21: 
          { return ElixirTypes.COMMENT;
          }
        case 171: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 172: break;
        case 4: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 173: break;
        case 25: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
