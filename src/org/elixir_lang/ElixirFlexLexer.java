/* The following code was generated by JFlex 1.4.3 on 11/28/14 4:51 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/14 4:51 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GROUP_HEREDOC_END = 8;
  public static final int INTERPOLATION = 16;
  public static final int KEYWORD_PAIR_MAYBE = 18;
  public static final int GROUP_HEREDOC_LINE_START = 12;
  public static final int SIGIL_MODIFIERS = 24;
  public static final int SIGIL = 22;
  public static final int GROUP_HEREDOC_START = 14;
  public static final int GROUP = 6;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP_HEREDOC_LINE_BODY = 10;
  public static final int NAMED_SIGIL = 20;
  public static final int ATOM_BODY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\0\1\50\1\45\22\0\1\47\1\14\1\67"+
    "\1\51\1\0\1\17\1\7\1\66\1\65\1\64\1\34\1\30\1\41"+
    "\1\25\1\24\1\35\1\52\1\54\6\56\2\37\1\31\1\43\1\1"+
    "\1\15\1\2\1\36\1\32\4\42\1\61\1\42\24\40\1\63\1\26"+
    "\1\62\1\16\1\55\1\0\1\10\1\53\1\60\1\11\1\5\1\70"+
    "\1\57\1\4\1\33\2\57\1\71\1\57\1\6\1\22\2\57\1\27"+
    "\1\72\1\23\1\73\1\57\1\3\1\46\2\57\1\20\1\13\1\21"+
    "\1\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\4\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\1\1\2\3\1\12\1\13"+
    "\1\1\1\13\1\14\1\15\1\3\1\16\1\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\1\1\24\1\25\1\17"+
    "\1\26\1\27\1\30\1\31\2\32\1\3\1\33\1\34"+
    "\1\35\1\33\2\36\3\37\1\36\1\37\1\1\5\36"+
    "\1\1\1\37\2\36\1\1\1\36\1\1\1\36\1\37"+
    "\1\1\1\40\1\41\1\42\3\41\1\0\1\43\1\41"+
    "\4\44\1\45\1\1\1\46\3\47\2\50\1\51\1\52"+
    "\1\53\1\52\1\0\1\54\1\55\1\0\1\2\1\56"+
    "\4\3\1\57\1\3\1\0\1\55\1\60\1\61\1\62"+
    "\1\61\2\0\1\63\1\60\1\3\1\54\1\64\1\24"+
    "\1\0\1\65\1\66\1\67\2\70\2\0\1\20\5\0"+
    "\1\71\1\3\1\0\1\36\3\0\1\36\2\0\2\36"+
    "\2\0\1\36\3\72\1\73\4\0\1\74\2\0\1\3"+
    "\1\75\1\7\2\57\1\7\1\60\1\76\1\77\1\3"+
    "\1\100\2\70\4\17\1\101\1\3\1\0\1\72\1\0"+
    "\1\102\1\0\1\103\1\104\1\105\1\106\1\107\1\70"+
    "\2\0\1\3\1\0\1\110\2\0\1\17\1\111\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u030c\0\u0870\0\u030c\0\u08ac"+
    "\0\u08e8\0\u0924\0\u030c\0\u030c\0\u030c\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u030c\0\u030c\0\u030c\0\u030c\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u030c\0\u0b04\0\u030c\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u030c"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u030c\0\u0ff0\0\u102c\0\u030c\0\u030c\0\u030c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u030c\0\u1158\0\u030c\0\u1194\0\u11d0\0\u120c"+
    "\0\u030c\0\u1248\0\u030c\0\u030c\0\u1284\0\u12c0\0\u030c\0\u12fc"+
    "\0\u030c\0\u030c\0\u030c\0\u1338\0\u1374\0\u030c\0\u13b0\0\u13b0"+
    "\0\u030c\0\u030c\0\u13ec\0\u030c\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u030c\0\u1554\0\u1590\0\u030c\0\u030c\0\u15cc\0\u1608"+
    "\0\u030c\0\u03fc\0\u1644\0\u1680\0\u030c\0\u030c\0\u16bc\0\u16f8"+
    "\0\u030c\0\u03fc\0\u030c\0\u1734\0\u1770\0\u17ac\0\u030c\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u03fc\0\u1914\0\u1950\0\u198c"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u0e4c\0\u1ba8\0\u030c\0\u1be4\0\u1c20\0\u030c\0\u1c5c"+
    "\0\u11d0\0\u1c98\0\u1cd4\0\u030c\0\u1d10\0\u1d4c\0\u1d88\0\u03fc"+
    "\0\u03fc\0\u030c\0\u03fc\0\u030c\0\u030c\0\u030c\0\u030c\0\u1dc4"+
    "\0\u030c\0\u1e00\0\u1e3c\0\u1e78\0\u17e8\0\u1824\0\u1860\0\u030c"+
    "\0\u1eb4\0\u0ff0\0\u1ef0\0\u1f2c\0\u030c\0\u1f68\0\u030c\0\u030c"+
    "\0\u030c\0\u03fc\0\u03fc\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u030c\0\u20d0\0\u210c\0\u2148\0\u03fc\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\22\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\16\1\36\1\37\1\40\1\41\1\42\1\22"+
    "\1\43\1\44\1\45\1\46\2\47\1\50\1\51\1\52"+
    "\1\53\1\52\1\54\1\55\1\56\1\22\2\57\1\60"+
    "\1\61\1\22\1\51\1\22\1\51\2\22\1\52\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\3\22\3\71"+
    "\4\72\1\71\2\72\2\71\1\73\5\71\2\72\3\71"+
    "\1\72\2\71\2\72\2\71\1\73\2\72\1\71\1\72"+
    "\2\71\1\74\1\72\3\71\10\72\6\71\4\72\1\16"+
    "\1\75\1\76\1\77\2\100\1\101\1\102\1\103\1\100"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\16"+
    "\1\113\1\100\1\114\1\115\1\116\1\100\1\117\1\120"+
    "\1\121\1\122\2\121\2\16\1\100\1\16\1\100\2\16"+
    "\1\123\1\100\4\16\1\100\1\16\1\100\1\16\3\100"+
    "\4\16\2\124\4\100\2\125\1\126\10\125\1\126\5\125"+
    "\1\126\4\125\1\127\6\125\1\126\7\125\1\130\3\125"+
    "\1\131\10\125\1\126\1\125\1\126\1\125\2\126\4\125"+
    "\66\0\2\132\4\0\26\125\1\127\15\125\1\133\1\134"+
    "\3\125\1\131\22\125\45\135\1\136\1\135\2\137\15\135"+
    "\2\140\4\135\44\16\1\141\1\142\27\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\22\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\143\1\36"+
    "\1\37\1\40\1\41\1\42\1\22\1\43\1\44\1\45"+
    "\1\46\2\47\1\50\1\51\1\52\1\53\1\52\1\54"+
    "\1\55\1\56\1\22\2\57\1\60\1\61\1\22\1\51"+
    "\1\22\1\51\2\22\1\52\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\3\22\31\144\1\145\13\144\1\146"+
    "\26\144\1\16\1\147\11\16\1\147\4\16\1\147\14\16"+
    "\1\147\6\16\1\0\16\16\1\147\1\16\1\147\2\150"+
    "\7\16\4\151\1\16\2\151\10\16\2\151\3\16\1\151"+
    "\3\16\1\151\4\16\1\151\1\16\1\151\2\16\1\123"+
    "\1\151\4\16\1\151\3\16\3\151\6\16\4\151\3\152"+
    "\4\153\1\152\2\153\10\152\2\153\3\152\1\153\3\152"+
    "\1\153\11\152\1\154\1\153\4\152\1\153\3\152\2\153"+
    "\7\152\4\153\75\0\1\155\1\156\7\0\1\157\1\160"+
    "\1\0\1\161\7\0\1\162\50\0\1\160\12\0\1\161"+
    "\61\0\1\22\1\163\2\22\1\0\2\22\2\0\1\164"+
    "\5\0\2\22\3\0\1\22\3\0\1\22\2\0\1\164"+
    "\2\22\1\0\1\22\3\0\1\22\3\0\10\22\6\0"+
    "\4\22\3\0\4\22\1\0\2\22\2\0\1\164\5\0"+
    "\2\22\3\0\1\22\3\0\1\22\2\0\1\164\2\22"+
    "\1\0\1\22\3\0\1\22\3\0\10\22\6\0\4\22"+
    "\3\0\3\22\1\165\1\0\2\22\2\0\1\164\5\0"+
    "\2\22\3\0\1\22\3\0\1\22\2\0\1\164\2\22"+
    "\1\0\1\22\3\0\1\22\3\0\10\22\6\0\4\22"+
    "\3\0\4\22\1\0\2\22\2\0\1\164\5\0\1\166"+
    "\1\22\3\0\1\22\3\0\1\22\2\0\1\164\2\22"+
    "\1\0\1\22\3\0\1\22\3\0\10\22\6\0\4\22"+
    "\7\0\1\167\67\0\3\22\1\170\1\0\2\22\2\0"+
    "\1\164\5\0\2\22\3\0\1\22\3\0\1\22\2\0"+
    "\1\164\2\22\1\0\1\22\3\0\1\22\3\0\10\22"+
    "\6\0\4\22\2\0\1\157\7\0\1\171\63\0\1\172"+
    "\10\0\1\173\75\0\1\174\60\0\1\175\7\0\1\176"+
    "\2\0\1\174\74\0\1\177\75\0\1\200\74\0\1\201"+
    "\55\0\4\22\1\0\2\22\2\0\1\164\5\0\2\22"+
    "\3\0\1\202\3\0\1\22\2\0\1\164\2\22\1\0"+
    "\1\22\3\0\1\22\3\0\10\22\6\0\4\22\3\0"+
    "\4\22\1\0\2\22\2\0\1\164\5\0\2\22\3\0"+
    "\1\203\3\0\1\22\2\0\1\164\2\22\1\0\1\22"+
    "\3\0\1\22\3\0\10\22\6\0\4\22\24\0\1\204"+
    "\51\0\1\205\22\0\1\156\74\0\1\162\15\0\1\206"+
    "\1\207\56\0\1\156\74\0\1\210\12\0\2\211\1\0"+
    "\1\211\27\0\3\22\1\212\1\0\2\22\2\0\1\164"+
    "\5\0\2\22\3\0\1\22\3\0\1\22\2\0\1\164"+
    "\2\22\1\0\1\22\3\0\1\22\3\0\10\22\6\0"+
    "\4\22\26\213\1\214\15\213\1\0\27\213\24\0\1\215"+
    "\12\0\1\51\12\0\1\51\1\0\1\51\1\216\1\51"+
    "\20\0\4\52\1\0\2\52\2\0\1\217\5\0\2\52"+
    "\3\0\1\52\3\0\1\52\2\0\1\217\2\52\1\0"+
    "\1\52\3\0\1\52\3\0\10\52\6\0\4\52\44\0"+
    "\1\55\76\0\2\57\23\0\44\60\2\0\26\60\22\0"+
    "\1\220\1\0\1\215\12\0\1\51\6\0\1\221\3\0"+
    "\1\51\1\222\1\51\1\216\1\51\103\0\1\223\74\0"+
    "\1\224\7\0\3\22\1\225\1\0\1\226\1\22\2\0"+
    "\1\164\5\0\2\22\3\0\1\22\3\0\1\22\2\0"+
    "\1\164\2\22\1\0\1\22\3\0\1\22\3\0\10\22"+
    "\6\0\4\22\3\0\4\72\1\0\2\72\10\0\2\72"+
    "\3\0\1\72\2\0\2\72\3\0\2\72\1\0\1\72"+
    "\3\0\1\72\3\0\10\72\6\0\4\72\44\0\1\71"+
    "\30\0\1\227\1\121\7\0\1\230\1\231\1\0\1\121"+
    "\7\0\1\121\50\0\1\231\12\0\1\121\62\0\1\232"+
    "\111\0\1\233\60\0\1\234\72\0\1\235\67\0\1\230"+
    "\7\0\1\236\63\0\1\121\10\0\1\237\75\0\1\240"+
    "\60\0\1\121\7\0\1\121\2\0\1\240\74\0\1\241"+
    "\75\0\1\242\74\0\1\121\101\0\1\121\70\0\1\243"+
    "\51\0\1\121\22\0\1\121\74\0\1\121\75\0\1\121"+
    "\74\0\1\121\50\0\1\121\131\0\1\16\27\0\45\244"+
    "\1\245\1\246\25\244\44\0\1\125\47\0\1\247\141\0"+
    "\2\250\50\0\1\133\73\0\1\135\76\0\2\251\15\0"+
    "\2\252\72\0\2\253\50\0\1\141\73\0\2\254\1\0"+
    "\1\254\70\0\1\144\115\0\2\255\50\0\1\152\30\0"+
    "\1\172\1\256\7\0\1\172\63\0\1\172\74\0\2\22"+
    "\1\257\1\22\1\0\2\22\2\0\1\164\5\0\2\22"+
    "\3\0\1\22\3\0\1\22\2\0\1\164\2\22\1\0"+
    "\1\22\3\0\1\22\3\0\10\22\6\0\4\22\3\0"+
    "\4\22\1\0\1\22\1\260\2\0\1\164\5\0\2\22"+
    "\3\0\1\22\3\0\1\22\2\0\1\164\2\22\1\0"+
    "\1\22\3\0\1\22\3\0\10\22\6\0\4\22\3\0"+
    "\4\22\1\0\2\22\2\0\1\164\5\0\1\22\1\261"+
    "\3\0\1\22\3\0\1\22\2\0\1\164\2\22\1\0"+
    "\1\22\3\0\1\22\3\0\10\22\6\0\4\22\7\0"+
    "\1\262\67\0\4\22\1\0\1\22\1\263\2\0\1\164"+
    "\5\0\2\22\3\0\1\22\3\0\1\22\2\0\1\164"+
    "\2\22\1\0\1\22\3\0\1\22\3\0\10\22\6\0"+
    "\4\22\12\0\1\264\74\0\1\265\75\0\1\176\74\0"+
    "\1\266\76\0\1\267\55\0\4\22\1\0\2\22\2\0"+
    "\1\164\5\0\2\22\3\0\1\22\3\0\1\22\2\0"+
    "\1\164\2\22\1\0\1\22\3\0\1\22\3\0\10\22"+
    "\6\0\3\22\1\270\24\0\1\164\113\0\1\206\60\0"+
    "\1\271\42\0\45\213\1\272\1\273\25\213\37\0\1\274"+
    "\12\0\1\274\1\0\1\274\1\0\1\274\54\0\1\51"+
    "\12\0\1\51\1\0\1\51\1\0\1\51\67\0\1\275"+
    "\1\0\1\275\1\0\1\275\22\0\1\276\2\0\2\276"+
    "\25\0\1\276\2\0\1\276\7\0\3\276\1\0\1\276"+
    "\1\0\2\276\6\0\1\276\55\0\1\277\1\0\1\277"+
    "\105\0\1\300\74\0\1\300\7\0\4\22\1\0\2\22"+
    "\2\0\1\164\5\0\2\22\3\0\1\22\3\0\1\22"+
    "\2\0\1\164\2\22\1\0\1\22\3\0\1\22\3\0"+
    "\10\22\6\0\1\22\1\301\2\22\1\0\1\121\1\231"+
    "\7\0\1\121\63\0\1\121\76\0\1\302\111\0\1\121"+
    "\57\0\1\121\75\0\1\121\74\0\1\121\74\0\1\121"+
    "\75\0\1\121\74\0\1\121\101\0\1\121\113\0\1\244"+
    "\34\0\1\303\2\0\2\303\6\0\1\304\16\0\1\303"+
    "\2\0\1\303\7\0\3\303\1\0\1\303\1\0\2\303"+
    "\6\0\1\303\71\0\2\305\72\0\2\306\72\0\2\307"+
    "\72\0\2\310\6\0\1\311\74\0\3\22\1\312\1\0"+
    "\2\22\2\0\1\164\5\0\2\22\3\0\1\22\3\0"+
    "\1\22\2\0\1\164\2\22\1\0\1\22\3\0\1\22"+
    "\3\0\10\22\6\0\4\22\3\0\2\22\1\313\1\22"+
    "\1\0\2\22\2\0\1\164\5\0\2\22\3\0\1\22"+
    "\3\0\1\22\2\0\1\164\2\22\1\0\1\22\3\0"+
    "\1\22\3\0\10\22\6\0\4\22\44\0\1\213\34\0"+
    "\1\314\2\0\2\314\6\0\1\315\16\0\1\314\2\0"+
    "\1\314\7\0\3\314\1\0\1\314\1\0\2\314\6\0"+
    "\1\314\10\0\1\316\31\0\1\274\12\0\1\274\1\0"+
    "\1\274\1\215\1\274\2\0\1\316\15\0\4\22\1\0"+
    "\2\22\2\0\1\164\5\0\2\22\3\0\1\22\3\0"+
    "\1\22\2\0\1\164\2\22\1\0\1\22\3\0\1\22"+
    "\3\0\10\22\6\0\2\22\1\317\1\22\5\0\1\244"+
    "\2\0\2\244\25\0\1\244\2\0\1\244\7\0\3\244"+
    "\1\0\1\244\1\0\2\244\6\0\1\244\10\0\1\320"+
    "\2\0\2\320\25\0\1\320\2\0\1\320\7\0\3\320"+
    "\1\0\1\320\1\0\2\320\6\0\1\320\71\0\2\321"+
    "\11\0\1\213\2\0\2\213\25\0\1\213\2\0\1\213"+
    "\7\0\3\213\1\0\1\213\1\0\2\213\6\0\1\213"+
    "\10\0\1\322\2\0\2\322\25\0\1\322\2\0\1\322"+
    "\7\0\3\322\1\0\1\322\1\0\2\322\6\0\1\322"+
    "\30\0\1\323\2\0\1\323\6\0\1\324\12\0\1\324"+
    "\1\0\1\324\1\0\1\324\20\0\2\22\1\325\1\22"+
    "\1\0\2\22\2\0\1\164\5\0\2\22\3\0\1\22"+
    "\3\0\1\22\2\0\1\164\2\22\1\0\1\22\3\0"+
    "\1\22\3\0\10\22\6\0\4\22\5\0\1\326\2\0"+
    "\2\326\7\0\1\244\15\0\1\326\2\0\1\326\7\0"+
    "\3\326\1\0\1\326\1\0\2\326\6\0\1\326\10\0"+
    "\1\327\2\0\2\327\7\0\1\213\15\0\1\327\2\0"+
    "\1\327\7\0\3\327\1\0\1\327\1\0\2\327\6\0"+
    "\1\327\42\0\1\324\12\0\1\324\1\0\1\324\1\0"+
    "\1\324\54\0\1\324\12\0\1\324\1\0\1\324\1\323"+
    "\1\324\22\0\1\330\2\0\2\330\7\0\1\244\15\0"+
    "\1\330\2\0\1\330\7\0\3\330\1\0\1\330\1\0"+
    "\2\330\6\0\1\330\10\0\1\331\2\0\2\331\7\0"+
    "\1\213\15\0\1\331\2\0\1\331\7\0\3\331\1\0"+
    "\1\331\1\0\2\331\6\0\1\331\10\0\1\332\2\0"+
    "\2\332\7\0\1\244\15\0\1\332\2\0\1\332\7\0"+
    "\3\332\1\0\1\332\1\0\2\332\6\0\1\332\10\0"+
    "\1\333\2\0\2\333\7\0\1\213\15\0\1\333\2\0"+
    "\1\333\7\0\3\333\1\0\1\333\1\0\2\333\6\0"+
    "\1\333\10\0\1\334\2\0\2\334\7\0\1\244\15\0"+
    "\1\334\2\0\1\334\7\0\3\334\1\0\1\334\1\0"+
    "\2\334\6\0\1\334\10\0\1\335\2\0\2\335\7\0"+
    "\1\213\15\0\1\335\2\0\1\335\7\0\3\335\1\0"+
    "\1\335\1\0\2\335\6\0\1\335\10\0\1\336\2\0"+
    "\2\336\7\0\1\244\15\0\1\336\2\0\1\336\7\0"+
    "\3\336\1\0\1\336\1\0\2\336\6\0\1\336\10\0"+
    "\1\337\2\0\2\337\7\0\1\213\15\0\1\337\2\0"+
    "\1\337\7\0\3\337\1\0\1\337\1\0\2\337\6\0"+
    "\1\337\24\0\1\244\73\0\1\213\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\26\1\1\11\1\1\1\11\3\1\3\11"+
    "\4\1\4\11\3\1\1\11\1\1\1\11\4\1\1\11"+
    "\20\1\1\11\2\1\3\11\3\1\1\0\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\2\11\2\1\1\11\1\1"+
    "\3\11\1\1\1\0\1\11\1\1\1\0\2\11\1\1"+
    "\1\11\4\1\1\0\1\11\2\1\2\11\2\0\1\11"+
    "\3\1\2\11\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\2\0\1\11\5\0\2\1\1\0\1\1\3\0\1\1"+
    "\2\0\2\1\2\0\1\1\1\11\2\1\1\11\4\0"+
    "\1\11\2\0\3\1\1\11\1\1\4\11\1\1\1\11"+
    "\6\1\1\11\1\1\1\0\1\1\1\0\1\11\1\0"+
    "\3\11\3\1\2\0\1\1\1\0\1\11\2\0\2\1"+
    "\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return ElixirTypes.NUMBER;
          }
        case 74: break;
        case 55: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
          }
        case 75: break;
        case 56: 
          { return ElixirTypes.CHAR_TOKEN;
          }
        case 76: break;
        case 8: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
          }
        case 77: break;
        case 48: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_OPERATOR;
          }
        case 78: break;
        case 65: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 79: break;
        case 31: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 80: break;
        case 30: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 81: break;
        case 53: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 82: break;
        case 66: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 83: break;
        case 29: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 84: break;
        case 73: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FALSE;
          }
        case 85: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 86: break;
        case 67: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 87: break;
        case 28: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 88: break;
        case 59: 
          { if (isInterpolating()) {
                             pushAndBegin(INTERPOLATION);
                             return ElixirTypes.INTERPOLATION_START;
                            } else {
                             return fragmentType();
                            }
          }
        case 89: break;
        case 34: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 90: break;
        case 58: 
          { if (isInterpolating()) {
                              return ElixirTypes.VALID_ESCAPE_SEQUENCE;
                            } else {
                              return fragmentType();
                            }
          }
        case 91: break;
        case 71: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TRUE;
          }
        case 92: break;
        case 68: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 93: break;
        case 20: 
          { return TokenType.WHITE_SPACE;
          }
        case 94: break;
        case 47: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_OPERATOR;
          }
        case 95: break;
        case 19: 
          { return ElixirTypes.EOL;
          }
        case 96: break;
        case 32: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 97: break;
        case 23: 
          { return ElixirTypes.OPENING_BRACKET;
          }
        case 98: break;
        case 7: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
          }
        case 99: break;
        case 62: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.HAT_OPERATOR;
          }
        case 100: break;
        case 38: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 101: break;
        case 69: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 102: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 103: break;
        case 46: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 104: break;
        case 37: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 105: break;
        case 13: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
          }
        case 106: break;
        case 57: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FN;
          }
        case 107: break;
        case 2: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 108: break;
        case 40: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 109: break;
        case 39: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              handleInState(stackFrame.getLastLexicalState());
          }
        case 110: break;
        case 51: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
          }
        case 111: break;
        case 16: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ALIAS;
          }
        case 112: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 113: break;
        case 43: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 114: break;
        case 6: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
          }
        case 115: break;
        case 17: 
          { return ElixirTypes.COMMA;
          }
        case 116: break;
        case 22: 
          { return ElixirTypes.CLOSING_BRACKET;
          }
        case 117: break;
        case 9: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
          }
        case 118: break;
        case 44: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
          }
        case 119: break;
        case 18: 
          { return ElixirTypes.SEMICOLON;
          }
        case 120: break;
        case 14: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 121: break;
        case 27: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 122: break;
        case 33: 
          { return fragmentType();
          }
        case 123: break;
        case 42: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 124: break;
        case 61: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
          }
        case 125: break;
        case 50: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 126: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 127: break;
        case 36: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 128: break;
        case 52: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
          }
        case 129: break;
        case 70: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
          }
        case 130: break;
        case 11: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.DUAL_OPERATOR;
          }
        case 131: break;
        case 35: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return fragmentType();
          }
        case 132: break;
        case 49: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 133: break;
        case 72: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 63: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
          }
        case 135: break;
        case 26: 
          { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
          }
        case 136: break;
        case 60: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              yybegin(stackFrame.getLastLexicalState());
                              return ElixirTypes.KEYWORD_PAIR_COLON;
          }
        case 137: break;
        case 45: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
          }
        case 138: break;
        case 41: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 139: break;
        case 3: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IDENTIFIER;
          }
        case 140: break;
        case 24: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 141: break;
        case 21: 
          { return ElixirTypes.COMMENT;
          }
        case 142: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 143: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 144: break;
        case 4: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 145: break;
        case 25: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 146: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
