/* The following code was generated by JFlex 1.4.3 on 5/5/15 10:26 PM */

package org.elixir_lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.elixir_lang.lexer.group.*;
import org.elixir_lang.psi.ElixirTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/5/15 10:26 PM from the specification file
 * <tt>/Users/luke.imhoff/git/KronicDeth/intellij-elixir/src/org/elixir_lang/Elixir.flex</tt>
 */
public class ElixirFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OCTAL_WHOLE_NUMBER = 50;
  public static final int UNKNOWN_BASE_WHOLE_NUMBER = 56;
  public static final int NAMED_SIGIL = 48;
  public static final int BINARY_WHOLE_NUMBER = 8;
  public static final int HEXADECIMAL_ESCAPE_SEQUENCE = 40;
  public static final int BASE_WHOLE_NUMBER_BASE = 6;
  public static final int INTERPOLATION = 44;
  public static final int CALL_OR_KEYWORD_PAIR_MAYBE = 10;
  public static final int ATOM_BODY = 2;
  public static final int GROUP_HEREDOC_LINE_START = 36;
  public static final int CHAR_TOKENIZATION = 12;
  public static final int GROUP_HEREDOC_END = 32;
  public static final int DECIMAL_EXPONENT_SIGN = 16;
  public static final int DUAL_OPERATION = 22;
  public static final int ESCAPE_SEQUENCE = 26;
  public static final int HEXADECIMAL_WHOLE_NUMBER = 42;
  public static final int SIGIL = 52;
  public static final int KEYWORD_PAIR_MAYBE = 46;
  public static final int DECIMAL_FRACTION = 18;
  public static final int GROUP_HEREDOC_START = 38;
  public static final int EXTENDED_HEXADECIMAL_ESCAPE_SEQUENCE = 28;
  public static final int GROUP_HEREDOC_LINE_BODY = 34;
  public static final int SIGIL_MODIFIERS = 54;
  public static final int ESCAPE_IN_LITERAL_GROUP = 24;
  public static final int ATOM_START = 4;
  public static final int YYINITIAL = 0;
  public static final int GROUP = 30;
  public static final int DECIMAL_WHOLE_NUMBER = 20;
  public static final int DECIMAL_EXPONENT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\44\1\0\1\50\1\45\22\0\1\47\1\16\1\71"+
    "\1\51\1\0\1\21\1\11\1\70\1\67\1\66\1\34\1\30\1\41"+
    "\1\25\1\24\1\35\1\53\1\56\6\60\2\37\1\31\1\43\1\3"+
    "\1\17\1\4\1\36\1\32\1\42\1\55\2\42\1\63\1\42\21\52"+
    "\1\57\2\52\1\65\1\26\1\64\1\20\1\40\1\0\1\12\1\54"+
    "\1\61\1\13\1\7\1\72\1\62\1\6\1\33\2\62\1\73\1\62"+
    "\1\10\1\22\2\62\1\27\1\74\1\23\1\75\1\62\1\5\1\46"+
    "\2\62\1\1\1\15\1\2\1\14\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\2\1\2\2\4\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\7\1\11\2\3\1\12\1\13\1\1"+
    "\1\13\1\14\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\1\1\25\1\26\1\20\1\27"+
    "\1\30\1\31\1\32\2\33\1\3\1\34\1\35\1\36"+
    "\1\34\1\1\2\37\3\40\1\37\1\40\1\1\5\37"+
    "\1\40\2\37\1\1\1\37\1\1\1\37\1\40\1\1"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\50\1\52\2\53\1\54\1\55\1\56\1\55"+
    "\1\57\1\60\1\61\1\62\1\57\1\63\1\64\1\63"+
    "\1\65\1\57\1\66\2\67\1\70\1\71\1\70\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\2\75\1\0\1\100"+
    "\1\101\1\75\2\102\1\103\1\102\1\104\2\1\1\105"+
    "\1\106\1\107\1\110\1\74\1\107\1\111\3\112\2\113"+
    "\1\114\1\115\1\114\1\116\1\117\1\120\1\121\1\120"+
    "\1\122\1\123\1\122\1\124\1\0\1\125\1\126\1\0"+
    "\1\2\1\127\5\3\1\130\1\3\1\0\1\126\1\131"+
    "\1\132\1\133\1\132\2\0\1\131\1\3\1\125\1\134"+
    "\1\25\1\0\1\135\1\136\1\137\1\22\1\140\2\0"+
    "\1\141\1\3\1\0\1\37\3\0\1\37\2\0\2\37"+
    "\2\0\1\37\1\142\1\74\1\143\4\0\1\106\1\144"+
    "\2\0\1\3\1\145\1\7\1\146\2\130\1\7\1\131"+
    "\1\147\1\150\1\3\1\151\1\152\1\3\1\0\1\74"+
    "\1\153\1\0\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\3\1\74\1\162\1\163\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0706\0\u0c98\0\u0706\0\u0706"+
    "\0\u0cd6\0\u0706\0\u0d14\0\u0706\0\u0706\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0706\0\u0706\0\u0706\0\u0706\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0706\0\u0f04\0\u0706\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u0706\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u0706\0\u141a\0\u1458\0\u0706\0\u0706\0\u0706\0\u0706\0\u0706"+
    "\0\u0706\0\u0706\0\u0706\0\u1496\0\u14d4\0\u1512\0\u0706\0\u1550"+
    "\0\u0706\0\u0706\0\u0706\0\u158e\0\u0706\0\u15cc\0\u160a\0\u0706"+
    "\0\u1648\0\u0706\0\u0706\0\u1686\0\u15cc\0\u16c4\0\u1702\0\u0706"+
    "\0\u1740\0\u0706\0\u0706\0\u177e\0\u0706\0\u0706\0\u17bc\0\u0706"+
    "\0\u0706\0\u0706\0\u17fa\0\u1838\0\u1876\0\u0706\0\u0706\0\u18b4"+
    "\0\u0706\0\u18f2\0\u1930\0\u196e\0\u0706\0\u19ac\0\u19ea\0\u0706"+
    "\0\u1a28\0\u0706\0\u1a66\0\u1aa4\0\u1ae2\0\u0706\0\u0706\0\u1b20"+
    "\0\u1b5e\0\u0706\0\u1b9c\0\u0706\0\u1bda\0\u1c18\0\u1c56\0\u0706"+
    "\0\u0706\0\u0706\0\u1c94\0\u0706\0\u1cd2\0\u1d10\0\u0706\0\u1d4e"+
    "\0\u0706\0\u1d8c\0\u1d8c\0\u0706\0\u0706\0\u1dca\0\u0706\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u0706\0\u1f7c\0\u1fba"+
    "\0\u0706\0\u0706\0\u1ff8\0\u2036\0\u083c\0\u2074\0\u20b2\0\u0706"+
    "\0\u0706\0\u20f0\0\u212e\0\u0706\0\u083c\0\u0706\0\u0706\0\u216c"+
    "\0\u21aa\0\u083c\0\u21e8\0\u2226\0\u2264\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u0f80\0\u2492"+
    "\0\u16c4\0\u24d0\0\u0706\0\u250e\0\u254c\0\u258a\0\u25c8\0\u0706"+
    "\0\u0706\0\u2606\0\u2644\0\u2682\0\u083c\0\u083c\0\u083c\0\u0706"+
    "\0\u083c\0\u0706\0\u0706\0\u0706\0\u0706\0\u26c0\0\u0706\0\u0706"+
    "\0\u26fe\0\u141a\0\u273c\0\u0706\0\u277a\0\u0706\0\u0706\0\u0706"+
    "\0\u0706\0\u083c\0\u083c\0\u27b8\0\u27f6\0\u0706\0\u083c\0\u2834"+
    "\0\u0706";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\1\37\1\36\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\43\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\43"+
    "\1\63\1\64\1\65\1\66\2\67\1\70\1\71\1\43"+
    "\1\72\1\73\1\74\1\75\1\76\1\43\2\77\1\100"+
    "\1\73\1\101\1\43\1\73\1\71\1\73\1\71\2\43"+
    "\1\73\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\3\43\5\111\4\112\1\111\2\112\2\111\1\113\3\111"+
    "\2\112\3\111\1\112\2\111\2\112\2\111\1\113\2\112"+
    "\1\111\1\112\2\111\1\114\1\112\3\111\12\112\6\111"+
    "\4\112\1\36\1\115\1\36\1\116\1\117\1\120\2\121"+
    "\1\122\1\123\1\124\1\121\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\121\1\134\1\135\1\136\1\121"+
    "\1\137\1\140\1\141\1\142\2\141\2\36\1\121\1\36"+
    "\1\121\2\36\1\143\1\121\3\36\1\121\1\36\2\121"+
    "\1\36\1\121\1\36\3\121\4\36\2\144\4\121\5\0"+
    "\4\145\1\0\2\145\6\0\1\146\1\145\3\0\1\145"+
    "\3\0\1\145\6\0\1\145\3\0\1\147\3\0\1\145"+
    "\1\0\1\150\1\151\1\0\1\152\1\0\3\145\6\0"+
    "\4\145\5\153\4\154\1\153\2\154\6\153\2\154\3\153"+
    "\1\154\3\153\1\154\3\153\1\154\2\153\1\154\2\153"+
    "\1\155\1\154\3\153\1\154\1\156\2\154\1\156\5\154"+
    "\6\153\4\154\45\157\1\160\17\157\1\161\1\157\1\161"+
    "\6\157\26\162\1\163\16\162\1\164\30\162\5\165\4\166"+
    "\1\165\2\166\6\165\2\166\3\165\1\166\3\165\1\166"+
    "\3\165\1\167\1\170\1\165\1\166\2\165\1\171\1\166"+
    "\3\165\1\166\1\167\2\166\1\167\1\166\1\167\3\166"+
    "\6\165\4\166\25\172\1\173\2\172\1\173\14\172\1\174"+
    "\30\172\5\165\2\166\1\175\1\166\1\165\2\166\6\165"+
    "\2\166\3\165\1\166\3\165\1\166\3\165\1\167\1\170"+
    "\1\165\1\166\2\165\1\171\1\166\3\165\1\166\1\167"+
    "\2\166\1\167\1\166\1\167\2\166\1\175\6\165\4\166"+
    "\5\165\4\166\1\165\2\166\6\165\2\166\1\176\2\165"+
    "\1\166\3\165\1\166\3\165\1\167\1\170\1\165\1\166"+
    "\2\165\1\171\1\166\3\165\1\166\1\167\2\166\1\167"+
    "\1\166\1\167\3\166\6\165\4\166\45\157\1\160\1\157"+
    "\2\177\25\157\45\200\1\201\30\200\44\202\1\203\1\204"+
    "\1\205\27\202\2\0\1\206\4\0\1\207\2\0\2\207"+
    "\23\0\1\207\2\0\1\207\10\0\4\207\1\0\2\207"+
    "\1\0\1\207\6\0\1\207\3\0\2\210\1\211\1\210"+
    "\1\211\10\210\1\211\10\210\1\212\6\210\1\211\7\210"+
    "\1\213\3\210\1\214\12\210\1\211\1\210\1\211\1\210"+
    "\2\211\4\210\70\0\2\215\4\0\26\210\1\216\15\210"+
    "\1\217\1\220\3\210\1\214\24\210\45\221\1\222\1\221"+
    "\2\223\17\221\2\224\4\221\44\36\1\225\1\226\22\36"+
    "\2\227\4\36\1\165\1\230\5\165\1\231\2\165\2\231"+
    "\23\165\1\231\2\165\1\231\2\165\1\171\5\165\4\231"+
    "\1\165\2\231\1\165\1\231\6\165\1\231\3\165\5\232"+
    "\2\233\1\234\1\233\1\232\2\234\6\232\2\233\3\232"+
    "\1\233\3\232\1\233\3\232\1\234\2\232\1\234\2\232"+
    "\1\235\1\233\3\232\1\233\4\234\1\233\2\234\1\233"+
    "\1\234\6\232\1\234\3\233\1\36\1\37\1\236\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\43"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\43\1\63\1\64\1\65\1\66"+
    "\2\67\1\70\1\71\1\43\1\72\1\73\1\74\1\75"+
    "\1\76\1\43\2\77\1\100\1\73\1\101\1\43\1\73"+
    "\1\71\1\73\1\71\2\43\1\73\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\3\43\31\237\1\240\13\237"+
    "\1\241\30\237\1\36\1\242\1\36\1\242\11\36\1\242"+
    "\17\36\1\242\6\36\1\0\20\36\1\242\1\36\1\242"+
    "\2\243\4\36\5\244\4\245\1\244\2\245\6\244\2\245"+
    "\3\244\1\245\3\244\1\245\3\244\1\245\2\244\1\245"+
    "\2\244\1\246\1\245\3\244\1\245\1\247\2\245\1\247"+
    "\1\245\1\247\3\245\6\244\4\245\5\36\4\250\1\36"+
    "\2\250\6\36\2\250\3\36\1\250\3\36\1\250\6\36"+
    "\1\250\2\36\1\143\1\250\3\36\1\250\1\36\2\250"+
    "\1\36\1\250\1\36\3\250\6\36\4\250\5\251\4\252"+
    "\1\251\2\252\6\251\2\252\3\251\1\252\3\251\1\252"+
    "\11\251\1\253\1\252\5\251\1\252\4\251\2\252\7\251"+
    "\4\252\5\254\4\255\1\254\2\255\6\254\2\255\3\254"+
    "\1\255\3\254\1\255\3\254\1\255\2\254\1\255\2\254"+
    "\1\256\1\255\3\254\12\255\6\254\4\255\100\0\1\257"+
    "\76\0\1\260\1\261\7\0\1\262\1\263\1\0\1\264"+
    "\5\0\1\265\54\0\1\263\12\0\1\264\63\0\1\43"+
    "\1\266\2\43\1\0\2\43\2\0\1\267\3\0\2\43"+
    "\3\0\1\43\3\0\1\43\2\0\1\267\2\43\1\0"+
    "\1\43\3\0\1\43\3\0\12\43\6\0\4\43\5\0"+
    "\4\43\1\0\2\43\2\0\1\267\3\0\2\43\3\0"+
    "\1\43\3\0\1\43\2\0\1\267\2\43\1\0\1\43"+
    "\3\0\1\43\3\0\12\43\6\0\4\43\5\0\3\43"+
    "\1\270\1\0\2\43\2\0\1\267\3\0\2\43\3\0"+
    "\1\43\3\0\1\43\2\0\1\267\2\43\1\0\1\43"+
    "\3\0\1\43\3\0\12\43\6\0\4\43\5\0\4\43"+
    "\1\0\2\43\2\0\1\267\3\0\1\271\1\43\3\0"+
    "\1\43\3\0\1\272\2\0\1\267\2\43\1\0\1\43"+
    "\3\0\1\43\3\0\12\43\6\0\4\43\11\0\1\273"+
    "\71\0\3\43\1\274\1\0\2\43\2\0\1\267\3\0"+
    "\2\43\3\0\1\43\3\0\1\43\2\0\1\267\2\43"+
    "\1\0\1\43\3\0\1\43\3\0\12\43\6\0\4\43"+
    "\4\0\1\262\7\0\1\275\65\0\1\276\10\0\1\277"+
    "\77\0\1\300\62\0\1\301\7\0\1\302\2\0\1\300"+
    "\76\0\1\303\56\0\1\304\101\0\4\43\1\0\2\43"+
    "\2\0\1\267\3\0\2\43\3\0\1\305\3\0\1\43"+
    "\2\0\1\267\2\43\1\0\1\43\3\0\1\43\3\0"+
    "\12\43\6\0\4\43\5\0\4\43\1\0\2\43\2\0"+
    "\1\267\3\0\2\43\3\0\1\306\3\0\1\43\2\0"+
    "\1\267\2\43\1\0\1\43\3\0\1\43\3\0\12\43"+
    "\6\0\4\43\24\0\1\307\55\0\1\310\20\0\1\261"+
    "\76\0\1\265\15\0\1\311\1\312\60\0\1\261\76\0"+
    "\1\313\12\0\2\314\1\0\1\314\33\0\3\43\1\315"+
    "\1\0\2\43\2\0\1\267\3\0\2\43\3\0\1\43"+
    "\3\0\1\43\2\0\1\267\2\43\1\0\1\43\3\0"+
    "\1\43\3\0\12\43\6\0\4\43\37\0\1\71\13\0"+
    "\1\71\2\0\1\71\1\0\1\71\22\0\4\73\1\0"+
    "\2\73\2\0\1\316\3\0\2\73\3\0\1\73\3\0"+
    "\1\73\2\0\1\316\2\73\1\0\1\73\3\0\1\73"+
    "\3\0\12\73\6\0\4\73\44\0\1\75\100\0\2\77"+
    "\25\0\44\100\2\0\30\100\5\0\4\317\1\0\2\317"+
    "\6\0\2\317\3\0\1\317\3\0\1\317\3\0\1\71"+
    "\2\0\1\317\3\0\1\317\3\0\1\317\1\71\2\317"+
    "\1\71\1\317\1\71\3\317\6\0\4\317\70\0\1\320"+
    "\76\0\1\321\11\0\3\43\1\322\1\0\1\323\1\43"+
    "\2\0\1\267\3\0\2\43\3\0\1\43\3\0\1\43"+
    "\2\0\1\267\2\43\1\0\1\43\3\0\1\43\3\0"+
    "\12\43\6\0\4\43\5\0\4\112\1\0\2\112\6\0"+
    "\2\112\3\0\1\112\2\0\2\112\3\0\2\112\1\0"+
    "\1\112\3\0\1\112\3\0\12\112\6\0\4\112\44\0"+
    "\1\111\33\0\1\141\76\0\1\324\1\141\7\0\1\325"+
    "\1\326\1\0\1\141\5\0\1\141\54\0\1\326\12\0"+
    "\1\141\64\0\1\327\111\0\1\330\64\0\1\331\74\0"+
    "\1\332\71\0\1\325\7\0\1\333\65\0\1\141\10\0"+
    "\1\334\77\0\1\335\62\0\1\141\7\0\1\141\2\0"+
    "\1\335\76\0\1\336\56\0\1\337\123\0\1\141\72\0"+
    "\1\340\55\0\1\141\20\0\1\141\76\0\1\141\77\0"+
    "\1\141\76\0\1\141\54\0\1\141\131\0\1\36\36\0"+
    "\4\154\1\0\2\154\6\0\2\154\3\0\1\154\3\0"+
    "\1\154\3\0\1\154\2\0\1\154\3\0\1\154\3\0"+
    "\1\154\1\0\2\154\1\0\5\154\6\0\4\154\44\0"+
    "\1\153\104\0\1\156\2\0\1\156\63\0\1\157\75\0"+
    "\1\162\36\0\4\166\1\0\2\166\6\0\2\166\3\0"+
    "\1\166\3\0\1\166\6\0\1\166\3\0\1\166\3\0"+
    "\1\166\1\0\2\166\1\0\1\166\1\0\3\166\6\0"+
    "\4\166\37\0\1\167\13\0\1\167\2\0\1\167\1\0"+
    "\1\167\61\0\1\165\75\0\1\172\70\0\1\341\13\0"+
    "\1\341\2\0\1\341\1\0\1\341\64\0\2\177\71\0"+
    "\1\200\75\0\1\203\40\0\1\342\2\0\2\342\23\0"+
    "\1\342\2\0\1\342\10\0\4\342\1\0\2\342\1\0"+
    "\1\342\6\0\1\342\47\0\1\210\32\0\1\343\164\0"+
    "\2\344\50\0\1\217\75\0\1\221\100\0\2\223\17\0"+
    "\2\345\74\0\2\346\50\0\1\225\121\0\2\347\13\0"+
    "\1\350\2\0\2\350\23\0\1\350\2\0\1\350\10\0"+
    "\4\350\1\0\2\350\1\0\1\350\6\0\1\350\10\0"+
    "\2\233\1\0\1\233\11\0\2\233\3\0\1\233\3\0"+
    "\1\233\12\0\1\233\3\0\1\233\4\0\1\233\2\0"+
    "\1\233\10\0\3\233\7\0\1\234\2\0\2\234\23\0"+
    "\1\234\2\0\1\234\10\0\4\234\1\0\2\234\1\0"+
    "\1\234\6\0\1\234\47\0\1\232\75\0\2\351\1\0"+
    "\1\351\72\0\1\237\121\0\2\352\11\0\4\245\1\0"+
    "\2\245\6\0\2\245\3\0\1\245\3\0\1\245\3\0"+
    "\1\245\2\0\1\245\3\0\1\245\3\0\1\245\1\0"+
    "\2\245\1\0\1\245\1\0\3\245\6\0\4\245\44\0"+
    "\1\244\104\0\1\247\2\0\1\247\1\0\1\247\61\0"+
    "\1\251\36\0\4\255\1\0\2\255\6\0\2\255\3\0"+
    "\1\255\3\0\1\255\3\0\1\255\2\0\1\255\3\0"+
    "\1\255\3\0\12\255\6\0\4\255\44\0\1\254\34\0"+
    "\1\276\1\353\7\0\1\276\65\0\1\276\76\0\2\43"+
    "\1\354\1\43\1\0\2\43\2\0\1\267\3\0\2\43"+
    "\3\0\1\43\3\0\1\43\2\0\1\267\2\43\1\0"+
    "\1\43\3\0\1\43\3\0\12\43\6\0\4\43\5\0"+
    "\4\43\1\0\1\43\1\355\2\0\1\267\3\0\2\43"+
    "\3\0\1\43\3\0\1\43\2\0\1\267\2\43\1\0"+
    "\1\43\3\0\1\43\3\0\12\43\6\0\4\43\5\0"+
    "\4\43\1\0\2\43\2\0\1\267\3\0\1\43\1\356"+
    "\3\0\1\43\3\0\1\43\2\0\1\267\2\43\1\0"+
    "\1\43\3\0\1\43\3\0\12\43\6\0\4\43\5\0"+
    "\4\43\1\0\2\43\2\0\1\267\3\0\2\43\3\0"+
    "\1\43\3\0\1\43\2\0\1\267\2\43\1\0\1\43"+
    "\3\0\1\43\3\0\12\43\6\0\1\43\1\357\2\43"+
    "\11\0\1\360\71\0\4\43\1\0\1\43\1\361\2\0"+
    "\1\267\3\0\2\43\3\0\1\43\3\0\1\43\2\0"+
    "\1\267\2\43\1\0\1\43\3\0\1\43\3\0\12\43"+
    "\6\0\4\43\14\0\1\362\76\0\1\363\77\0\1\302"+
    "\76\0\1\364\57\0\1\365\100\0\4\43\1\0\2\43"+
    "\2\0\1\267\3\0\2\43\3\0\1\43\3\0\1\43"+
    "\2\0\1\267\2\43\1\0\1\43\3\0\1\43\3\0"+
    "\12\43\6\0\3\43\1\366\24\0\1\267\115\0\1\311"+
    "\62\0\1\367\134\0\1\370\76\0\1\370\11\0\4\43"+
    "\1\0\2\43\2\0\1\267\3\0\2\43\3\0\1\43"+
    "\3\0\1\43\2\0\1\267\2\43\1\0\1\43\3\0"+
    "\1\43\3\0\12\43\6\0\1\43\1\371\2\43\3\0"+
    "\1\141\1\326\7\0\1\141\65\0\1\141\100\0\1\372"+
    "\111\0\1\141\63\0\1\141\77\0\1\141\76\0\1\141"+
    "\76\0\1\141\77\0\1\141\76\0\1\141\101\0\1\141"+
    "\60\0\1\373\2\0\2\373\23\0\1\373\2\0\1\373"+
    "\10\0\4\373\1\0\2\373\1\0\1\373\6\0\1\373"+
    "\73\0\2\374\74\0\2\375\74\0\2\376\74\0\2\377"+
    "\74\0\2\u0100\10\0\1\u0101\76\0\3\43\1\u0102\1\0"+
    "\2\43\2\0\1\267\3\0\2\43\3\0\1\43\3\0"+
    "\1\43\2\0\1\267\2\43\1\0\1\43\3\0\1\43"+
    "\3\0\12\43\6\0\4\43\5\0\2\43\1\u0103\1\43"+
    "\1\0\2\43\2\0\1\267\3\0\2\43\3\0\1\43"+
    "\3\0\1\43\2\0\1\267\2\43\1\0\1\43\3\0"+
    "\1\43\3\0\12\43\6\0\4\43\5\0\4\43\1\0"+
    "\2\43\2\0\1\267\3\0\2\43\3\0\1\43\3\0"+
    "\1\43\2\0\1\267\2\43\1\0\1\43\3\0\1\43"+
    "\3\0\12\43\6\0\2\43\1\u0104\1\43\7\0\1\u0105"+
    "\2\0\2\u0105\23\0\1\u0105\2\0\1\u0105\10\0\4\u0105"+
    "\1\0\2\u0105\1\0\1\u0105\6\0\1\u0105\73\0\2\u0106"+
    "\11\0\2\43\1\u0107\1\43\1\0\2\43\2\0\1\267"+
    "\3\0\2\43\3\0\1\43\3\0\1\43\2\0\1\267"+
    "\2\43\1\0\1\43\3\0\1\43\3\0\12\43\6\0"+
    "\4\43\7\0\1\u0108\2\0\2\u0108\23\0\1\u0108\2\0"+
    "\1\u0108\10\0\4\u0108\1\0\2\u0108\1\0\1\u0108\6\0"+
    "\1\u0108\12\0\1\u0109\2\0\2\u0109\23\0\1\u0109\2\0"+
    "\1\u0109\10\0\4\u0109\1\0\2\u0109\1\0\1\u0109\6\0"+
    "\1\u0109\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10354];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\1\11\26\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\2\11\4\1\4\11\3\1\1\11\1\1\1\11"+
    "\5\1\1\11\17\1\1\11\2\1\10\11\3\1\1\11"+
    "\1\1\3\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\4\1\1\11\1\1\2\11\1\1\2\11\1\1\3\11"+
    "\2\1\1\0\2\11\1\1\1\11\3\1\1\11\2\1"+
    "\1\11\1\1\1\11\3\1\2\11\2\1\1\11\1\1"+
    "\1\11\3\1\3\11\1\1\1\11\2\1\1\11\1\0"+
    "\1\11\1\1\1\0\2\11\1\1\1\11\5\1\1\0"+
    "\1\11\2\1\2\11\2\0\3\1\2\11\1\0\1\1"+
    "\1\11\1\1\2\11\2\0\2\1\1\0\1\1\3\0"+
    "\1\1\2\0\2\1\2\0\3\1\1\11\4\0\2\11"+
    "\2\0\4\1\1\11\1\1\4\11\1\1\2\11\1\1"+
    "\1\0\1\1\1\11\1\0\4\11\4\1\1\11\2\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private org.elixir_lang.lexer.Stack stack = new org.elixir_lang.lexer.Stack();

  private void startQuote(CharSequence quotePromoterCharSequence) {
    String quotePromoter = quotePromoterCharSequence.toString();
    stack.push(quotePromoter, yystate());

    if (Base.isHeredocPromoter(quotePromoter)) {
      yybegin(GROUP_HEREDOC_START);
    } else {
      yybegin(GROUP);
    }
  }

  private IElementType fragmentType() {
    return stack.fragmentType();
  }

  private void handleInState(int nextLexicalState) {
    yypushback(yylength());
    yybegin(nextLexicalState);
  }

  private boolean isTerminator(CharSequence terminator) {
    return stack.terminator().equals(terminator.toString());
  }

  private boolean isInterpolating() {
    return stack.isInterpolating();
  }

  private boolean isInterpolatingSigil(CharSequence sigilName) {
    if (sigilName.length() != 1) {
      throw new IllegalArgumentException("sigil names can only be 1 character long");
    }

    return isInterpolatingSigil(sigilName.charAt(0));
  }

  private boolean isInterpolatingSigil(char sigilName) {
    return (sigilName >= 'a' && sigilName <= 'z');
  }

  private boolean isSigil() {
    return stack.isSigil();
  }

  private void nameSigil(CharSequence sigilName) {
    stack.nameSigil(sigilName.charAt(0));
  }

  private org.elixir_lang.lexer.StackFrame pop() {
    return stack.pop();
  }

  private org.elixir_lang.lexer.group.Quote promotedQuote(CharSequence promoterCharSequence) {
    // CharSequences don't look up correctly, so convert to String, which do.
    String promoter = promoterCharSequence.toString();
    org.elixir_lang.lexer.group.Quote quote = org.elixir_lang.lexer.group.Quote.fetch(promoter);

    return quote;
  }

  private IElementType promoterType() {
    return stack.promoterType();
  }

  private void setPromoter(CharSequence promoter) {
    stack.setPromoter(promoter.toString());
  }

  private IElementType sigilNameType() {
    return stack.sigilNameType();
  }

  // public for testing
  public void pushAndBegin(int lexicalState) {
    stack.push(yystate());
    yybegin(lexicalState);
  }

  private IElementType terminatorType() {
    return stack.terminatorType();
  }


  public ElixirFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ElixirFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { yybegin(GROUP_HEREDOC_LINE_BODY);
                                                return ElixirTypes.HEREDOC_LINE_WHITE_SPACE_TOKEN;
          }
        case 116: break;
        case 47: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                             handleInState(stackFrame.getLastLexicalState());
          }
        case 117: break;
        case 34: 
          { yybegin(UNKNOWN_BASE_WHOLE_NUMBER);
                                             return ElixirTypes.UNKNOWN_WHOLE_NUMBER_BASE;
          }
        case 118: break;
        case 40: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                            handleInState(stackFrame.getLastLexicalState());
          }
        case 119: break;
        case 95: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_OPERATOR;
          }
        case 120: break;
        case 89: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.OR_OPERATOR;
          }
        case 121: break;
        case 8: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MATCH_OPERATOR;
          }
        case 122: break;
        case 106: 
          { startQuote(yytext());
                                               return promoterType();
          }
        case 123: break;
        case 109: 
          { // Similar to GROUP_HEREDOC_END's GROUP_HEREDOC_TERMINATOR rule, but...
                               if (isTerminator(yytext())) {
                                 if (isSigil()) {
                                   yybegin(SIGIL_MODIFIERS);
                                   return terminatorType();
                                 } else {
                                   org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                   yybegin(stackFrame.getLastLexicalState());
                                   return stackFrame.terminatorType();
                                 }
                               } else {
                                 /* ...returns BAD_CHARACTER instead of going to GROUP_HEREDOC_LINE_BODY when the wrong
                                    type of terminator */
                                 return TokenType.BAD_CHARACTER;
                               }
          }
        case 124: break;
        case 82: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                  handleInState(stackFrame.getLastLexicalState());
          }
        case 125: break;
        case 37: 
          { yybegin(BINARY_WHOLE_NUMBER);
                                             return ElixirTypes.BINARY_WHOLE_NUMBER_BASE;
          }
        case 126: break;
        case 93: 
          { return ElixirTypes.TYPE_OPERATOR;
          }
        case 127: break;
        case 32: 
          { yybegin(ATOM_BODY);
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 128: break;
        case 31: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     return ElixirTypes.ATOM_FRAGMENT;
          }
        case 129: break;
        case 107: 
          { if (isTerminator(yytext())) {
                                      if (isSigil()) {
                                        yybegin(SIGIL_MODIFIERS);
                                        return terminatorType();
                                      } else {
                                        org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                        yybegin(stackFrame.getLastLexicalState());
                                        return stackFrame.terminatorType();
                                      }
                                   } else {
                                      handleInState(GROUP_HEREDOC_LINE_BODY);
                                   }
          }
        case 130: break;
        case 30: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.ATOM_FRAGMENT;
          }
        case 131: break;
        case 115: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FALSE;
          }
        case 132: break;
        case 5: 
          { pushAndBegin(SIGIL);
                                               return ElixirTypes.TILDE;
          }
        case 133: break;
        case 114: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { yybegin(GROUP_HEREDOC_END);
                                                  return ElixirTypes.HEREDOC_PREFIX_WHITE_SPACE;
          }
        case 134: break;
        case 35: 
          { yybegin(OCTAL_WHOLE_NUMBER);
                                             return ElixirTypes.OCTAL_WHOLE_NUMBER_BASE;
          }
        case 135: break;
        case 108: 
          { handleInState(GROUP_HEREDOC_END);
          }
        case 136: break;
        case 55: 
          { yybegin(GROUP);
            return fragmentType();
          }
        case 137: break;
        case 76: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           handleInState(stackFrame.getLastLexicalState());
          }
        case 138: break;
        case 29: 
          { return ElixirTypes.ATOM_FRAGMENT;
          }
        case 139: break;
        case 71: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                 handleInState(stackFrame.getLastLexicalState());
          }
        case 140: break;
        case 98: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(DECIMAL_FRACTION);
                                            return ElixirTypes.DECIMAL_MARK;
          }
        case 141: break;
        case 18: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ALIAS_TOKEN;
          }
        case 142: break;
        case 62: 
          { if (isTerminator(yytext())) {
                         if (isSigil()) {
                           yybegin(SIGIL_MODIFIERS);
                           return terminatorType();
                         } else {
                           org.elixir_lang.lexer.StackFrame stackFrame = pop();
                           yybegin(stackFrame.getLastLexicalState());
                           return stackFrame.terminatorType();
                         }
                       } else {
                         return fragmentType();
                       }
          }
        case 143: break;
        case 57: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                    yybegin(stackFrame.getLastLexicalState());
                                    return ElixirTypes.EOL;
          }
        case 144: break;
        case 113: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TRUE;
          }
        case 145: break;
        case 59: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                             yybegin(stackFrame.getLastLexicalState());
                             return ElixirTypes.CLOSING_CURLY;
          }
        case 146: break;
        case 110: 
          { setPromoter(yytext());
                             yybegin(GROUP_HEREDOC_START);
                             return promoterType();
          }
        case 147: break;
        case 63: 
          { if (isInterpolating()) {
                         pushAndBegin(ESCAPE_SEQUENCE);
                         return ElixirTypes.ESCAPE;
                       } else {
                         yybegin(ESCAPE_IN_LITERAL_GROUP);
                         return fragmentType();
                       }
          }
        case 148: break;
        case 21: 
          { return TokenType.WHITE_SPACE;
          }
        case 149: break;
        case 48: 
          { return ElixirTypes.INVALID_DECIMAL_DIGITS;
          }
        case 150: break;
        case 88: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AND_OPERATOR;
          }
        case 151: break;
        case 41: 
          { return ElixirTypes.INVALID_BINARY_DIGITS;
          }
        case 152: break;
        case 20: 
          { return ElixirTypes.EOL;
          }
        case 153: break;
        case 44: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                            handleInState(stackFrame.getLastLexicalState());
                                            // zero-width token
                                            return ElixirTypes.CALL;
          }
        case 154: break;
        case 38: 
          { yybegin(BINARY_WHOLE_NUMBER);
                                             return ElixirTypes.OBSOLETE_BINARY_WHOLE_NUMBER_BASE;
          }
        case 155: break;
        case 68: 
          { yybegin(GROUP_HEREDOC_LINE_START);
                               return ElixirTypes.EOL;
          }
        case 156: break;
        case 16: 
          { pushAndBegin(DECIMAL_WHOLE_NUMBER);
                                               return ElixirTypes.VALID_DECIMAL_DIGITS;
          }
        case 157: break;
        case 64: 
          { if (isInterpolating()) {
               pushAndBegin(ESCAPE_SEQUENCE);
               return ElixirTypes.ESCAPE;
             } else {
               return fragmentType();
             }
          }
        case 158: break;
        case 43: 
          { handleInState(KEYWORD_PAIR_MAYBE);
          }
        case 159: break;
        case 33: 
          { /* At the end of the quote, return the state (YYINITIAL or INTERPOLATION) before ATOM_START as
                        anything after the closing quote should be handle by the state prior to ATOM_START.  Without
                        this, EOL and WHITESPACE won't be handled correctly */
                     org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     yybegin(stackFrame.getLastLexicalState());
                     startQuote(yytext());
                     return promoterType();
          }
        case 160: break;
        case 24: 
          { return ElixirTypes.OPENING_BRACKET;
          }
        case 161: break;
        case 7: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.UNARY_OPERATOR;
          }
        case 162: break;
        case 103: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.HAT_OPERATOR;
          }
        case 163: break;
        case 111: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.BIT_STRING_OPERATOR;
          }
        case 164: break;
        case 73: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                yybegin(stackFrame.getLastLexicalState());
                                return ElixirTypes.INTERPOLATION_END;
          }
        case 165: break;
        case 94: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ElixirTypes.COLON;
          }
        case 166: break;
        case 46: 
          { yybegin(ESCAPE_SEQUENCE);
             return ElixirTypes.ESCAPE;
          }
        case 167: break;
        case 87: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IN_MATCH_OPERATOR;
          }
        case 168: break;
        case 65: 
          { yybegin(GROUP_HEREDOC_LINE_START);
          return ElixirTypes.EOL;
          }
        case 169: break;
        case 13: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.AT_OPERATOR;
          }
        case 170: break;
        case 97: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.FN;
          }
        case 171: break;
        case 75: 
          { setPromoter(yytext());
                             yybegin(GROUP);
                             return promoterType();
          }
        case 172: break;
        case 2: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.RELATIONAL_OPERATOR;
          }
        case 173: break;
        case 96: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(BASE_WHOLE_NUMBER_BASE);
                                                          return ElixirTypes.BASE_WHOLE_NUMBER_PREFIX;
          }
        case 174: break;
        case 74: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              handleInState(stackFrame.getLastLexicalState());
          }
        case 175: break;
        case 52: 
          { yybegin(DECIMAL_EXPONENT);
                    return ElixirTypes.DUAL_OPERATOR;
          }
        case 176: break;
        case 84: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TUPLE_OPERATOR;
          }
        case 177: break;
        case 54: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   yybegin(stackFrame.getLastLexicalState());
                   return ElixirTypes.SIGNIFICANT_WHITE_SPACE;
          }
        case 178: break;
        case 83: 
          { return ElixirTypes.INVALID_UNKNOWN_BASE_DIGITS;
          }
        case 179: break;
        case 3: 
          { pushAndBegin(CALL_OR_KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.IDENTIFIER;
          }
        case 180: break;
        case 45: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
             yybegin(stackFrame.getLastLexicalState());
             return ElixirTypes.CHAR_LIST_FRAGMENT;
          }
        case 181: break;
        case 58: 
          { yybegin(HEXADECIMAL_ESCAPE_SEQUENCE);
                                    return ElixirTypes.HEXADECIMAL_WHOLE_NUMBER_BASE;
          }
        case 182: break;
        case 60: 
          { return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
          }
        case 183: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 184: break;
        case 81: 
          { return ElixirTypes.SIGIL_MODIFIER;
          }
        case 185: break;
        case 6: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.PIPE_OPERATOR;
          }
        case 186: break;
        case 49: 
          { return ElixirTypes.VALID_DECIMAL_DIGITS;
          }
        case 187: break;
        case 50: 
          { return ElixirTypes.DECIMAL_SEPARATOR;
          }
        case 188: break;
        case 17: 
          { return ElixirTypes.COMMA;
          }
        case 189: break;
        case 23: 
          { return ElixirTypes.CLOSING_BRACKET;
          }
        case 190: break;
        case 9: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STRUCT_OPERATOR;
          }
        case 191: break;
        case 85: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.TWO_OPERATOR;
          }
        case 192: break;
        case 77: 
          { return ElixirTypes.INVALID_OCTAL_DIGITS;
          }
        case 193: break;
        case 51: 
          { handleInState(DECIMAL_EXPONENT);
          }
        case 194: break;
        case 72: 
          { return ElixirTypes.INVALID_HEXADECIMAL_DIGITS;
          }
        case 195: break;
        case 19: 
          { return ElixirTypes.SEMICOLON;
          }
        case 196: break;
        case 14: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MULTIPLICATION_OPERATOR;
          }
        case 197: break;
        case 39: 
          { yybegin(HEXADECIMAL_WHOLE_NUMBER);
                                             return ElixirTypes.OBSOLETE_HEXADECIMAL_WHOLE_NUMBER_BASE;
          }
        case 198: break;
        case 28: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                   handleInState(stackFrame.getLastLexicalState());
          }
        case 199: break;
        case 61: 
          { return fragmentType();
          }
        case 200: break;
        case 15: 
          { pushAndBegin(CHAR_TOKENIZATION);
                                                          return ElixirTypes.CHAR_TOKENIZER;
          }
        case 201: break;
        case 80: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                     handleInState(stackFrame.getLastLexicalState());
          }
        case 202: break;
        case 78: 
          { return ElixirTypes.VALID_OCTAL_DIGITS;
          }
        case 203: break;
        case 101: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.END;
          }
        case 204: break;
        case 91: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ASSOCIATION_OPERATOR;
          }
        case 205: break;
        case 10: 
          { return ElixirTypes.DOT_OPERATOR;
          }
        case 206: break;
        case 56: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                                    yybegin(stackFrame.getLastLexicalState());
                                    return ElixirTypes.ESCAPED_CHARACTER_TOKEN;
          }
        case 207: break;
        case 66: 
          { handleInState(GROUP_HEREDOC_LINE_BODY);
          }
        case 208: break;
        case 53: 
          { yybegin(DECIMAL_EXPONENT_SIGN);
                    return ElixirTypes.EXPONENT_MARK;
          }
        case 209: break;
        case 70: 
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                             yybegin(stackFrame.getLastLexicalState());
                             return ElixirTypes.VALID_HEXADECIMAL_DIGITS;
          }
        case 210: break;
        case 92: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.STAB_OPERATOR;
          }
        case 211: break;
        case 112: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.WHEN_OPERATOR;
          }
        case 212: break;
        case 99: 
          { if (isInterpolating()) {
                           pushAndBegin(INTERPOLATION);
                           return ElixirTypes.INTERPOLATION_START;
                          } else {
                           return fragmentType();
                          }
          }
        case 213: break;
        case 36: 
          { yybegin(HEXADECIMAL_WHOLE_NUMBER);
                                             return ElixirTypes.HEXADECIMAL_WHOLE_NUMBER_BASE;
          }
        case 214: break;
        case 102: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.NIL;
          }
        case 215: break;
        case 90: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.COMPARISON_OPERATOR;
          }
        case 216: break;
        case 104: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.MAP_OPERATOR;
          }
        case 217: break;
        case 100: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { org.elixir_lang.lexer.StackFrame stackFrame = pop();
                              yybegin(stackFrame.getLastLexicalState());
                              return ElixirTypes.KEYWORD_PAIR_COLON;
          }
        case 218: break;
        case 42: 
          { return ElixirTypes.VALID_BINARY_DIGITS;
          }
        case 219: break;
        case 27: 
          { /* return to KEYWORD_PAIR_MAYBE so that COLON after quote can be parsed
                                                  as KEYWORD_PAIR_COLON to differentiate between valid `<quote><colon>`
                                                  and invalid `<quote><space><colon>`. */
                                               pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               startQuote(yytext());
                                               return promoterType();
          }
        case 220: break;
        case 86: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.ARROW_OPERATOR;
          }
        case 221: break;
        case 69: 
          { yybegin(EXTENDED_HEXADECIMAL_ESCAPE_SEQUENCE);
                             return ElixirTypes.OPENING_CURLY;
          }
        case 222: break;
        case 79: 
          { nameSigil(yytext());
                               yybegin(NAMED_SIGIL);
                               return sigilNameType();
          }
        case 223: break;
        case 25: 
          { return ElixirTypes.CLOSING_PARENTHESIS;
          }
        case 224: break;
        case 11: 
          { pushAndBegin(DUAL_OPERATION);
                                               return ElixirTypes.DUAL_OPERATOR;
          }
        case 225: break;
        case 105: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 226: break;
        case 22: 
          { return ElixirTypes.COMMENT;
          }
        case 227: break;
        case 12: 
          { pushAndBegin(ATOM_START);
                                               return ElixirTypes.COLON;
          }
        case 228: break;
        case 4: 
          { pushAndBegin(KEYWORD_PAIR_MAYBE);
                                               return ElixirTypes.CAPTURE_OPERATOR;
          }
        case 229: break;
        case 26: 
          { return ElixirTypes.OPENING_PARENTHESIS;
          }
        case 230: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
