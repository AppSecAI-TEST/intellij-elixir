<idea-plugin version="2">
  <id>org.elixir_lang</id>
  <name>Elixir</name>
  <version>1.2.0-pre</version>
  <vendor email="Kronic.Deth@gmail.com">Luke Imhoff</vendor>

  <description><![CDATA[
      Elixir plugin
    ]]></description>

  <change-notes><![CDATA[
      <h1>v1.2.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              If (1) you have intellij-erlang installed and (2) you have an atom in Erlang that starts with
              <code>Elixir.</code>, such as <code>'Elixir.Test'</code>, then intellij-elixir will annotate whether it
              can resolve the name to a <code>defmodule</code> call in Elixir files.
            </li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Fi links to screenshots in README</li>
          </ul>
        </li>
      </ul>
      <h1>v1.1.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>
                <code>Build</code>
              </p>
              <ul>
                <li><code>Compile</code> an individual file</li>
                <li><code>Make Project</code> to build the entire project</li>
              </ul>
            </li>
            <li>
              <p>
                <code>New</code>
              </p>
              <ul>
                <li>
                  <p>
                    <code>Elixir File</code> has new templates
                  </p>
                  <ul>
                    <li>
                      <code>Empty module</code>
                    </li>
                    <li>
                      <code>Elixir Application</code>
                    </li>
                    <li>
                      <code>Elixir Supervisor</code>
                    </li>
                    <li>
                      <code>Elixir GenServer</code>
                    </li>
                    <li>
                      <code>Elixir GenEvent</code>
                    </li>
                  <ul>
                </li>
                <li>
                  <code>Project > Elixir</code> creates a new Elixir project with an empty <code>lib</code> directory
                  marked as source directory.
                </li>
                <li>
                  <p>
                    <code>Project from Existing Sources... </code>
                  </p>
                  <ul>
                    <li>
                       <code>Create project from existing sources</code> sets up the project with SDK using a
                       pre-existing directory.
                    </li>
                    <li>
                      <p>
                        <code>Import project from external model > Mix</code>
                      </p>
                      <ul>
                        <li>Fetches the the dependencies with the local version of <code>mix</code></li>
                        <li>Marks <code>lib</code> directory as source</li>
                        <li>Marks <code>test</code> directory as test sources</li>
                      </ul>
                    </li>
                  </ul>
                </li>
              </ul>
            </li>
            <li><code>Run > Elixir Mix</code> to setup Run Configurations to run <code>mix</code> tasks.</li>
          </ul>
        </li>
      </ul>
      <h1>v1.0.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>Update ant build on travis-ci.org to use IDEA 14.1.4 (from 14.0.2)</li>
            <li>Parser is verified to quote the same as native Elixir</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Fix parsing of unary vs binary +/- with leading and trailing spaces and newlines</li>
            <li>Allow EOL between list arguments and <code>]</code></li>
            <li>
              Relative identifiers after <code>.</code> that start with <code>and</code>, <code>or</code>, and
              <code>not</code> will be lexed as a single identifier instead of <code>and</code>, <code>or</code>, or
              <code>not</code> followed by another identifier.
            </li>
            <li><code>end</code> is allowed as a relative identifier after <code>.</code></li>
            <li>Fix <code>(...)</code> as part of matched expression in no parentheses stab signature</li>
            <li>Allow multiple newlines to mark the end of an expression, but only one <code>;</code></li>
            <li>
              Allow operators in function references (<code>&lt;op&gt;/&lt;arity&gt;</code>) for function captures
              (<code>&amp;&lt;op&gt;/&lt;arity&gt;</code>)
            </li>
            <li><code>unquote_splicing</code> is properly wrapped in <code>__block__</code> when in stab bodies</li>
            <li>Check for matching terminator in heredocs when determining white space type at beginning of line</li>
            <li>Allow &lt;space&gt;+&lt;EOL&gt; to count as addition</li>
            <li>Unary expressions inside parentheses are no longer marked <code>ambiguous_op: nil</code></li>
            <li>
              Differentiate between <code>Qualifier.'relative'()</code> vs <code>Qualifier.'relative' ()</code> and
              <code>Qualifier."relative"()</code> vs <code>Qualifier."relative" ()</code>
            </li>
            <li>Fix link to Elixir website in README</li>
            <li>All tokens have human-readable names and/or expected characters for better error messages</li>
          </ul>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              New Elixir File has moved to the last item in the New File menu to preserve <code>CTRL+N ENTER</code>
              keyboard shortcut for <code>New &gt; File</code>
            </li>
          </ul>
        </li>
      </ul>
      <h1>0.3.5</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li><code>do</code> blocks (<code>do end</code>)</li>
            <li>Unmatched expressions (operations involving <code>do</code> block calls and normal matched expressions)</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Lex full atom instead of just identifier-like operator prefix (<code>:in<nospace>dex</code> before vs <code>:index</code> after)</li>
            <li><code>!</code> and <code>not</code> are properly wrapped in <code>__block__</code>s when in stab bodies</li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.4</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>Bracket at expression (<code>@foo[key]</code>)</li>
            <li>Anonymous functions (<code>fn end</code>), stab clauses (<code>-&gt;</code>), and parentheticals (<code>1 + 2</code>)</li>
            <li>Maps (<code>%{}</code>) and structs (<code>%User{}</code>)</li>
            <li>Tuples (<code>{}</code>)</li>
            <li>Bit Strings (<code>&lt;&lt;&gt;&gt;</code>)</li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.3</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>Remote function calls (<code>Alias.function</code>, <code>:atom.function</code>, etc) and local function calls (<code>function</code>) with...</p>
              <ul>
                <li>
                  <p>No Parentheses with...</p>
                  <ul>
                    <li>No Arguments (<code>Alias.function</code>)</li>
                    <li>Keywords (<code>Alias.function key: value</code>)</li>
                    <li>
                      Nested No Parentheses Call (<code>Alias.function Inner.function positional, key: value</code>)
                    </li>
                    <li>Positional and Keyword arguments (<code>Alias.function positional, key: value</code>)</li>
                    <li>Matched Expression (<code>Alias.function 1 + 2</code>)</li>
                  </ul>
                </li>
                <li>
                  <p>Parentheses with...</p>
                  <ul>
                    <li>No arguments (<code>Alias.function()</code>)</li>
                    <li>No Parentheses Call (<code>Alias.function(Inner.function positional, key: value</code>)</li>
                    <li>Keywords (<code>Alias.function(key: value)</code>)</li>
                    <li>Positional and Keyword arguments (<code>Alias.function(positional, key: value)</code>)</li>
                    <li>Trailing parentheses for quoting (<code>def unquote(variable)(positional)</code>)</li>
                  </ul>
                </li>
              </ul>
            </li>
            <li>Bracket expressions (<code>foo[key]</code>)</li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.2</h1>
      <ul>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>
              Fix
              <code>
                NoSuchElementException
              </code>
              when no suggested SDK home paths are available.  Thanks to
              <a href="https://github.com/zyuyou">
                zyuyou
              </a>
              for
              <a href="https://github.com/KronicDeth/intellij-elixir/issues/120">
              reporting
              </a>
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.1</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              File &gt; New &gt; Project From Existing Sources can be used in IntelliJ to setup the excludes, sources, tests,
              SDK and libraries for an Elixir project that has already been created with <code>mix new</code>.
            </li>
            <li>
              Operators can be qualified function names.
            </li>
            <li>
              Anonymous function calls (<code>.(...)</code>)
            </li>
            <li>
              Inspection that marks errors when keywords aren't at end of list.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.3.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <code>\x</code> is marked an error in CharLists, CharList Heredocs, Strings, and String Heredocs, but not
              in any sigils.
            </li>
            <li>
              New Elixir File will automatically underscore the camel case module name when creating the file name and
              will convert qualifying aliases before the last <code>.</code> to directories.
            </li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              New Elixir File validates that the name is a valid Alias, so each <code>.</code> separated part must start with a
              capital letter.  Previous New Elixir File validated that the name was a valid path, and so forced the name
              to be lowercase.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.2.1</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              No parentheses function calls can occur as the right operand in binary infix operations or the sole
              operand of unary prefix operation.
            </li>
            <li>
              Function calls with neither parentheses nor <code>do</code> blocks that have at least 2 arguments: a
              positional argument and keyword arguments or 2 or more positional argument(s) followed by optional keyword
              arguments.
            </li>
            <li>Inspection that marks errors for ambiguous commas</li>
            <li>Inspection that marks errors for ambiguous parentheses</li>
            <li>Quick Fix for the ambiguous parentheses to remove the space between the function name and the opening parentheses.</li>
            <li>Inspection that marks errors for missing end-of-expressions (<code>;</code> and newlines) between expressions.</li>
            <li>Quick Fix to insert <code>;</code> for missing end-of-expression.</li>
            <li>Quick Fix to insert newline for missing end-of-expression.</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Right hand-side of dot_alias and dot_identifier was translated incorrectly. Only Aliases and Identifiers are allowed now.</li>
          </ul>
        </li>
      </ul>
      <h1>v0.2.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>New attributes for parts of numbers on Color Settings Page</p>
              <ul>
                <li>Binary, Decimal, Hexadecimal, and Octal Digits</li>
                <li>Decimal Exponent, Mark, and Separator</li>
                <li>
                  <p>Invalid Binary, Decimal, Hexadecimal, and Octal Digits</p>
                  <ul>
                    <li>2-9, A-Z, and a-z will be parsed as invalid binary digits</li>
                    <li>8-9, A-Z, and a-z will be parsed as invalid octal digits</li>
                    <li>G-Z and g-z will be parsed as invalid hexadecimal digits</li>
                  </ul>
                </li>
                <li>
                  <p>Non-Decimal Base Prefix</p>
                  <ul>
                    <li>Any letter other than b, o, or x, in either case, will be recognized as an invalid whole number base</li>
                  </ul>
                </li>
                <li>Obsolete Non-Decimal Base Prefix (<code>B</code> for binary and <code>X</code> for hexadecimal)</li>
              </ul>
            </li>
            <li>Any digit, 0-9, A-Z, or a-z will be parsed as invalid for invalid whole number based numbers</li>
            <li>Recovery for non-decimal whole numbers if the prefix is given, but no digits are given</li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>Recovery for non-decimal whole numbers if the prefix is given, but no digits are given</li>
          </ul>
        </li>
      </ul>
      <h1>v0.1.4</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>All valid escape sequences (<code>\&lt;character&gt;</code>, <code>\x&lt;hexadecimal&gt;</code>, <code>\x{&lt;hexadecimal&gt;}</code>,) are recognized.</li>
            <li>Support for creation of Elixir modules</li>
            <li>Use pygments' elixir_example.ex supplied by Alexei Sholik for Color Settings Page.</li>
            <li><code>?</code> before any character or valid escape sequence will be recognized as a character token.</li>
            <li><code>;</code> is recognized as EOL. <code>\r\n</code> and <code>\n</code> style EOL can be escaped with <code>\</code> and will be treated as whitespace.</li>
            <li>Operator arity, associativity, and precedence</li>
            <li>Decimal integers and floats</li>
            <li>Identifiers (variable, function, and macro names)</li>
            <li><code>...</code> identifier</li>
            <li>Aliases (module names)</li>
            <li>Keyword Identifiers</li>
            <li>Empty Parentheses</li>
            <li>In Operator</li>
            <li>Dot Operator</li>
            <li>Keyword Lists</li>
            <li>Matched Expressions</li>
            <li>Regular Keywords (<code>end</code>, <code>false</code>, <code>fn</code>, <code>nil</code>, and <code>true</code>)
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Sigil terminator escapes are recognized, so that sigils are no longer prematurely terminated.</li>
            <li>Comments do not consume EOL, so trailing comments don't cause error parsing expression on following line.</li>
            <li>Sigil modifiers now work on groups in addition to heredocs.</li>
            <li><code>;</code> is separate from <code>EOL</code> and either or both can separate expressions, but only <code>EOL</code> can separate operators and operands for operations</li>
          </ul>
         </li>
      </ul>
    ]]>
  </change-notes>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
  <idea-version since-build="131"/>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>
  <depends config-file="intellij-erlang-plugin.xml" optional="true">org.jetbrains.erlang</depends>
  <depends config-file="rich-platform-plugin.xml" optional="true">com.intellij.modules.java</depends>

  <extensions defaultExtensionNs="com.intellij">
    <!-- Elixir Module Structure -->
    <sdkType implementation="org.elixir_lang.sdk.ElixirSdkType"/>

    <moduleConfigurationEditorProvider implementation="org.elixir_lang.module.DefaultModuleEditorsProvider" order="first"/>

    <editorNotificationProvider implementation="org.elixir_lang.inspection.SetupSDKNotificationProvider"/>

    <!-- Mix related extensions -->
    <projectConfigurable instance="org.elixir_lang.settings.ElixirExternalToolsConfigurable" />
    <projectService serviceImplementation="org.elixir_lang.mix.settings.MixSettings" />
    <programRunner implementation="org.elixir_lang.mix.runner.MixRunner" />
    <configurationType implementation="org.elixir_lang.mix.runner.MixRunConfigurationType" />

    <colorSettingsPage implementation="org.elixir_lang.ElixirColorSettingsPage"/>
    <fileTypeFactory implementation="org.elixir_lang.ElixirFileTypeFactory"/>

    <!-- for template -->
    <internalFileTemplate name="Elixir Module"/>
    <internalFileTemplate name="Elixir Application"/>
    <internalFileTemplate name="Elixir Supervisor"/>
    <internalFileTemplate name="Elixir GenServer"/>
    <internalFileTemplate name="Elixir GenEvent"/>

    <lang.parserDefinition language="Elixir" implementationClass="org.elixir_lang.ElixirParserDefinition"/>
    <lang.syntaxHighlighterFactory key="Elixir" implementationClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>
    <localInspection displayName="Ambiguous nested calls" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesManyStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesManyStrict"/>
    <localInspection displayName="Ambiguous parentheses" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesStrict"/>
    <localInspection displayName="Missing End-of-Expression" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.MissingEndOfExpression" language="Elixir"
                     level="ERROR" shortName="MissingEndOfExpression"/>
    <localInspection displayName="Keywords Not At End" enabledByDefault="true"
                     groupName="Elixir" implementationClass="org.elixir_lang.inspection.KeywordsNotAtEnd"
                     language="Elixir" level="ERROR" shortName="KeywordsNotAtEnd"/>
  </extensions>

  <application-components>
    <!-- Add your application components here -->
  </application-components>

  <actions>
    <group id="LangElixir.NewActions">
      <separator/>
      <action id="Elixir.NewFile" class="org.elixir_lang.action.CreateElixirModuleAction"
              text="Elixir File" description="Create new Elixir Module">
      </action>
      <separator/>

      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml" />
    </group>
  </actions>

</idea-plugin>
