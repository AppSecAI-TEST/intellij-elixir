<idea-plugin version="2">
  <id>org.elixir_lang</id>
  <name>Elixir</name>
  <version>0.3.0</version>
  <vendor email="Kronic.Deth@gmail.com">Luke Imhoff</vendor>

  <description><![CDATA[
      Elixir plugin
    ]]></description>

  <change-notes><![CDATA[
      <h1>v0.3.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <code>\x</code> is marked an error in CharLists, CharList Heredocs, Strings, and String Heredocs, but not
              in any sigils.
            </li>
            <li>
              New Elixir File will automatically underscore the camel case module name when creating the file name and
              will convert qualifying aliases before the last <code>.</code> to directories.
            </li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>
              New Elixir File validates that the name is a valid Alias, so each `.` separated part must start with a
              capital letter.  Previous New Elixir File validated that the name was a valid path, and so forced the name
              to be lowercase.
            </li>
          </ul>
        </li>
      </ul>
      <h1>v0.2.1</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              No parentheses function calls can occur as the right operand in binary infix operations or the sole
              operand of unary prefix operation.
            </li>
            <li>
              Function calls with neither parentheses nor <code>do</code> blocks that have at least 2 arguments: a
              positional argument and keyword arguments or 2 or more positional argument(s) followed by optional keyword
              arguments.
            </li>
            <li>Inspection that marks errors for ambiguous commas</li>
            <li>Inspection that marks errors for ambiguous parentheses</li>
            <li>Quick Fix for the ambiguous parentheses to remove the space between the function name and the opening parentheses.</li>
            <li>Inspection that marks errors for missing end-of-expressions (`;` and newlines) between expressions.</li>
            <li>Quick Fix to insert `;` for missing end-of-expression.</li>
            <li>Quick Fix to insert newline for missing end-of-expression.</li>
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Right hand-side of dot_alias and dot_identifier was translated incorrectly. Only Aliases and Identifiers are allowed now.</li>
          </ul>
        </li>
      </ul>
      <h1>v0.2.0</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>
              <p>New attributes for parts of numbers on Color Settings Page</p>
              <ul>
                <li>Binary, Decimal, Hexadecimal, and Octal Digits</li>
                <li>Decimal Exponent, Mark, and Separator</li>
                <li>
                  <p>Invalid Binary, Decimal, Hexadecimal, and Octal Digits</p>
                  <ul>
                    <li>2-9, A-Z, and a-z will be parsed as invalid binary digits</li>
                    <li>8-9, A-Z, and a-z will be parsed as invalid octal digits</li>
                    <li>G-Z and g-z will be parsed as invalid hexadecimal digits</li>
                  </ul>
                </li>
                <li>
                  <p>Non-Decimal Base Prefix</p>
                  <ul>
                    <li>Any letter other than b, o, or x, in either case, will be recognized as an invalid whole number base</li>
                  </ul>
                </li>
                <li>Obsolete Non-Decimal Base Prefix (<code>B</code> for binary and <code>X</code> for hexadecimal)</li>
              </ul>
            </li>
            <li>Any digit, 0-9, A-Z, or a-z will be parsed as invalid for invalid whole number based numbers</li>
            <li>Recovery for non-decimal whole numbers if the prefix is given, but no digits are given</li>
          </ul>
        </li>
        <li>
          <p>Incompatible Changes</p>
          <ul>
            <li>Recovery for non-decimal whole numbers if the prefix is given, but no digits are given</li>
          </ul>
        </li>
      </ul>
      <h1>v0.1.4</h1>
      <ul>
        <li>
          <p>Enhancements</p>
          <ul>
            <li>All valid escape sequences (<code>\&lt;character&gt;</code>, <code>\x&lt;hexadecimal&gt;</code>, <code>\x{&lt;hexadecimal&gt;}</code>,) are recognized.</li>
            <li>Support for creation of Elixir modules</li>
            <li>Use pygments' elixir_example.ex supplied by Alexei Sholik for Color Settings Page.<li>
            <li><code>?</code> before any character or valid escape sequence will be recognized as a character token.</li>
            <li><code>;</code> is recognized as EOL. <code>\r\n</code> and <code>\n</code> style EOL can be escaped with <code>\</code> and will be treated as whitespace.</li>
            <li>Operator arity, associativity, and precedence</li>
            <li>Decimal integers and floats</li>
            <li>Identifiers (variable, function, and macro names)</li>
            <li><code>...</code> identifier</li>
            <li>Aliases (module names)</li>
            <li>Keyword Identifiers</li>
            <li>Empty Parentheses</li>
            <li>In Operator</li>
            <li>Dot Operator</li>
            <li>Keyword Lists</li>
            <li>Matched Expressions</li>
            <li>Regular Keywords (<code>end</code>, <code>false</code>, <code>fn</code>, <code>nil</code>, and <code>true</code>)
          </ul>
        </li>
        <li>
          <p>Bug Fixes</p>
          <ul>
            <li>Sigil terminator escapes are recognized, so that sigils are no longer prematurely terminated.</li>
            <li>Comments do not consume EOL, so trailing comments don't cause error parsing expression on following line.</li>
            <li>Sigil modifiers now work on groups in addition to heredocs.</li>
            <li><code>;</code> is separate from <code>EOL</code> and either or both can separate expressions, but only <code>EOL</code> can separate operators and operands for operations</li>
          </ul>
         </li>
      </ul>
    ]]>
  </change-notes>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
  <idea-version since-build="131"/>

  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>

  <extensions defaultExtensionNs="com.intellij">
    <colorSettingsPage implementation="org.elixir_lang.ElixirColorSettingsPage"/>
    <fileTypeFactory implementation="org.elixir_lang.ElixirFileTypeFactory"/>
    <internalFileTemplate name="Elixir Module"/>
    <lang.parserDefinition language="Elixir" implementationClass="org.elixir_lang.ElixirParserDefinition"/>
    <lang.syntaxHighlighterFactory key="Elixir" implementationClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>
    <localInspection displayName="Ambiguous nested calls" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesManyStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesManyStrict"/>
    <localInspection displayName="Ambiguous parentheses" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.NoParenthesesStrict" language="Elixir"
                     level="ERROR" shortName="NoParenthesesStrict"/>
    <localInspection displayName="Missing End-of-Expression" enabledByDefault="true" groupName="Elixir"
                     implementationClass="org.elixir_lang.inspection.MissingEndOfExpression" language="Elixir"
                     level="ERROR" shortName="MissingEndOfExpression"/>
  </extensions>

  <application-components>
    <!-- Add your application components here -->
  </application-components>

  <project-components>
    <!-- Add your project components here -->
  </project-components>

  <actions>
    <action id="Elixir.NewFile" class="org.elixir_lang.action.CreateElixirModuleAction"
            text="Elixir File" description="Create new Elixir Module">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFile"/>
    </action>
  </actions>

</idea-plugin>